
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function is_promise(value) {
        return value && typeof value === 'object' && typeof value.then === 'function';
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function set_store_value(store, ret, value) {
        store.set(value);
        return ret;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value === null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        select.selectedIndex = -1; // no option should be selected
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { stylesheet } = info;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                info.rules = {};
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    function handle_promise(promise, info) {
        const token = info.token = {};
        function update(type, index, key, value) {
            if (info.token !== token)
                return;
            info.resolved = value;
            let child_ctx = info.ctx;
            if (key !== undefined) {
                child_ctx = child_ctx.slice();
                child_ctx[key] = value;
            }
            const block = type && (info.current = type)(child_ctx);
            let needs_flush = false;
            if (info.block) {
                if (info.blocks) {
                    info.blocks.forEach((block, i) => {
                        if (i !== index && block) {
                            group_outros();
                            transition_out(block, 1, 1, () => {
                                if (info.blocks[i] === block) {
                                    info.blocks[i] = null;
                                }
                            });
                            check_outros();
                        }
                    });
                }
                else {
                    info.block.d(1);
                }
                block.c();
                transition_in(block, 1);
                block.m(info.mount(), info.anchor);
                needs_flush = true;
            }
            info.block = block;
            if (info.blocks)
                info.blocks[index] = block;
            if (needs_flush) {
                flush();
            }
        }
        if (is_promise(promise)) {
            const current_component = get_current_component();
            promise.then(value => {
                set_current_component(current_component);
                update(info.then, 1, info.value, value);
                set_current_component(null);
            }, error => {
                set_current_component(current_component);
                update(info.catch, 2, info.error, error);
                set_current_component(null);
                if (!info.hasCatch) {
                    throw error;
                }
            });
            // if we previously had a then/catch block, destroy it
            if (info.current !== info.pending) {
                update(info.pending, 0);
                return true;
            }
        }
        else {
            if (info.current !== info.then) {
                update(info.then, 1, info.value, promise);
                return true;
            }
            info.resolved = promise;
        }
    }
    function update_await_block_branch(info, ctx, dirty) {
        const child_ctx = ctx.slice();
        const { resolved } = info;
        if (info.current === info.then) {
            child_ctx[info.value] = resolved;
        }
        if (info.current === info.catch) {
            child_ctx[info.error] = resolved;
        }
        info.block.p(child_ctx, dirty);
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }

    /**
     * @typedef {Object} WrappedComponent Object returned by the `wrap` method
     * @property {SvelteComponent} component - Component to load (this is always asynchronous)
     * @property {RoutePrecondition[]} [conditions] - Route pre-conditions to validate
     * @property {Object} [props] - Optional dictionary of static props
     * @property {Object} [userData] - Optional user data dictionary
     * @property {bool} _sveltesparouter - Internal flag; always set to true
     */

    /**
     * @callback AsyncSvelteComponent
     * @returns {Promise<SvelteComponent>} Returns a Promise that resolves with a Svelte component
     */

    /**
     * @callback RoutePrecondition
     * @param {RouteDetail} detail - Route detail object
     * @returns {boolean|Promise<boolean>} If the callback returns a false-y value, it's interpreted as the precondition failed, so it aborts loading the component (and won't process other pre-condition callbacks)
     */

    /**
     * @typedef {Object} WrapOptions Options object for the call to `wrap`
     * @property {SvelteComponent} [component] - Svelte component to load (this is incompatible with `asyncComponent`)
     * @property {AsyncSvelteComponent} [asyncComponent] - Function that returns a Promise that fulfills with a Svelte component (e.g. `{asyncComponent: () => import('Foo.svelte')}`)
     * @property {SvelteComponent} [loadingComponent] - Svelte component to be displayed while the async route is loading (as a placeholder); when unset or false-y, no component is shown while component
     * @property {object} [loadingParams] - Optional dictionary passed to the `loadingComponent` component as params (for an exported prop called `params`)
     * @property {object} [userData] - Optional object that will be passed to events such as `routeLoading`, `routeLoaded`, `conditionsFailed`
     * @property {object} [props] - Optional key-value dictionary of static props that will be passed to the component. The props are expanded with {...props}, so the key in the dictionary becomes the name of the prop.
     * @property {RoutePrecondition[]|RoutePrecondition} [conditions] - Route pre-conditions to add, which will be executed in order
     */

    /**
     * Wraps a component to enable multiple capabilities:
     * 1. Using dynamically-imported component, with (e.g. `{asyncComponent: () => import('Foo.svelte')}`), which also allows bundlers to do code-splitting.
     * 2. Adding route pre-conditions (e.g. `{conditions: [...]}`)
     * 3. Adding static props that are passed to the component
     * 4. Adding custom userData, which is passed to route events (e.g. route loaded events) or to route pre-conditions (e.g. `{userData: {foo: 'bar}}`)
     * 
     * @param {WrapOptions} args - Arguments object
     * @returns {WrappedComponent} Wrapped component
     */
    function wrap$1(args) {
        if (!args) {
            throw Error('Parameter args is required')
        }

        // We need to have one and only one of component and asyncComponent
        // This does a "XNOR"
        if (!args.component == !args.asyncComponent) {
            throw Error('One and only one of component and asyncComponent is required')
        }

        // If the component is not async, wrap it into a function returning a Promise
        if (args.component) {
            args.asyncComponent = () => Promise.resolve(args.component);
        }

        // Parameter asyncComponent and each item of conditions must be functions
        if (typeof args.asyncComponent != 'function') {
            throw Error('Parameter asyncComponent must be a function')
        }
        if (args.conditions) {
            // Ensure it's an array
            if (!Array.isArray(args.conditions)) {
                args.conditions = [args.conditions];
            }
            for (let i = 0; i < args.conditions.length; i++) {
                if (!args.conditions[i] || typeof args.conditions[i] != 'function') {
                    throw Error('Invalid parameter conditions[' + i + ']')
                }
            }
        }

        // Check if we have a placeholder component
        if (args.loadingComponent) {
            args.asyncComponent.loading = args.loadingComponent;
            args.asyncComponent.loadingParams = args.loadingParams || undefined;
        }

        // Returns an object that contains all the functions to execute too
        // The _sveltesparouter flag is to confirm the object was created by this router
        const obj = {
            component: args.asyncComponent,
            userData: args.userData,
            conditions: (args.conditions && args.conditions.length) ? args.conditions : undefined,
            props: (args.props && Object.keys(args.props).length) ? args.props : {},
            _sveltesparouter: true
        };

        return obj
    }

    const subscriber_queue = [];
    /**
     * Creates a `Readable` store that allows reading by subscription.
     * @param value initial value
     * @param {StartStopNotifier}start start and stop notifications for subscriptions
     */
    function readable(value, start) {
        return {
            subscribe: writable(value, start).subscribe
        };
    }
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }
    function derived(stores, fn, initial_value) {
        const single = !Array.isArray(stores);
        const stores_array = single
            ? [stores]
            : stores;
        const auto = fn.length < 2;
        return readable(initial_value, (set) => {
            let inited = false;
            const values = [];
            let pending = 0;
            let cleanup = noop;
            const sync = () => {
                if (pending) {
                    return;
                }
                cleanup();
                const result = fn(single ? values[0] : values, set);
                if (auto) {
                    set(result);
                }
                else {
                    cleanup = is_function(result) ? result : noop;
                }
            };
            const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
                values[i] = value;
                pending &= ~(1 << i);
                if (inited) {
                    sync();
                }
            }, () => {
                pending |= (1 << i);
            }));
            inited = true;
            sync();
            return function stop() {
                run_all(unsubscribers);
                cleanup();
            };
        });
    }

    function parse(str, loose) {
    	if (str instanceof RegExp) return { keys:false, pattern:str };
    	var c, o, tmp, ext, keys=[], pattern='', arr = str.split('/');
    	arr[0] || arr.shift();

    	while (tmp = arr.shift()) {
    		c = tmp[0];
    		if (c === '*') {
    			keys.push('wild');
    			pattern += '/(.*)';
    		} else if (c === ':') {
    			o = tmp.indexOf('?', 1);
    			ext = tmp.indexOf('.', 1);
    			keys.push( tmp.substring(1, !!~o ? o : !!~ext ? ext : tmp.length) );
    			pattern += !!~o && !~ext ? '(?:/([^/]+?))?' : '/([^/]+?)';
    			if (!!~ext) pattern += (!!~o ? '?' : '') + '\\' + tmp.substring(ext);
    		} else {
    			pattern += '/' + tmp;
    		}
    	}

    	return {
    		keys: keys,
    		pattern: new RegExp('^' + pattern + (loose ? '(?=$|\/)' : '\/?$'), 'i')
    	};
    }

    /* node_modules\svelte-spa-router\Router.svelte generated by Svelte v3.48.0 */

    const { Error: Error_1, Object: Object_1$1, console: console_1$1 } = globals;

    // (251:0) {:else}
    function create_else_block$6(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [/*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*props*/ 4)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*props*/ ctx[2])])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler_1*/ ctx[7]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(251:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (244:0) {#if componentParams}
    function create_if_block$9(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	const switch_instance_spread_levels = [{ params: /*componentParams*/ ctx[1] }, /*props*/ ctx[2]];
    	var switch_value = /*component*/ ctx[0];

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return {
    			props: switch_instance_props,
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    		switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*componentParams, props*/ 6)
    			? get_spread_update(switch_instance_spread_levels, [
    					dirty & /*componentParams*/ 2 && { params: /*componentParams*/ ctx[1] },
    					dirty & /*props*/ 4 && get_spread_object(/*props*/ ctx[2])
    				])
    			: {};

    			if (switch_value !== (switch_value = /*component*/ ctx[0])) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					switch_instance.$on("routeEvent", /*routeEvent_handler*/ ctx[6]);
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(244:0) {#if componentParams}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$9, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*componentParams*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error_1("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function wrap(component, userData, ...conditions) {
    	// Use the new wrap method and show a deprecation warning
    	// eslint-disable-next-line no-console
    	console.warn('Method `wrap` from `svelte-spa-router` is deprecated and will be removed in a future version. Please use `svelte-spa-router/wrap` instead. See http://bit.ly/svelte-spa-router-upgrading');

    	return wrap$1({ component, userData, conditions });
    }

    /**
     * @typedef {Object} Location
     * @property {string} location - Location (page/view), for example `/book`
     * @property {string} [querystring] - Querystring from the hash, as a string not parsed
     */
    /**
     * Returns the current location from the hash.
     *
     * @returns {Location} Location object
     * @private
     */
    function getLocation() {
    	const hashPosition = window.location.href.indexOf('#/');

    	let location = hashPosition > -1
    	? window.location.href.substr(hashPosition + 1)
    	: '/';

    	// Check if there's a querystring
    	const qsPosition = location.indexOf('?');

    	let querystring = '';

    	if (qsPosition > -1) {
    		querystring = location.substr(qsPosition + 1);
    		location = location.substr(0, qsPosition);
    	}

    	return { location, querystring };
    }

    const loc = readable(null, // eslint-disable-next-line prefer-arrow-callback
    function start(set) {
    	set(getLocation());

    	const update = () => {
    		set(getLocation());
    	};

    	window.addEventListener('hashchange', update, false);

    	return function stop() {
    		window.removeEventListener('hashchange', update, false);
    	};
    });

    const location = derived(loc, $loc => $loc.location);
    const querystring = derived(loc, $loc => $loc.querystring);
    const params$1 = writable(undefined);

    async function push(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	// Note: this will include scroll state in history even when restoreScrollState is false
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	window.location.hash = (location.charAt(0) == '#' ? '' : '#') + location;
    }

    async function pop() {
    	// Execute this code when the current call stack is complete
    	await tick();

    	window.history.back();
    }

    async function replace(location) {
    	if (!location || location.length < 1 || location.charAt(0) != '/' && location.indexOf('#/') !== 0) {
    		throw Error('Invalid parameter location');
    	}

    	// Execute this code when the current call stack is complete
    	await tick();

    	const dest = (location.charAt(0) == '#' ? '' : '#') + location;

    	try {
    		const newState = { ...history.state };
    		delete newState['__svelte_spa_router_scrollX'];
    		delete newState['__svelte_spa_router_scrollY'];
    		window.history.replaceState(newState, undefined, dest);
    	} catch(e) {
    		// eslint-disable-next-line no-console
    		console.warn('Caught exception while replacing the current page. If you\'re running this in the Svelte REPL, please note that the `replace` method might not work in this environment.');
    	}

    	// The method above doesn't trigger the hashchange event, so let's do that manually
    	window.dispatchEvent(new Event('hashchange'));
    }

    function link(node, opts) {
    	opts = linkOpts(opts);

    	// Only apply to <a> tags
    	if (!node || !node.tagName || node.tagName.toLowerCase() != 'a') {
    		throw Error('Action "link" can only be used with <a> tags');
    	}

    	updateLink(node, opts);

    	return {
    		update(updated) {
    			updated = linkOpts(updated);
    			updateLink(node, updated);
    		}
    	};
    }

    // Internal function used by the link function
    function updateLink(node, opts) {
    	let href = opts.href || node.getAttribute('href');

    	// Destination must start with '/' or '#/'
    	if (href && href.charAt(0) == '/') {
    		// Add # to the href attribute
    		href = '#' + href;
    	} else if (!href || href.length < 2 || href.slice(0, 2) != '#/') {
    		throw Error('Invalid value for "href" attribute: ' + href);
    	}

    	node.setAttribute('href', href);

    	node.addEventListener('click', event => {
    		// Prevent default anchor onclick behaviour
    		event.preventDefault();

    		if (!opts.disabled) {
    			scrollstateHistoryHandler(event.currentTarget.getAttribute('href'));
    		}
    	});
    }

    // Internal function that ensures the argument of the link action is always an object
    function linkOpts(val) {
    	if (val && typeof val == 'string') {
    		return { href: val };
    	} else {
    		return val || {};
    	}
    }

    /**
     * The handler attached to an anchor tag responsible for updating the
     * current history state with the current scroll state
     *
     * @param {string} href - Destination
     */
    function scrollstateHistoryHandler(href) {
    	// Setting the url (3rd arg) to href will break clicking for reasons, so don't try to do that
    	history.replaceState(
    		{
    			...history.state,
    			__svelte_spa_router_scrollX: window.scrollX,
    			__svelte_spa_router_scrollY: window.scrollY
    		},
    		undefined,
    		undefined
    	);

    	// This will force an update as desired, but this time our scroll state will be attached
    	window.location.hash = href;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, []);
    	let { routes = {} } = $$props;
    	let { prefix = '' } = $$props;
    	let { restoreScrollState = false } = $$props;

    	/**
     * Container for a route: path, component
     */
    	class RouteItem {
    		/**
     * Initializes the object and creates a regular expression from the path, using regexparam.
     *
     * @param {string} path - Path to the route (must start with '/' or '*')
     * @param {SvelteComponent|WrappedComponent} component - Svelte component for the route, optionally wrapped
     */
    		constructor(path, component) {
    			if (!component || typeof component != 'function' && (typeof component != 'object' || component._sveltesparouter !== true)) {
    				throw Error('Invalid component object');
    			}

    			// Path must be a regular or expression, or a string starting with '/' or '*'
    			if (!path || typeof path == 'string' && (path.length < 1 || path.charAt(0) != '/' && path.charAt(0) != '*') || typeof path == 'object' && !(path instanceof RegExp)) {
    				throw Error('Invalid value for "path" argument - strings must start with / or *');
    			}

    			const { pattern, keys } = parse(path);
    			this.path = path;

    			// Check if the component is wrapped and we have conditions
    			if (typeof component == 'object' && component._sveltesparouter === true) {
    				this.component = component.component;
    				this.conditions = component.conditions || [];
    				this.userData = component.userData;
    				this.props = component.props || {};
    			} else {
    				// Convert the component to a function that returns a Promise, to normalize it
    				this.component = () => Promise.resolve(component);

    				this.conditions = [];
    				this.props = {};
    			}

    			this._pattern = pattern;
    			this._keys = keys;
    		}

    		/**
     * Checks if `path` matches the current route.
     * If there's a match, will return the list of parameters from the URL (if any).
     * In case of no match, the method will return `null`.
     *
     * @param {string} path - Path to test
     * @returns {null|Object.<string, string>} List of paramters from the URL if there's a match, or `null` otherwise.
     */
    		match(path) {
    			// If there's a prefix, check if it matches the start of the path.
    			// If not, bail early, else remove it before we run the matching.
    			if (prefix) {
    				if (typeof prefix == 'string') {
    					if (path.startsWith(prefix)) {
    						path = path.substr(prefix.length) || '/';
    					} else {
    						return null;
    					}
    				} else if (prefix instanceof RegExp) {
    					const match = path.match(prefix);

    					if (match && match[0]) {
    						path = path.substr(match[0].length) || '/';
    					} else {
    						return null;
    					}
    				}
    			}

    			// Check if the pattern matches
    			const matches = this._pattern.exec(path);

    			if (matches === null) {
    				return null;
    			}

    			// If the input was a regular expression, this._keys would be false, so return matches as is
    			if (this._keys === false) {
    				return matches;
    			}

    			const out = {};
    			let i = 0;

    			while (i < this._keys.length) {
    				// In the match parameters, URL-decode all values
    				try {
    					out[this._keys[i]] = decodeURIComponent(matches[i + 1] || '') || null;
    				} catch(e) {
    					out[this._keys[i]] = null;
    				}

    				i++;
    			}

    			return out;
    		}

    		/**
     * Dictionary with route details passed to the pre-conditions functions, as well as the `routeLoading`, `routeLoaded` and `conditionsFailed` events
     * @typedef {Object} RouteDetail
     * @property {string|RegExp} route - Route matched as defined in the route definition (could be a string or a reguar expression object)
     * @property {string} location - Location path
     * @property {string} querystring - Querystring from the hash
     * @property {object} [userData] - Custom data passed by the user
     * @property {SvelteComponent} [component] - Svelte component (only in `routeLoaded` events)
     * @property {string} [name] - Name of the Svelte component (only in `routeLoaded` events)
     */
    		/**
     * Executes all conditions (if any) to control whether the route can be shown. Conditions are executed in the order they are defined, and if a condition fails, the following ones aren't executed.
     * 
     * @param {RouteDetail} detail - Route detail
     * @returns {boolean} Returns true if all the conditions succeeded
     */
    		async checkConditions(detail) {
    			for (let i = 0; i < this.conditions.length; i++) {
    				if (!await this.conditions[i](detail)) {
    					return false;
    				}
    			}

    			return true;
    		}
    	}

    	// Set up all routes
    	const routesList = [];

    	if (routes instanceof Map) {
    		// If it's a map, iterate on it right away
    		routes.forEach((route, path) => {
    			routesList.push(new RouteItem(path, route));
    		});
    	} else {
    		// We have an object, so iterate on its own properties
    		Object.keys(routes).forEach(path => {
    			routesList.push(new RouteItem(path, routes[path]));
    		});
    	}

    	// Props for the component to render
    	let component = null;

    	let componentParams = null;
    	let props = {};

    	// Event dispatcher from Svelte
    	const dispatch = createEventDispatcher();

    	// Just like dispatch, but executes on the next iteration of the event loop
    	async function dispatchNextTick(name, detail) {
    		// Execute this code when the current call stack is complete
    		await tick();

    		dispatch(name, detail);
    	}

    	// If this is set, then that means we have popped into this var the state of our last scroll position
    	let previousScrollState = null;

    	let popStateChanged = null;

    	if (restoreScrollState) {
    		popStateChanged = event => {
    			// If this event was from our history.replaceState, event.state will contain
    			// our scroll history. Otherwise, event.state will be null (like on forward
    			// navigation)
    			if (event.state && event.state.__svelte_spa_router_scrollY) {
    				previousScrollState = event.state;
    			} else {
    				previousScrollState = null;
    			}
    		};

    		// This is removed in the destroy() invocation below
    		window.addEventListener('popstate', popStateChanged);

    		afterUpdate(() => {
    			// If this exists, then this is a back navigation: restore the scroll position
    			if (previousScrollState) {
    				window.scrollTo(previousScrollState.__svelte_spa_router_scrollX, previousScrollState.__svelte_spa_router_scrollY);
    			} else {
    				// Otherwise this is a forward navigation: scroll to top
    				window.scrollTo(0, 0);
    			}
    		});
    	}

    	// Always have the latest value of loc
    	let lastLoc = null;

    	// Current object of the component loaded
    	let componentObj = null;

    	// Handle hash change events
    	// Listen to changes in the $loc store and update the page
    	// Do not use the $: syntax because it gets triggered by too many things
    	const unsubscribeLoc = loc.subscribe(async newLoc => {
    		lastLoc = newLoc;

    		// Find a route matching the location
    		let i = 0;

    		while (i < routesList.length) {
    			const match = routesList[i].match(newLoc.location);

    			if (!match) {
    				i++;
    				continue;
    			}

    			const detail = {
    				route: routesList[i].path,
    				location: newLoc.location,
    				querystring: newLoc.querystring,
    				userData: routesList[i].userData,
    				params: match && typeof match == 'object' && Object.keys(match).length
    				? match
    				: null
    			};

    			// Check if the route can be loaded - if all conditions succeed
    			if (!await routesList[i].checkConditions(detail)) {
    				// Don't display anything
    				$$invalidate(0, component = null);

    				componentObj = null;

    				// Trigger an event to notify the user, then exit
    				dispatchNextTick('conditionsFailed', detail);

    				return;
    			}

    			// Trigger an event to alert that we're loading the route
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoading', Object.assign({}, detail));

    			// If there's a component to show while we're loading the route, display it
    			const obj = routesList[i].component;

    			// Do not replace the component if we're loading the same one as before, to avoid the route being unmounted and re-mounted
    			if (componentObj != obj) {
    				if (obj.loading) {
    					$$invalidate(0, component = obj.loading);
    					componentObj = obj;
    					$$invalidate(1, componentParams = obj.loadingParams);
    					$$invalidate(2, props = {});

    					// Trigger the routeLoaded event for the loading component
    					// Create a copy of detail so we don't modify the object for the dynamic route (and the dynamic route doesn't modify our object too)
    					dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    						component,
    						name: component.name,
    						params: componentParams
    					}));
    				} else {
    					$$invalidate(0, component = null);
    					componentObj = null;
    				}

    				// Invoke the Promise
    				const loaded = await obj();

    				// Now that we're here, after the promise resolved, check if we still want this component, as the user might have navigated to another page in the meanwhile
    				if (newLoc != lastLoc) {
    					// Don't update the component, just exit
    					return;
    				}

    				// If there is a "default" property, which is used by async routes, then pick that
    				$$invalidate(0, component = loaded && loaded.default || loaded);

    				componentObj = obj;
    			}

    			// Set componentParams only if we have a match, to avoid a warning similar to `<Component> was created with unknown prop 'params'`
    			// Of course, this assumes that developers always add a "params" prop when they are expecting parameters
    			if (match && typeof match == 'object' && Object.keys(match).length) {
    				$$invalidate(1, componentParams = match);
    			} else {
    				$$invalidate(1, componentParams = null);
    			}

    			// Set static props, if any
    			$$invalidate(2, props = routesList[i].props);

    			// Dispatch the routeLoaded event then exit
    			// We need to clone the object on every event invocation so we don't risk the object to be modified in the next tick
    			dispatchNextTick('routeLoaded', Object.assign({}, detail, {
    				component,
    				name: component.name,
    				params: componentParams
    			})).then(() => {
    				params$1.set(componentParams);
    			});

    			return;
    		}

    		// If we're still here, there was no match, so show the empty component
    		$$invalidate(0, component = null);

    		componentObj = null;
    		params$1.set(undefined);
    	});

    	onDestroy(() => {
    		unsubscribeLoc();
    		popStateChanged && window.removeEventListener('popstate', popStateChanged);
    	});

    	const writable_props = ['routes', 'prefix', 'restoreScrollState'];

    	Object_1$1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	function routeEvent_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function routeEvent_handler_1(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    	};

    	$$self.$capture_state = () => ({
    		readable,
    		writable,
    		derived,
    		tick,
    		_wrap: wrap$1,
    		wrap,
    		getLocation,
    		loc,
    		location,
    		querystring,
    		params: params$1,
    		push,
    		pop,
    		replace,
    		link,
    		updateLink,
    		linkOpts,
    		scrollstateHistoryHandler,
    		onDestroy,
    		createEventDispatcher,
    		afterUpdate,
    		parse,
    		routes,
    		prefix,
    		restoreScrollState,
    		RouteItem,
    		routesList,
    		component,
    		componentParams,
    		props,
    		dispatch,
    		dispatchNextTick,
    		previousScrollState,
    		popStateChanged,
    		lastLoc,
    		componentObj,
    		unsubscribeLoc
    	});

    	$$self.$inject_state = $$props => {
    		if ('routes' in $$props) $$invalidate(3, routes = $$props.routes);
    		if ('prefix' in $$props) $$invalidate(4, prefix = $$props.prefix);
    		if ('restoreScrollState' in $$props) $$invalidate(5, restoreScrollState = $$props.restoreScrollState);
    		if ('component' in $$props) $$invalidate(0, component = $$props.component);
    		if ('componentParams' in $$props) $$invalidate(1, componentParams = $$props.componentParams);
    		if ('props' in $$props) $$invalidate(2, props = $$props.props);
    		if ('previousScrollState' in $$props) previousScrollState = $$props.previousScrollState;
    		if ('popStateChanged' in $$props) popStateChanged = $$props.popStateChanged;
    		if ('lastLoc' in $$props) lastLoc = $$props.lastLoc;
    		if ('componentObj' in $$props) componentObj = $$props.componentObj;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*restoreScrollState*/ 32) {
    			// Update history.scrollRestoration depending on restoreScrollState
    			history.scrollRestoration = restoreScrollState ? 'manual' : 'auto';
    		}
    	};

    	return [
    		component,
    		componentParams,
    		props,
    		routes,
    		prefix,
    		restoreScrollState,
    		routeEvent_handler,
    		routeEvent_handler_1
    	];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {
    			routes: 3,
    			prefix: 4,
    			restoreScrollState: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get routes() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prefix() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prefix(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get restoreScrollState() {
    		throw new Error_1("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set restoreScrollState(value) {
    		throw new Error_1("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const auth = writable(false);
    const errorMSG = writable([]);
    const infoMSG = writable([]);
    const selectedBudget = writable([]);
    const avaliableCategories = writable([]);
    const avaliableCurrency = writable([]);
    const userDetails = writable({});

    const Period = {
        MonthKeyStoreConst: "MonthBudgetPeriod",
        YearKeyStoreConst: "YearBudgetPeriod",
        GetMonth: () => {
            let monthFromLS = +LocalStorage.Get(Period.MonthKeyStoreConst);
            if (monthFromLS == undefined || monthFromLS == null) {
                monthFromLS = new Date().getMonth() + 1;
            }
            return monthFromLS;
        },

        GetYear: () => {
            let yearFromLS = +LocalStorage.Get(Period.YearKeyStoreConst);
            if (yearFromLS == undefined || yearFromLS == null) {
                yearFromLS = new Date().getFullYear();
            }
            return yearFromLS;
        }
    };

    const LocalStorage = {
        Get: (key) => {
            const item = localStorage.getItem(key);
            if (item) {
                return item;
            } else {
                if (key == "jwt") {
                    auth.set(false);
                }
                return null;
            }
        },
        Set: (key, value) => {
            localStorage.setItem(key, value);
            if (key == "jwt") {
                auth.set(value != null);
            }
        },

    };

    var bind = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;

    // eslint-disable-next-line func-names
    var kindOf = (function(cache) {
      // eslint-disable-next-line func-names
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    })(Object.create(null));

    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray(val) {
      return Array.isArray(val);
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    var isArrayBuffer = kindOfTest('ArrayBuffer');


    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (kindOf(val) !== 'object') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    var isDate = kindOfTest('Date');

    /**
     * Determine if a value is a File
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFile = kindOfTest('File');

    /**
     * Determine if a value is a Blob
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    var isBlob = kindOfTest('Blob');

    /**
     * Determine if a value is a FileList
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFileList = kindOfTest('FileList');

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} thing The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(thing) {
      var pattern = '[object FormData]';
      return thing && (
        (typeof FormData === 'function' && thing instanceof FormData) ||
        toString.call(thing) === pattern ||
        (isFunction(thing.toString) && thing.toString() === pattern)
      );
    }

    /**
     * Determine if a value is a URLSearchParams object
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    var isURLSearchParams = kindOfTest('URLSearchParams');

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    /**
     * Inherit the prototype methods from one constructor into another
     * @param {function} constructor
     * @param {function} superConstructor
     * @param {object} [props]
     * @param {object} [descriptors]
     */

    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }

    /**
     * Resolve object with deep prototype chain to a flat object
     * @param {Object} sourceObj source object
     * @param {Object} [destObj]
     * @param {Function} [filter]
     * @returns {Object}
     */

    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};

      destObj = destObj || {};

      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

      return destObj;
    }

    /*
     * determines whether a string ends with the characters of a specified string
     * @param {String} str
     * @param {String} searchString
     * @param {Number} [position= 0]
     * @returns {boolean}
     */
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === undefined || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }


    /**
     * Returns new array from array like object
     * @param {*} [thing]
     * @returns {Array}
     */
    function toArray(thing) {
      if (!thing) return null;
      var i = thing.length;
      if (isUndefined(i)) return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }

    // eslint-disable-next-line func-names
    var isTypedArray = (function(TypedArray) {
      // eslint-disable-next-line func-names
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

    var utils = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM,
      inherits: inherits,
      toFlatObject: toFlatObject,
      kindOf: kindOf,
      kindOfTest: kindOfTest,
      endsWith: endsWith,
      toArray: toArray,
      isTypedArray: isTypedArray,
      isFileList: isFileList
    };

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager;

    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [config] The config.
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = 'AxiosError';
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }

    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });

    var prototype = AxiosError.prototype;
    var descriptors = {};

    [
      'ERR_BAD_OPTION_VALUE',
      'ERR_BAD_OPTION',
      'ECONNABORTED',
      'ETIMEDOUT',
      'ERR_NETWORK',
      'ERR_FR_TOO_MANY_REDIRECTS',
      'ERR_DEPRECATED',
      'ERR_BAD_RESPONSE',
      'ERR_BAD_REQUEST',
      'ERR_CANCELED'
    // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = {value: code};
    });

    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, 'isAxiosError', {value: true});

    // eslint-disable-next-line func-names
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);

      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });

      AxiosError.call(axiosError, error.message, code, config, request, response);

      axiosError.name = error.name;

      customProps && Object.assign(axiosError, customProps);

      return axiosError;
    };

    var AxiosError_1 = AxiosError;

    var transitional = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };

    /**
     * Convert a data object to FormData
     * @param {Object} obj
     * @param {?Object} [formData]
     * @returns {Object}
     **/

    function toFormData(obj, formData) {
      // eslint-disable-next-line no-param-reassign
      formData = formData || new FormData();

      var stack = [];

      function convertValue(value) {
        if (value === null) return '';

        if (utils.isDate(value)) {
          return value.toISOString();
        }

        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
        }

        return value;
      }

      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error('Circular reference detected in ' + parentKey);
          }

          stack.push(data);

          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value)) return;
            var fullKey = parentKey ? parentKey + '.' + key : key;
            var arr;

            if (value && !parentKey && typeof value === 'object') {
              if (utils.endsWith(key, '{}')) {
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
                // eslint-disable-next-line func-names
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }

            build(value, fullKey);
          });

          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }

      build(obj);

      return formData;
    }

    var toFormData_1 = toFormData;

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError_1(
          'Request failed with status code ' + response.status,
          [AxiosError_1.ERR_BAD_REQUEST, AxiosError_1.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };

    var cookies = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    /**
     * A `CanceledError` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function CanceledError(message) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      AxiosError_1.call(this, message == null ? 'canceled' : message, AxiosError_1.ERR_CANCELED);
      this.name = 'CanceledError';
    }

    utils.inherits(CanceledError, AxiosError_1, {
      __CANCEL__: true
    });

    var CanceledError_1 = CanceledError;

    var parseProtocol = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || '';
    };

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);

        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(new AxiosError_1('Request aborted', AxiosError_1.ECONNABORTED, config, request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(new AxiosError_1('Network Error', AxiosError_1.ERR_NETWORK, config, request, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          var transitional$1 = config.transitional || transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError_1(
            timeoutErrorMessage,
            transitional$1.clarifyTimeoutError ? AxiosError_1.ETIMEDOUT : AxiosError_1.ECONNABORTED,
            config,
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || (cancel && cancel.type) ? new CanceledError_1() : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        if (!requestData) {
          requestData = null;
        }

        var protocol = parseProtocol(fullPath);

        if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
          reject(new AxiosError_1('Unsupported protocol ' + protocol + ':', AxiosError_1.ERR_BAD_REQUEST, config));
          return;
        }


        // Send the request
        request.send(requestData);
      });
    };

    // eslint-disable-next-line strict
    var _null = null;

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults = {

      transitional: transitional,

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils.isFormData(data) ||
          utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }

        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers['Content-Type'];

        var isFileList;

        if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
          var _FormData = this.env && this.env.FormData;
          return toFormData_1(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === 'application/json') {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }

        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw AxiosError_1.from(e, AxiosError_1.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      env: {
        FormData: _null
      },

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData = function transformData(data, headers, fns) {
      var context = this || defaults_1;
      /*eslint no-param-reassign:0*/
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new CanceledError_1();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults_1.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'beforeRedirect': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var data = {
      "version": "0.27.2"
    };

    var VERSION = data.version;


    var validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError_1(
            formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
            AxiosError_1.ERR_DEPRECATED
          );
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new AxiosError_1('options must be an object', AxiosError_1.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError_1('option ' + opt + ' must be ' + result, AxiosError_1.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError_1('Unknown option ' + opt, AxiosError_1.ERR_BAD_OPTION);
        }
      }
    }

    var validator = {
      assertOptions: assertOptions,
      validators: validators$1
    };

    var validators = validator.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_1(),
        response: new InterceptorManager_1()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios.prototype.request = function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/

      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method: method,
            headers: isForm ? {
              'Content-Type': 'multipart/form-data'
            } : {},
            url: url,
            data: data
          }));
        };
      }

      Axios.prototype[method] = generateHTTPMethod();

      Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
    });

    var Axios_1 = Axios;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;

      // eslint-disable-next-line func-names
      this.promise.then(function(cancel) {
        if (!token._listeners) return;

        var i;
        var l = token._listeners.length;

        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new CanceledError_1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Subscribe to the cancel signal
     */

    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };

    /**
     * Unsubscribe from the cancel signal
     */

    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return utils.isObject(payload) && (payload.isAxiosError === true);
    };

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios_1(defaultConfig);
      var instance = bind(Axios_1.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios_1.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios$1 = createInstance(defaults_1);

    // Expose Axios class to allow class inheritance
    axios$1.Axios = Axios_1;

    // Expose Cancel & CancelToken
    axios$1.CanceledError = CanceledError_1;
    axios$1.CancelToken = CancelToken_1;
    axios$1.isCancel = isCancel;
    axios$1.VERSION = data.version;
    axios$1.toFormData = toFormData_1;

    // Expose AxiosError class
    axios$1.AxiosError = AxiosError_1;

    // alias for CanceledError for backward compatibility
    axios$1.Cancel = axios$1.CanceledError;

    // Expose all/spread
    axios$1.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$1.spread = spread;

    // Expose isAxiosError
    axios$1.isAxiosError = isAxiosError;

    var axios_1 = axios$1;

    // Allow use of default import syntax in TypeScript
    var _default = axios$1;
    axios_1.default = _default;

    var axios = axios_1;

    const api = "https://localhost:7070";

    const Request = async (path = `/`, method = `get`, data = null, params = null) => {
        try {
            const res = await axios({
                url: `${api}${path}`,
                method: method,
                data: data,
                params: params,
                headers: {
                    'Authorization': `bearer ${LocalStorage.Get(`jwt`)}`
                }
            });
            if (res.data?.succeeded === false) {
                return Promise.reject({ ...res.data, status: res.status });
            }
            return Promise.resolve({ ...res.data });
        } catch (err) {
            if (err.response.status === 401) {
                LocalStorage.Set("jwt", null);
            }
            return Promise.reject({ ...err.response.data, status: err.response.status });
        }
    };


    var Request$1 = {
        status: {
            ping: () => Request(`/status/ping/`, `get`),
            status: () => Request(`/status/`, `get`)
        },
        user: {
            me: () => Request(`/user/me/`, `get`),
            login: ({ Email, Password }) =>
                Request(`/user/login/`, `post`, { Email, Password }),
            register: ({ Email, Password, Firstname, Lastname }) =>
                Request(`/user/register/`, `post`, {
                    Email, Password, Firstname, Lastname
                }),
        },
        budget: {
            join: ({ InviteToken }) => Request(`/budget/join/${InviteToken}`, `patch`),
            getList: () => Request(`/budget/`, `get`),
            get: ({ BudgetID }) => Request(`/budget/${BudgetID}`, `get`),
            create: ({ Name, InviteToken = null, Currency }) => Request(`/budget/`, `post`, { Name, InviteToken, Currency }),
            update: ({
                BudgetID,
                Name = null,
                InviteToken = null,
                Currency = null
            }) => Request(`/budget/`, `patch`, { BudgetID, Name, InviteToken, Currency }),
            leave: ({ BudgetID }) => Request(`/budget/leave/`, `delete`, { BudgetID }),
            generateInviteToken: ({ BudgetID }) => Request(`/budget/token/`, `patch`, { BudgetID }),
            deactivateInviteToken: ({ BudgetID }) => Request(`/budget/token/`, `delete`, { BudgetID }),
            bank: {
                add: ({
                    BudgetID,
                    MerchantID,
                    MerchantPassword,
                    CardNumber,
                    BankType
                }) => Request(`/budget/${BudgetID}/bank`, `patch`, {
                    MerchantID,
                    MerchantPassword,
                    CardNumber,
                    BankType
                }),
                delete: ({
                    BudgetID,
                    BankCredentialID
                }) => Request(`/budget/${BudgetID}/bank`, `delete`, { BankCredentialID })

            }
        },
        plannedBudget: {
            getList: ({ BudgetID }) => Request(`/plannedBudget/${BudgetID}`, `get`),
            create: ({
                BudgetID,
                Title,
                PlannedAmount,
                DateStart = null,
                DateEnd = null,
                Desctiption = null,
                Currency = null,
                CategoryID = null
            }) => Request(`/plannedBudget/${BudgetID}`, `post`, {
                DateStart,
                DateEnd,
                Title,
                Desctiption,
                PlannedAmount,
                Currency,
                CategoryID
            }),
            setAmount: ({
                BudgetID,
                PlannedBudgetID,
                PlannedAmount
            }) => Request(`/plannedBudget/${BudgetID}/amount`, `patch`, { PlannedBudgetID, PlannedAmount }),
            delete: ({ BudgetID, PlannedBudgetID }) => Request(`/plannedBudget/${BudgetID}`, `delete`, { PlannedBudgetID }),
        },
        transaction: {
            getList: ({ BudgetID }) => Request(`/TransactionDescription/${BudgetID}`, `get`),
            getListPeriod: ({ BudgetID, Year, Month }) => Request(`/TransactionDescription/${BudgetID}/${Year}/${Month}`, `get`),
            create: ({
                BudgetID,
                Date = null,
                Notes = null,
                RecepitUrl = null,
                Amount,
                Currency = null,
                CategoryID
            }) => Request(`/TransactionDescription/${BudgetID}`, `post`, {
                Date,
                Notes,
                RecepitUrl,
                Amount,
                Currency,
                CategoryID
            }),
            delete: ({ BudgetID, TransactionID }) => Request(`/TransactionDescription/${BudgetID}`, `delete`, { TransactionID })
        },
        category: {
            getList: ({ BudgetID }) => Request(`/TransactionDescriptionCategory/${BudgetID}`, `get`),
            get: ({ BudgetID, CategoryID }) => Request(`/TransactionDescriptionCategory/${BudgetID}/${CategoryID}`, `get`),
            create: ({
                BudgetID,
                Name,
                Income = null,
                Color,
            }) => Request(`/TransactionDescriptionCategory/${BudgetID}`, `post`, { Name, Income, Color }),
            update: ({
                BudgetID,
                Name = null,
                Income = null,
                Color = null,
            }) => Request(`/TransactionDescriptionCategory/${BudgetID}`, `patch`, { Name, Income, Color }),
            delete: ({
                BudgetID,
                CategoryID
            }) => Request(`/TransactionDescriptionCategory/${BudgetID}`, `delete`, { CategoryID }),
        },
        exchange: {
            all: () => Request(`/OldExchanger/all/`, `get`),
            avaliableCurrency: () => Request(`/OldExchanger/available/`, `get`),
            getCurrency: ({ from, to }) => Request(`/OldExchanger/one`, `get`, null, { from, to }),
            convert: ({ from, to, amount }) => Request(`/OldExchanger/convert`, `get`, null, { from, to, amount }),
        },
        photo: {
            get: async (keyWord) => (await axios({
                url: `https://api.pexels.com/v1/search?query=${keyWord}`,
                headers: { 'Authorization': `563492ad6f91700001000001fcfc7adab515422e997cdd57f04b5853` }
            })).data.photos[Math.floor(Math.random() * 15)].src.original
        }
    };

    const ErrorWrapper = (response, clearMSG_Timeout = 2000) => {
        if (!response.succeeded) {
            if (response.data && (
                (Array.isArray(response.data) && response.data?.length > 0) || (!Array.isArray(response.data))
            )) {
                let errors = [];
                let keys = Object.keys(response.data);
                for (let i = 0; i < keys.length; i++) {
                    if (Array.isArray(response.data[keys[i]])) {
                        for (let j = 0; j < response.data[keys[i]].length; j++)
                            errors.push(response.data[keys[i]][j]);
                    } else {
                        errors.push(response.data[keys[i]]);
                    }
                }
                errorMSG.set(errors);
            } else if (response.messages?.length > 0) {
                errorMSG.set(response.messages);
            } else if (response.exception) {
                errorMSG.set([response.exception]);
            }
            setTimeout(() => errorMSG.set([]), clearMSG_Timeout);
        } else {
            return response;
        }
    };

    /* src\components\budget\ModalCreateBudget.svelte generated by Svelte v3.48.0 */
    const file$q = "src\\components\\budget\\ModalCreateBudget.svelte";

    function get_each_context$9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (47:20) {#each $avaliableCurrency as currency}
    function create_each_block$9(ctx) {
    	let option;
    	let t_value = /*currency*/ ctx[8] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*currency*/ ctx[8];
    			option.value = option.__value;
    			add_location(option, file$q, 47, 24, 1707);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$avaliableCurrency*/ 4 && t_value !== (t_value = /*currency*/ ctx[8] + "")) set_data_dev(t, t_value);

    			if (dirty & /*$avaliableCurrency*/ 4 && option_value_value !== (option_value_value = /*currency*/ ctx[8])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$9.name,
    		type: "each",
    		source: "(47:20) {#each $avaliableCurrency as currency}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let input0;
    	let t0;
    	let div5;
    	let div4;
    	let label0;
    	let t1;
    	let t2;
    	let form;
    	let div0;
    	let label1;
    	let span0;
    	let t4;
    	let input1;
    	let t5;
    	let div1;
    	let label2;
    	let span1;
    	let t7;
    	let select;
    	let t8;
    	let div2;
    	let label3;
    	let span2;
    	let t10;
    	let input2;
    	let t11;
    	let br;
    	let t12;
    	let div3;
    	let button;
    	let mounted;
    	let dispose;
    	let each_value = /*$avaliableCurrency*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t0 = space();
    			div5 = element("div");
    			div4 = element("div");
    			label0 = element("label");
    			t1 = text("✕");
    			t2 = space();
    			form = element("form");
    			div0 = element("div");
    			label1 = element("label");
    			span0 = element("span");
    			span0.textContent = "Budget name";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			div1 = element("div");
    			label2 = element("label");
    			span1 = element("span");
    			span1.textContent = "Select currency:";
    			t7 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t8 = space();
    			div2 = element("div");
    			label3 = element("label");
    			span2 = element("span");
    			span2.textContent = "Generate `invite token`";
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			br = element("br");
    			t12 = space();
    			div3 = element("div");
    			button = element("button");
    			button.textContent = "Create";
    			attr_dev(input0, "type", "checkbox");
    			attr_dev(input0, "id", /*ID*/ ctx[0]);
    			attr_dev(input0, "class", "modal-toggle");
    			add_location(input0, file$q, 28, 0, 760);
    			attr_dev(label0, "for", /*ID*/ ctx[0]);
    			attr_dev(label0, "class", "btn btn-sm btn-circle absolute right-2 top-2");
    			add_location(label0, file$q, 31, 8, 882);
    			attr_dev(span0, "class", "label-text");
    			add_location(span0, file$q, 35, 20, 1111);
    			attr_dev(label1, "class", "label");
    			add_location(label1, file$q, 34, 16, 1068);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "Budget name");
    			attr_dev(input1, "class", "input input-bordered");
    			add_location(input1, file$q, 37, 16, 1198);
    			attr_dev(div0, "class", "form-control");
    			add_location(div0, file$q, 33, 12, 1024);
    			attr_dev(span1, "class", "label-text");
    			add_location(span1, file$q, 43, 20, 1453);
    			attr_dev(label2, "class", "label");
    			add_location(label2, file$q, 42, 16, 1410);
    			attr_dev(select, "class", "select select-bordered");
    			if (/*modelToRequest*/ ctx[1].Currency === void 0) add_render_callback(() => /*select_change_handler*/ ctx[6].call(select));
    			add_location(select, file$q, 45, 16, 1545);
    			attr_dev(div1, "class", "form-control");
    			add_location(div1, file$q, 41, 12, 1366);
    			attr_dev(span2, "class", "label-text");
    			add_location(span2, file$q, 53, 20, 1926);
    			attr_dev(input2, "type", "checkbox");
    			attr_dev(input2, "class", "toggle");
    			add_location(input2, file$q, 54, 20, 2003);
    			attr_dev(label3, "class", "label cursor-pointer");
    			add_location(label3, file$q, 52, 16, 1868);
    			attr_dev(div2, "class", "form-control");
    			add_location(div2, file$q, 51, 12, 1824);
    			add_location(br, file$q, 57, 12, 2144);
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$q, 59, 16, 2207);
    			attr_dev(div3, "class", "form-control");
    			add_location(div3, file$q, 58, 12, 2163);
    			add_location(form, file$q, 32, 8, 970);
    			attr_dev(div4, "class", "modal-box relative");
    			add_location(div4, file$q, 30, 4, 840);
    			attr_dev(div5, "class", "modal");
    			add_location(div5, file$q, 29, 0, 815);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div4);
    			append_dev(div4, label0);
    			append_dev(label0, t1);
    			append_dev(div4, t2);
    			append_dev(div4, form);
    			append_dev(form, div0);
    			append_dev(div0, label1);
    			append_dev(label1, span0);
    			append_dev(div0, t4);
    			append_dev(div0, input1);
    			set_input_value(input1, /*modelToRequest*/ ctx[1].Name);
    			append_dev(form, t5);
    			append_dev(form, div1);
    			append_dev(div1, label2);
    			append_dev(label2, span1);
    			append_dev(div1, t7);
    			append_dev(div1, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*modelToRequest*/ ctx[1].Currency);
    			append_dev(form, t8);
    			append_dev(form, div2);
    			append_dev(div2, label3);
    			append_dev(label3, span2);
    			append_dev(label3, t10);
    			append_dev(label3, input2);
    			input2.checked = /*modelToRequest*/ ctx[1].InviteToken;
    			append_dev(form, t11);
    			append_dev(form, br);
    			append_dev(form, t12);
    			append_dev(form, div3);
    			append_dev(div3, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[5]),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[6]),
    					listen_dev(input2, "change", /*input2_change_handler*/ ctx[7]),
    					listen_dev(form, "submit", prevent_default(/*create*/ ctx[3]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ID*/ 1) {
    				attr_dev(input0, "id", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*ID*/ 1) {
    				attr_dev(label0, "for", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 6 && input1.value !== /*modelToRequest*/ ctx[1].Name) {
    				set_input_value(input1, /*modelToRequest*/ ctx[1].Name);
    			}

    			if (dirty & /*$avaliableCurrency*/ 4) {
    				each_value = /*$avaliableCurrency*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$9(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$9(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 6) {
    				select_option(select, /*modelToRequest*/ ctx[1].Currency);
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 6) {
    				input2.checked = /*modelToRequest*/ ctx[1].InviteToken;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div5);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let $avaliableCurrency;
    	validate_store(avaliableCurrency, 'avaliableCurrency');
    	component_subscribe($$self, avaliableCurrency, $$value => $$invalidate(2, $avaliableCurrency = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalCreateBudget', slots, []);

    	let modelToRequest = {
    		Name: "",
    		InviteToken: false,
    		Currency: "UAH"
    	};

    	const create = async () => {
    		try {
    			let res = await Request$1.budget.create(modelToRequest);
    			await SuccessAction();

    			try {
    				document.getElementById(ID).click(); //to close.
    			} catch {
    				
    			}
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	let { ID = "budget-create-modal" } = $$props;

    	let { SuccessAction = () => {
    		
    	} } = $$props;

    	const writable_props = ['ID', 'SuccessAction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalCreateBudget> was created with unknown prop '${key}'`);
    	});

    	function input1_input_handler() {
    		modelToRequest.Name = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function select_change_handler() {
    		modelToRequest.Currency = select_value(this);
    		$$invalidate(1, modelToRequest);
    	}

    	function input2_change_handler() {
    		modelToRequest.InviteToken = this.checked;
    		$$invalidate(1, modelToRequest);
    	}

    	$$self.$$set = $$props => {
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(4, SuccessAction = $$props.SuccessAction);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		avaliableCurrency,
    		ErrorWrapper,
    		modelToRequest,
    		create,
    		ID,
    		SuccessAction,
    		$avaliableCurrency
    	});

    	$$self.$inject_state = $$props => {
    		if ('modelToRequest' in $$props) $$invalidate(1, modelToRequest = $$props.modelToRequest);
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(4, SuccessAction = $$props.SuccessAction);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		ID,
    		modelToRequest,
    		$avaliableCurrency,
    		create,
    		SuccessAction,
    		input1_input_handler,
    		select_change_handler,
    		input2_change_handler
    	];
    }

    class ModalCreateBudget extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$q, create_fragment$q, safe_not_equal, { ID: 0, SuccessAction: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalCreateBudget",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get ID() {
    		throw new Error("<ModalCreateBudget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ID(value) {
    		throw new Error("<ModalCreateBudget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get SuccessAction() {
    		throw new Error("<ModalCreateBudget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set SuccessAction(value) {
    		throw new Error("<ModalCreateBudget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\budget\ModalJoinBudget.svelte generated by Svelte v3.48.0 */
    const file$p = "src\\components\\budget\\ModalJoinBudget.svelte";

    function create_fragment$p(ctx) {
    	let input0;
    	let t0;
    	let label1;
    	let div;
    	let input1;
    	let t1;
    	let br;
    	let t2;
    	let label0;
    	let t3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t0 = space();
    			label1 = element("label");
    			div = element("div");
    			input1 = element("input");
    			t1 = space();
    			br = element("br");
    			t2 = space();
    			label0 = element("label");
    			t3 = text("Join");
    			attr_dev(input0, "type", "checkbox");
    			attr_dev(input0, "id", /*ID*/ ctx[0]);
    			attr_dev(input0, "class", "modal-toggle");
    			add_location(input0, file$p, 30, 0, 793);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "invite token");
    			attr_dev(input1, "class", "input input-bordered input-lg");
    			add_location(input1, file$p, 33, 8, 958);
    			add_location(br, file$p, 35, 8, 1109);
    			attr_dev(label0, "for", /*ID*/ ctx[0]);
    			attr_dev(label0, "class", "btn btn-outline btn-secondary");
    			add_location(label0, file$p, 36, 8, 1124);
    			attr_dev(div, "class", "modal-box relative form-control");
    			add_location(div, file$p, 32, 4, 903);
    			attr_dev(label1, "for", /*ID*/ ctx[0]);
    			attr_dev(label1, "class", "modal cursor-pointer");
    			add_location(label1, file$p, 31, 0, 850);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, label1, anchor);
    			append_dev(label1, div);
    			append_dev(div, input1);
    			set_input_value(input1, /*modelToRequest*/ ctx[1].InviteToken);
    			append_dev(div, t1);
    			append_dev(div, br);
    			append_dev(div, t2);
    			append_dev(div, label0);
    			append_dev(label0, t3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[4]),
    					listen_dev(label0, "click", /*join*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ID*/ 1) {
    				attr_dev(input0, "id", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*modelToRequest*/ 2 && input1.value !== /*modelToRequest*/ ctx[1].InviteToken) {
    				set_input_value(input1, /*modelToRequest*/ ctx[1].InviteToken);
    			}

    			if (dirty & /*ID*/ 1) {
    				attr_dev(label0, "for", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*ID*/ 1) {
    				attr_dev(label1, "for", /*ID*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(label1);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalJoinBudget', slots, []);
    	let modelToRequest = { InviteToken: "" };

    	const join = async () => {
    		if (modelToRequest.InviteToken === "") {
    			$$invalidate(1, modelToRequest.InviteToken = "1", modelToRequest);
    		}

    		try {
    			await Request$1.budget.join(modelToRequest);
    			await SuccessAction();

    			try {
    				document.getElementById(ID).click(); //to close.
    			} catch {
    				
    			}
    		} catch(err) {
    			ErrorWrapper(err);
    		}

    		$$invalidate(1, modelToRequest.InviteToken = "", modelToRequest);
    	};

    	let { ID = "budget-join-modal" } = $$props;

    	let { SuccessAction = () => {
    		
    	} } = $$props;

    	const writable_props = ['ID', 'SuccessAction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalJoinBudget> was created with unknown prop '${key}'`);
    	});

    	function input1_input_handler() {
    		modelToRequest.InviteToken = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	$$self.$$set = $$props => {
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(3, SuccessAction = $$props.SuccessAction);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		modelToRequest,
    		join,
    		ID,
    		SuccessAction
    	});

    	$$self.$inject_state = $$props => {
    		if ('modelToRequest' in $$props) $$invalidate(1, modelToRequest = $$props.modelToRequest);
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(3, SuccessAction = $$props.SuccessAction);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [ID, modelToRequest, join, SuccessAction, input1_input_handler];
    }

    class ModalJoinBudget extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, { ID: 0, SuccessAction: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalJoinBudget",
    			options,
    			id: create_fragment$p.name
    		});
    	}

    	get ID() {
    		throw new Error("<ModalJoinBudget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ID(value) {
    		throw new Error("<ModalJoinBudget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get SuccessAction() {
    		throw new Error("<ModalJoinBudget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set SuccessAction(value) {
    		throw new Error("<ModalJoinBudget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\Dialog.svelte generated by Svelte v3.48.0 */

    const file$o = "src\\components\\Dialog.svelte";

    function create_fragment$o(ctx) {
    	let input;
    	let t0;
    	let div3;
    	let div2;
    	let div1;
    	let t1;
    	let br;
    	let t2;
    	let div0;
    	let button0;
    	let t3;
    	let t4;
    	let button1;
    	let t5;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			input = element("input");
    			t0 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			if (default_slot) default_slot.c();
    			t1 = space();
    			br = element("br");
    			t2 = space();
    			div0 = element("div");
    			button0 = element("button");
    			t3 = text(/*ConfirmButtonText*/ ctx[1]);
    			t4 = space();
    			button1 = element("button");
    			t5 = text(/*CancelButtonText*/ ctx[2]);
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "id", /*ModalID*/ ctx[0]);
    			attr_dev(input, "class", "modal-toggle");
    			add_location(input, file$o, 27, 0, 828);
    			add_location(br, file$o, 32, 12, 1030);
    			attr_dev(button0, "type", "button");
    			attr_dev(button0, "class", "text-white bg-red-600 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 dark:focus:ring-red-800 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center mr-2");
    			add_location(button0, file$o, 34, 16, 1093);
    			attr_dev(button1, "type", "button");
    			attr_dev(button1, "class", "text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-200 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600");
    			add_location(button1, file$o, 38, 16, 1458);
    			attr_dev(div0, "class", "modal-bottom");
    			add_location(div0, file$o, 33, 12, 1049);
    			attr_dev(div1, "class", "p-1 text-center");
    			add_location(div1, file$o, 30, 8, 966);
    			attr_dev(div2, "class", "modal-box relative max-w-xs");
    			add_location(div2, file$o, 29, 4, 915);
    			attr_dev(div3, "class", "modal");
    			add_location(div3, file$o, 28, 0, 890);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			append_dev(div1, t1);
    			append_dev(div1, br);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, button0);
    			append_dev(button0, t3);
    			append_dev(div0, t4);
    			append_dev(div0, button1);
    			append_dev(button1, t5);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*ConfirmAction*/ ctx[3], false, false, false),
    					listen_dev(button1, "click", /*CancelAction*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*ModalID*/ 1) {
    				attr_dev(input, "id", /*ModalID*/ ctx[0]);
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*ConfirmButtonText*/ 2) set_data_dev(t3, /*ConfirmButtonText*/ ctx[1]);
    			if (!current || dirty & /*CancelButtonText*/ 4) set_data_dev(t5, /*CancelButtonText*/ ctx[2]);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div3);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Dialog', slots, ['default']);

    	const ConfirmAction = async () => {
    		await ConfirmFunction(ConfirmFunctionParams);

    		try {
    			document.getElementById(ModalID).click(); //close modal
    		} catch {
    			
    		}
    	};

    	const CancelAction = async () => {
    		await CancelFunction(CancelFunctionParams);

    		try {
    			document.getElementById(ModalID).click(); //close modal
    		} catch {
    			
    		}
    	};

    	let { ModalID = "Modal" } = $$props;
    	let { ConfirmButtonText = "Yes, I'm sure" } = $$props;
    	let { CancelButtonText = "Cancel" } = $$props;
    	let { ConfirmFunctionParams = {} } = $$props;

    	let { ConfirmFunction = async ConfirmFunctionParams => {
    		
    	} } = $$props;

    	let { CancelFunctionParams = {} } = $$props;

    	let { CancelFunction = async CancelFunctionParams => {
    		
    	} } = $$props;

    	const writable_props = [
    		'ModalID',
    		'ConfirmButtonText',
    		'CancelButtonText',
    		'ConfirmFunctionParams',
    		'ConfirmFunction',
    		'CancelFunctionParams',
    		'CancelFunction'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dialog> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('ModalID' in $$props) $$invalidate(0, ModalID = $$props.ModalID);
    		if ('ConfirmButtonText' in $$props) $$invalidate(1, ConfirmButtonText = $$props.ConfirmButtonText);
    		if ('CancelButtonText' in $$props) $$invalidate(2, CancelButtonText = $$props.CancelButtonText);
    		if ('ConfirmFunctionParams' in $$props) $$invalidate(5, ConfirmFunctionParams = $$props.ConfirmFunctionParams);
    		if ('ConfirmFunction' in $$props) $$invalidate(6, ConfirmFunction = $$props.ConfirmFunction);
    		if ('CancelFunctionParams' in $$props) $$invalidate(7, CancelFunctionParams = $$props.CancelFunctionParams);
    		if ('CancelFunction' in $$props) $$invalidate(8, CancelFunction = $$props.CancelFunction);
    		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		ConfirmAction,
    		CancelAction,
    		ModalID,
    		ConfirmButtonText,
    		CancelButtonText,
    		ConfirmFunctionParams,
    		ConfirmFunction,
    		CancelFunctionParams,
    		CancelFunction
    	});

    	$$self.$inject_state = $$props => {
    		if ('ModalID' in $$props) $$invalidate(0, ModalID = $$props.ModalID);
    		if ('ConfirmButtonText' in $$props) $$invalidate(1, ConfirmButtonText = $$props.ConfirmButtonText);
    		if ('CancelButtonText' in $$props) $$invalidate(2, CancelButtonText = $$props.CancelButtonText);
    		if ('ConfirmFunctionParams' in $$props) $$invalidate(5, ConfirmFunctionParams = $$props.ConfirmFunctionParams);
    		if ('ConfirmFunction' in $$props) $$invalidate(6, ConfirmFunction = $$props.ConfirmFunction);
    		if ('CancelFunctionParams' in $$props) $$invalidate(7, CancelFunctionParams = $$props.CancelFunctionParams);
    		if ('CancelFunction' in $$props) $$invalidate(8, CancelFunction = $$props.CancelFunction);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		ModalID,
    		ConfirmButtonText,
    		CancelButtonText,
    		ConfirmAction,
    		CancelAction,
    		ConfirmFunctionParams,
    		ConfirmFunction,
    		CancelFunctionParams,
    		CancelFunction,
    		$$scope,
    		slots
    	];
    }

    class Dialog extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {
    			ModalID: 0,
    			ConfirmButtonText: 1,
    			CancelButtonText: 2,
    			ConfirmFunctionParams: 5,
    			ConfirmFunction: 6,
    			CancelFunctionParams: 7,
    			CancelFunction: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dialog",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get ModalID() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ModalID(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ConfirmButtonText() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ConfirmButtonText(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get CancelButtonText() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set CancelButtonText(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ConfirmFunctionParams() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ConfirmFunctionParams(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ConfirmFunction() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ConfirmFunction(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get CancelFunctionParams() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set CancelFunctionParams(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get CancelFunction() {
    		throw new Error("<Dialog>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set CancelFunction(value) {
    		throw new Error("<Dialog>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\budget\ModalAddBank.svelte generated by Svelte v3.48.0 */

    const { console: console_1 } = globals;
    const file$n = "src\\components\\budget\\ModalAddBank.svelte";

    // (95:30) 
    function create_if_block_1$6(ctx) {
    	let div3;
    	let dix;
    	let div0;
    	let t0;
    	let a;
    	let t2;
    	let div1;
    	let control0;
    	let span0;
    	let t4;
    	let input0;
    	let t5;
    	let div2;
    	let control1;
    	let span1;
    	let t7;
    	let input1;
    	let t8;
    	let br;
    	let t9;
    	let control2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			dix = element("dix");
    			div0 = element("div");
    			t0 = space();
    			a = element("a");
    			a.textContent = "How to get monobank token?";
    			t2 = space();
    			div1 = element("div");
    			control0 = element("control");
    			span0 = element("span");
    			span0.textContent = "Token";
    			t4 = space();
    			input0 = element("input");
    			t5 = space();
    			div2 = element("div");
    			control1 = element("control");
    			span1 = element("span");
    			span1.textContent = "Choose account";
    			t7 = space();
    			input1 = element("input");
    			t8 = space();
    			br = element("br");
    			t9 = space();
    			control2 = element("control");
    			control2.textContent = "Add monobank token";
    			attr_dev(div0, "class", "flex-1");
    			add_location(div0, file$n, 97, 16, 3313);
    			attr_dev(a, "href", "https://api.monobank.ua/index.html");
    			attr_dev(a, "class", "link link-neutral");
    			add_location(a, file$n, 98, 16, 3353);
    			attr_dev(dix, "class", "flex");
    			add_location(dix, file$n, 96, 12, 3277);
    			attr_dev(span0, "class", "label-text");
    			add_location(span0, file$n, 105, 20, 3637);
    			attr_dev(control0, "class", "label");
    			add_location(control0, file$n, 104, 16, 3592);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "id");
    			attr_dev(input0, "class", "input input-bordered");
    			add_location(input0, file$n, 107, 16, 3720);
    			attr_dev(div1, "class", "form-control");
    			add_location(div1, file$n, 103, 12, 3548);
    			attr_dev(span1, "class", "label-text");
    			add_location(span1, file$n, 116, 20, 4055);
    			attr_dev(control1, "class", "label");
    			add_location(control1, file$n, 115, 16, 4010);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "Default account");
    			attr_dev(input1, "class", "input input-bordered");
    			add_location(input1, file$n, 118, 16, 4147);
    			attr_dev(div2, "class", "form-control mt-1");
    			add_location(div2, file$n, 114, 12, 3961);
    			add_location(br, file$n, 125, 12, 4401);
    			attr_dev(control2, "class", "btn btn-outline");
    			add_location(control2, file$n, 126, 12, 4421);
    			attr_dev(div3, "class", "modal-box relative form-control");
    			add_location(div3, file$n, 95, 8, 3218);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, dix);
    			append_dev(dix, div0);
    			append_dev(dix, t0);
    			append_dev(dix, a);
    			append_dev(div3, t2);
    			append_dev(div3, div1);
    			append_dev(div1, control0);
    			append_dev(control0, span0);
    			append_dev(div1, t4);
    			append_dev(div1, input0);
    			set_input_value(input0, /*modelToRequest*/ ctx[1].MerchantID);
    			append_dev(div3, t5);
    			append_dev(div3, div2);
    			append_dev(div2, control1);
    			append_dev(control1, span1);
    			append_dev(div2, t7);
    			append_dev(div2, input1);
    			set_input_value(input1, /*modelToRequest*/ ctx[1].CardNumber);
    			append_dev(div3, t8);
    			append_dev(div3, br);
    			append_dev(div3, t9);
    			append_dev(div3, control2);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler_1*/ ctx[9]),
    					listen_dev(input1, "input", /*input1_input_handler_1*/ ctx[10]),
    					listen_dev(control2, "click", /*toAdd*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*modelToRequest*/ 2 && input0.value !== /*modelToRequest*/ ctx[1].MerchantID) {
    				set_input_value(input0, /*modelToRequest*/ ctx[1].MerchantID);
    			}

    			if (dirty & /*modelToRequest*/ 2 && input1.value !== /*modelToRequest*/ ctx[1].CardNumber) {
    				set_input_value(input1, /*modelToRequest*/ ctx[1].CardNumber);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(95:30) ",
    		ctx
    	});

    	return block;
    }

    // (48:4) {#if bankType() == 0}
    function create_if_block$8(ctx) {
    	let div4;
    	let dix;
    	let div0;
    	let t0;
    	let a;
    	let t2;
    	let div1;
    	let control0;
    	let span0;
    	let t4;
    	let input0;
    	let t5;
    	let div2;
    	let control1;
    	let span1;
    	let t7;
    	let input1;
    	let t8;
    	let div3;
    	let control2;
    	let span2;
    	let t10;
    	let input2;
    	let t11;
    	let br;
    	let t12;
    	let control3;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			dix = element("dix");
    			div0 = element("div");
    			t0 = space();
    			a = element("a");
    			a.textContent = "How to get privat24 merchant?";
    			t2 = space();
    			div1 = element("div");
    			control0 = element("control");
    			span0 = element("span");
    			span0.textContent = "Merchant ID";
    			t4 = space();
    			input0 = element("input");
    			t5 = space();
    			div2 = element("div");
    			control1 = element("control");
    			span1 = element("span");
    			span1.textContent = "Merchant password";
    			t7 = space();
    			input1 = element("input");
    			t8 = space();
    			div3 = element("div");
    			control2 = element("control");
    			span2 = element("span");
    			span2.textContent = "CardNumber";
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			br = element("br");
    			t12 = space();
    			control3 = element("control");
    			control3.textContent = "Add privat24 merchant";
    			attr_dev(div0, "class", "flex-1");
    			add_location(div0, file$n, 50, 16, 1488);
    			attr_dev(a, "href", "https://api.privatbank.ua/#p24/registration");
    			attr_dev(a, "class", "link link-neutral");
    			add_location(a, file$n, 51, 16, 1528);
    			attr_dev(dix, "class", "flex");
    			add_location(dix, file$n, 49, 12, 1452);
    			attr_dev(span0, "class", "label-text");
    			add_location(span0, file$n, 58, 20, 1824);
    			attr_dev(control0, "class", "label");
    			add_location(control0, file$n, 57, 16, 1779);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "id");
    			attr_dev(input0, "class", "input input-bordered");
    			add_location(input0, file$n, 60, 16, 1913);
    			attr_dev(div1, "class", "form-control");
    			add_location(div1, file$n, 56, 12, 1735);
    			attr_dev(span1, "class", "label-text");
    			add_location(span1, file$n, 69, 20, 2248);
    			attr_dev(control1, "class", "label");
    			add_location(control1, file$n, 68, 16, 2203);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "password");
    			attr_dev(input1, "class", "input input-bordered");
    			add_location(input1, file$n, 71, 16, 2343);
    			attr_dev(div2, "class", "form-control mt-1");
    			add_location(div2, file$n, 67, 12, 2154);
    			attr_dev(span2, "class", "label-text");
    			add_location(span2, file$n, 80, 20, 2690);
    			attr_dev(control2, "class", "label");
    			add_location(control2, file$n, 79, 16, 2645);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "placeholder", "CardNumber");
    			attr_dev(input2, "class", "input input-bordered");
    			add_location(input2, file$n, 82, 16, 2778);
    			attr_dev(div3, "class", "form-control mt-1");
    			add_location(div3, file$n, 78, 12, 2596);
    			add_location(br, file$n, 89, 12, 3027);
    			attr_dev(control3, "class", "btn btn-outline");
    			add_location(control3, file$n, 90, 12, 3047);
    			attr_dev(div4, "class", "modal-box relative form-control");
    			add_location(div4, file$n, 48, 8, 1393);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, dix);
    			append_dev(dix, div0);
    			append_dev(dix, t0);
    			append_dev(dix, a);
    			append_dev(div4, t2);
    			append_dev(div4, div1);
    			append_dev(div1, control0);
    			append_dev(control0, span0);
    			append_dev(div1, t4);
    			append_dev(div1, input0);
    			set_input_value(input0, /*modelToRequest*/ ctx[1].MerchantID);
    			append_dev(div4, t5);
    			append_dev(div4, div2);
    			append_dev(div2, control1);
    			append_dev(control1, span1);
    			append_dev(div2, t7);
    			append_dev(div2, input1);
    			set_input_value(input1, /*modelToRequest*/ ctx[1].MerchantPassword);
    			append_dev(div4, t8);
    			append_dev(div4, div3);
    			append_dev(div3, control2);
    			append_dev(control2, span2);
    			append_dev(div3, t10);
    			append_dev(div3, input2);
    			set_input_value(input2, /*modelToRequest*/ ctx[1].CardNumber);
    			append_dev(div4, t11);
    			append_dev(div4, br);
    			append_dev(div4, t12);
    			append_dev(div4, control3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[6]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[7]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[8]),
    					listen_dev(control3, "click", /*toAdd*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*modelToRequest*/ 2 && input0.value !== /*modelToRequest*/ ctx[1].MerchantID) {
    				set_input_value(input0, /*modelToRequest*/ ctx[1].MerchantID);
    			}

    			if (dirty & /*modelToRequest*/ 2 && input1.value !== /*modelToRequest*/ ctx[1].MerchantPassword) {
    				set_input_value(input1, /*modelToRequest*/ ctx[1].MerchantPassword);
    			}

    			if (dirty & /*modelToRequest*/ 2 && input2.value !== /*modelToRequest*/ ctx[1].CardNumber) {
    				set_input_value(input2, /*modelToRequest*/ ctx[1].CardNumber);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(48:4) {#if bankType() == 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$n(ctx) {
    	let input;
    	let t;
    	let label;

    	function select_block_type(ctx, dirty) {
    		if (/*bankType*/ ctx[3]() == 0) return create_if_block$8;
    		if (/*bankType*/ ctx[3]() == 1) return create_if_block_1$6;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			input = element("input");
    			t = space();
    			label = element("label");
    			if (if_block) if_block.c();
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "id", /*ID*/ ctx[0]);
    			attr_dev(input, "class", "modal-toggle");
    			add_location(input, file$n, 45, 0, 1255);
    			attr_dev(label, "for", /*ID*/ ctx[0]);
    			attr_dev(label, "class", "modal cursor-pointer");
    			add_location(label, file$n, 46, 0, 1311);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			insert_dev(target, t, anchor);
    			insert_dev(target, label, anchor);
    			if (if_block) if_block.m(label, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ID*/ 1) {
    				attr_dev(input, "id", /*ID*/ ctx[0]);
    			}

    			if (if_block) if_block.p(ctx, dirty);

    			if (dirty & /*ID*/ 1) {
    				attr_dev(label, "for", /*ID*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(label);

    			if (if_block) {
    				if_block.d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const P24Bank$2 = "p24";
    const MonoBank$2 = "mono";

    function instance$n($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalAddBank', slots, []);

    	const toAdd = async () => {
    		try {
    			$$invalidate(1, modelToRequest.BudgetID = budget.id, modelToRequest);
    			$$invalidate(1, modelToRequest.BankType = bankType(), modelToRequest);
    			console.log(modelToRequest);
    			await Request$1.budget.bank.add(modelToRequest);
    			await SuccessAction();

    			try {
    				document.getElementById(ID).click(); //to close.
    			} catch {
    				
    			}

    			$$invalidate(1, modelToRequest = initialRequestModel);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	let { budget } = $$props;
    	let { ID = "modal-add-bank-budget-" } = $$props;

    	let { SuccessAction = () => {
    		
    	} } = $$props;

    	let bankType = () => {
    		if (ID.includes(P24Bank$2)) {
    			return 0;
    		}

    		if (ID.includes(MonoBank$2)) {
    			return 1;
    		}
    	};

    	let initialRequestModel = {
    		BudgetID: "",
    		MerchantID: "",
    		MerchantPassword: "",
    		CardNumber: "",
    		BankType: bankType()
    	};

    	let modelToRequest = initialRequestModel;
    	const writable_props = ['budget', 'ID', 'SuccessAction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<ModalAddBank> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		modelToRequest.MerchantID = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input1_input_handler() {
    		modelToRequest.MerchantPassword = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input2_input_handler() {
    		modelToRequest.CardNumber = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input0_input_handler_1() {
    		modelToRequest.MerchantID = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input1_input_handler_1() {
    		modelToRequest.CardNumber = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	$$self.$$set = $$props => {
    		if ('budget' in $$props) $$invalidate(4, budget = $$props.budget);
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(5, SuccessAction = $$props.SuccessAction);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		toAdd,
    		budget,
    		ID,
    		SuccessAction,
    		P24Bank: P24Bank$2,
    		MonoBank: MonoBank$2,
    		bankType,
    		initialRequestModel,
    		modelToRequest
    	});

    	$$self.$inject_state = $$props => {
    		if ('budget' in $$props) $$invalidate(4, budget = $$props.budget);
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(5, SuccessAction = $$props.SuccessAction);
    		if ('bankType' in $$props) $$invalidate(3, bankType = $$props.bankType);
    		if ('initialRequestModel' in $$props) initialRequestModel = $$props.initialRequestModel;
    		if ('modelToRequest' in $$props) $$invalidate(1, modelToRequest = $$props.modelToRequest);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		ID,
    		modelToRequest,
    		toAdd,
    		bankType,
    		budget,
    		SuccessAction,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input0_input_handler_1,
    		input1_input_handler_1
    	];
    }

    class ModalAddBank extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { budget: 4, ID: 0, SuccessAction: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalAddBank",
    			options,
    			id: create_fragment$n.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*budget*/ ctx[4] === undefined && !('budget' in props)) {
    			console_1.warn("<ModalAddBank> was created without expected prop 'budget'");
    		}
    	}

    	get budget() {
    		throw new Error("<ModalAddBank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budget(value) {
    		throw new Error("<ModalAddBank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ID() {
    		throw new Error("<ModalAddBank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ID(value) {
    		throw new Error("<ModalAddBank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get SuccessAction() {
    		throw new Error("<ModalAddBank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set SuccessAction(value) {
    		throw new Error("<ModalAddBank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\budget\ModalRemoveBank.svelte generated by Svelte v3.48.0 */
    const file$m = "src\\components\\budget\\ModalRemoveBank.svelte";

    function get_each_context$8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (53:16) {#each GetCreds() as budgetDetail}
    function create_each_block$8(ctx) {
    	let option;
    	let t0_value = /*budgetDetail*/ ctx[8].cardNumber + "";
    	let t0;
    	let t1;
    	let t2_value = /*budgetDetail*/ ctx[8].merchantID + "";
    	let t2;
    	let t3;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t0 = text(t0_value);
    			t1 = text(" (");
    			t2 = text(t2_value);
    			t3 = text(")");
    			option.__value = /*budgetDetail*/ ctx[8].id;
    			option.value = option.__value;
    			add_location(option, file$m, 53, 20, 1776);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t0);
    			append_dev(option, t1);
    			append_dev(option, t2);
    			append_dev(option, t3);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$8.name,
    		type: "each",
    		source: "(53:16) {#each GetCreds() as budgetDetail}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$m(ctx) {
    	let input;
    	let t0;
    	let label;
    	let div1;
    	let div0;
    	let control0;
    	let span;
    	let t2;
    	let select;
    	let t3;
    	let br;
    	let t4;
    	let control1;
    	let mounted;
    	let dispose;
    	let each_value = /*GetCreds*/ ctx[3]();
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			t0 = space();
    			label = element("label");
    			div1 = element("div");
    			div0 = element("div");
    			control0 = element("control");
    			span = element("span");
    			span.textContent = "Select card to remove:";
    			t2 = space();
    			select = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t3 = space();
    			br = element("br");
    			t4 = space();
    			control1 = element("control");
    			control1.textContent = "Remove";
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "id", /*ID*/ ctx[0]);
    			attr_dev(input, "class", "modal-toggle");
    			add_location(input, file$m, 41, 0, 1235);
    			attr_dev(span, "class", "label-text");
    			add_location(span, file$m, 46, 16, 1478);
    			attr_dev(control0, "class", "label");
    			add_location(control0, file$m, 45, 12, 1437);
    			attr_dev(select, "class", "select select-bordered");
    			if (/*modelToRequest*/ ctx[1].BankCredentialID === void 0) add_render_callback(() => /*select_change_handler*/ ctx[6].call(select));
    			add_location(select, file$m, 48, 12, 1570);
    			attr_dev(div0, "class", "form-control");
    			add_location(div0, file$m, 44, 8, 1397);
    			add_location(br, file$m, 59, 8, 1992);
    			attr_dev(control1, "class", "btn btn-outline");
    			add_location(control1, file$m, 60, 8, 2008);
    			attr_dev(div1, "class", "modal-box relative form-control");
    			add_location(div1, file$m, 43, 4, 1342);
    			attr_dev(label, "for", /*ID*/ ctx[0]);
    			attr_dev(label, "class", "modal cursor-pointer");
    			add_location(label, file$m, 42, 0, 1291);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, label, anchor);
    			append_dev(label, div1);
    			append_dev(div1, div0);
    			append_dev(div0, control0);
    			append_dev(control0, span);
    			append_dev(div0, t2);
    			append_dev(div0, select);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*modelToRequest*/ ctx[1].BankCredentialID);
    			append_dev(div1, t3);
    			append_dev(div1, br);
    			append_dev(div1, t4);
    			append_dev(div1, control1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "change", /*select_change_handler*/ ctx[6]),
    					listen_dev(control1, "click", /*toDelete*/ ctx[2], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ID*/ 1) {
    				attr_dev(input, "id", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*GetCreds*/ 8) {
    				each_value = /*GetCreds*/ ctx[3]();
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$8(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$8(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*modelToRequest, GetCreds*/ 10) {
    				select_option(select, /*modelToRequest*/ ctx[1].BankCredentialID);
    			}

    			if (dirty & /*ID*/ 1) {
    				attr_dev(label, "for", /*ID*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(label);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const P24Bank$1 = "p24";
    const MonoBank$1 = "mono";

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalRemoveBank', slots, []);

    	const toDelete = async () => {
    		try {
    			$$invalidate(1, modelToRequest.BudgetID = budget.id, modelToRequest);
    			await Request$1.budget.bank.delete(modelToRequest);
    			await SuccessAction();

    			try {
    				document.getElementById(ID).click(); //to close.
    			} catch {
    				
    			}

    			$$invalidate(1, modelToRequest = initialRequestModel);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	let { budget } = $$props;
    	let { ID = "budget-remove-modal-" } = $$props;

    	let { SuccessAction = () => {
    		
    	} } = $$props;

    	let initialRequestModel = { BudgetID: "", BankCredentialID: "" };
    	let modelToRequest = initialRequestModel;

    	let GetCreds = () => {
    		var creds = [];

    		if (ID.includes(P24Bank$1)) {
    			creds = budget.bankCredentials.filter(e => e.bankType == 0);
    		} else if (ID.includes(MonoBank$1)) {
    			creds = budget.bankCredentials.filter(e => e.bankType == 1);
    		}

    		return creds;
    	};

    	const writable_props = ['budget', 'ID', 'SuccessAction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalRemoveBank> was created with unknown prop '${key}'`);
    	});

    	function select_change_handler() {
    		modelToRequest.BankCredentialID = select_value(this);
    		$$invalidate(1, modelToRequest);
    		$$invalidate(3, GetCreds);
    	}

    	$$self.$$set = $$props => {
    		if ('budget' in $$props) $$invalidate(4, budget = $$props.budget);
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(5, SuccessAction = $$props.SuccessAction);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		toDelete,
    		budget,
    		ID,
    		SuccessAction,
    		P24Bank: P24Bank$1,
    		MonoBank: MonoBank$1,
    		initialRequestModel,
    		modelToRequest,
    		GetCreds
    	});

    	$$self.$inject_state = $$props => {
    		if ('budget' in $$props) $$invalidate(4, budget = $$props.budget);
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(5, SuccessAction = $$props.SuccessAction);
    		if ('initialRequestModel' in $$props) initialRequestModel = $$props.initialRequestModel;
    		if ('modelToRequest' in $$props) $$invalidate(1, modelToRequest = $$props.modelToRequest);
    		if ('GetCreds' in $$props) $$invalidate(3, GetCreds = $$props.GetCreds);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		ID,
    		modelToRequest,
    		toDelete,
    		GetCreds,
    		budget,
    		SuccessAction,
    		select_change_handler
    	];
    }

    class ModalRemoveBank extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { budget: 4, ID: 0, SuccessAction: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalRemoveBank",
    			options,
    			id: create_fragment$m.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*budget*/ ctx[4] === undefined && !('budget' in props)) {
    			console.warn("<ModalRemoveBank> was created without expected prop 'budget'");
    		}
    	}

    	get budget() {
    		throw new Error("<ModalRemoveBank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budget(value) {
    		throw new Error("<ModalRemoveBank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ID() {
    		throw new Error("<ModalRemoveBank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ID(value) {
    		throw new Error("<ModalRemoveBank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get SuccessAction() {
    		throw new Error("<ModalRemoveBank>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set SuccessAction(value) {
    		throw new Error("<ModalRemoveBank>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\budget\ModalBankChooseAction.svelte generated by Svelte v3.48.0 */
    const file$l = "src\\components\\budget\\ModalBankChooseAction.svelte";

    // (40:0) {#if GetCreds().length > 0}
    function create_if_block_1$5(ctx) {
    	let modalremovebank;
    	let current;

    	modalremovebank = new ModalRemoveBank({
    			props: {
    				ID: /*ID*/ ctx[1] + "-remove",
    				budget: /*budget*/ ctx[0],
    				SuccessAction: /*SuccessAction*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modalremovebank.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalremovebank, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const modalremovebank_changes = {};
    			if (dirty & /*ID*/ 2) modalremovebank_changes.ID = /*ID*/ ctx[1] + "-remove";
    			if (dirty & /*budget*/ 1) modalremovebank_changes.budget = /*budget*/ ctx[0];
    			if (dirty & /*SuccessAction*/ 4) modalremovebank_changes.SuccessAction = /*SuccessAction*/ ctx[2];
    			modalremovebank.$set(modalremovebank_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalremovebank.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalremovebank.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalremovebank, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(40:0) {#if GetCreds().length > 0}",
    		ctx
    	});

    	return block;
    }

    // (59:8) {#if GetCreds().length > 0}
    function create_if_block$7(ctx) {
    	let label;
    	let span;
    	let label_for_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			label = element("label");
    			span = element("span");
    			span.textContent = "Remove";
    			add_location(span, file$l, 64, 16, 2031);
    			attr_dev(label, "class", "btn btn-outline m-1");
    			attr_dev(label, "for", label_for_value = /*ID*/ ctx[1] + "-remove");
    			add_location(label, file$l, 59, 12, 1870);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, span);

    			if (!mounted) {
    				dispose = listen_dev(label, "click", /*CloseModal*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*ID*/ 2 && label_for_value !== (label_for_value = /*ID*/ ctx[1] + "-remove")) {
    				attr_dev(label, "for", label_for_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(59:8) {#if GetCreds().length > 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let modaladdbank;
    	let t0;
    	let show_if_1 = /*GetCreds*/ ctx[5]().length > 0;
    	let t1;
    	let input;
    	let t2;
    	let label1;
    	let div1;
    	let div0;
    	let h5;
    	let t4;
    	let label0;
    	let span;
    	let label0_for_value;
    	let t6;
    	let show_if = /*GetCreds*/ ctx[5]().length > 0;
    	let current;
    	let mounted;
    	let dispose;

    	modaladdbank = new ModalAddBank({
    			props: {
    				ID: /*ID*/ ctx[1] + "-add",
    				budget: /*budget*/ ctx[0],
    				SuccessAction: /*SuccessAction*/ ctx[2]
    			},
    			$$inline: true
    		});

    	let if_block0 = show_if_1 && create_if_block_1$5(ctx);
    	let if_block1 = show_if && create_if_block$7(ctx);

    	const block = {
    		c: function create() {
    			create_component(modaladdbank.$$.fragment);
    			t0 = space();
    			if (if_block0) if_block0.c();
    			t1 = space();
    			input = element("input");
    			t2 = space();
    			label1 = element("label");
    			div1 = element("div");
    			div0 = element("div");
    			h5 = element("h5");
    			h5.textContent = `${/*GetHeaderText*/ ctx[4]()}`;
    			t4 = space();
    			label0 = element("label");
    			span = element("span");
    			span.textContent = "Add";
    			t6 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(input, "type", "checkbox");
    			attr_dev(input, "id", /*ID*/ ctx[1]);
    			attr_dev(input, "class", "modal-toggle");
    			add_location(input, file$l, 43, 0, 1282);
    			attr_dev(h5, "class", "text-xl font-bold leading-none text-gray-900");
    			add_location(h5, file$l, 47, 12, 1510);
    			attr_dev(div0, "class", "flex justify-between items-center mb-4");
    			add_location(div0, file$l, 46, 8, 1444);
    			add_location(span, file$l, 56, 12, 1785);
    			attr_dev(label0, "class", "btn btn-outline m-1");
    			attr_dev(label0, "for", label0_for_value = /*ID*/ ctx[1] + "-add");
    			add_location(label0, file$l, 51, 8, 1647);
    			attr_dev(div1, "class", "modal-box relative form-control");
    			add_location(div1, file$l, 45, 4, 1389);
    			attr_dev(label1, "for", /*ID*/ ctx[1]);
    			attr_dev(label1, "class", "modal cursor-pointer");
    			add_location(label1, file$l, 44, 0, 1338);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(modaladdbank, target, anchor);
    			insert_dev(target, t0, anchor);
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, input, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, label1, anchor);
    			append_dev(label1, div1);
    			append_dev(div1, div0);
    			append_dev(div0, h5);
    			append_dev(div1, t4);
    			append_dev(div1, label0);
    			append_dev(label0, span);
    			append_dev(div1, t6);
    			if (if_block1) if_block1.m(div1, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(label0, "click", /*CloseModal*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const modaladdbank_changes = {};
    			if (dirty & /*ID*/ 2) modaladdbank_changes.ID = /*ID*/ ctx[1] + "-add";
    			if (dirty & /*budget*/ 1) modaladdbank_changes.budget = /*budget*/ ctx[0];
    			if (dirty & /*SuccessAction*/ 4) modaladdbank_changes.SuccessAction = /*SuccessAction*/ ctx[2];
    			modaladdbank.$set(modaladdbank_changes);
    			if (show_if_1) if_block0.p(ctx, dirty);

    			if (!current || dirty & /*ID*/ 2) {
    				attr_dev(input, "id", /*ID*/ ctx[1]);
    			}

    			if (!current || dirty & /*ID*/ 2 && label0_for_value !== (label0_for_value = /*ID*/ ctx[1] + "-add")) {
    				attr_dev(label0, "for", label0_for_value);
    			}

    			if (show_if) if_block1.p(ctx, dirty);

    			if (!current || dirty & /*ID*/ 2) {
    				attr_dev(label1, "for", /*ID*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modaladdbank.$$.fragment, local);
    			transition_in(if_block0);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modaladdbank.$$.fragment, local);
    			transition_out(if_block0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modaladdbank, detaching);
    			if (detaching) detach_dev(t0);
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(label1);
    			if (if_block1) if_block1.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const P24Bank = "p24";
    const MonoBank = "mono";

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalBankChooseAction', slots, []);

    	const CloseModal = () => {
    		try {
    			document.getElementById(ID).click(); //to close.
    		} catch {
    			
    		}
    	};

    	let { budget = [] } = $$props;
    	let { ID = "budget-choose-action-bank-modal" } = $$props;

    	let { SuccessAction = () => {
    		
    	} } = $$props;

    	let GetHeaderText = () => {
    		var len = GetCreds().length;

    		if (ID.includes(P24Bank)) {
    			return `PrivatBank cards: ${len == 0 ? "empty" : +len}`;
    		}

    		if (ID.includes(MonoBank)) {
    			return `MonoBank cards: ${len == 0 ? "empty" : +len}`;
    		}
    	};

    	let GetCreds = () => {
    		var creds = [];

    		if (ID.includes(P24Bank)) {
    			creds = budget.bankCredentials.filter(e => e.bankType == 0);
    		} else if (ID.includes(MonoBank)) {
    			creds = budget.bankCredentials.filter(e => e.bankType == 1);
    		}

    		return creds;
    	};

    	const writable_props = ['budget', 'ID', 'SuccessAction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalBankChooseAction> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('budget' in $$props) $$invalidate(0, budget = $$props.budget);
    		if ('ID' in $$props) $$invalidate(1, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(2, SuccessAction = $$props.SuccessAction);
    	};

    	$$self.$capture_state = () => ({
    		ModalAddBank,
    		ModalRemoveBank,
    		CloseModal,
    		budget,
    		ID,
    		SuccessAction,
    		P24Bank,
    		MonoBank,
    		GetHeaderText,
    		GetCreds
    	});

    	$$self.$inject_state = $$props => {
    		if ('budget' in $$props) $$invalidate(0, budget = $$props.budget);
    		if ('ID' in $$props) $$invalidate(1, ID = $$props.ID);
    		if ('SuccessAction' in $$props) $$invalidate(2, SuccessAction = $$props.SuccessAction);
    		if ('GetHeaderText' in $$props) $$invalidate(4, GetHeaderText = $$props.GetHeaderText);
    		if ('GetCreds' in $$props) $$invalidate(5, GetCreds = $$props.GetCreds);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [budget, ID, SuccessAction, CloseModal, GetHeaderText, GetCreds];
    }

    class ModalBankChooseAction extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, { budget: 0, ID: 1, SuccessAction: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalBankChooseAction",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get budget() {
    		throw new Error("<ModalBankChooseAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budget(value) {
    		throw new Error("<ModalBankChooseAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ID() {
    		throw new Error("<ModalBankChooseAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ID(value) {
    		throw new Error("<ModalBankChooseAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get SuccessAction() {
    		throw new Error("<ModalBankChooseAction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set SuccessAction(value) {
    		throw new Error("<ModalBankChooseAction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\budget\BudgetList.svelte generated by Svelte v3.48.0 */
    const file$k = "src\\components\\budget\\BudgetList.svelte";

    function get_each_context$7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    // (171:0) {:else}
    function create_else_block_3(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "No budgets";
    			attr_dev(h1, "class", "text-center");
    			add_location(h1, file$k, 171, 4, 6554);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(171:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (40:4) <Dialog          ModalID="modal_leve_{budget.id}"          ConfirmFunction={ActionToLeave}          ConfirmFunctionParams={{ id: budget.id }}      >
    function create_default_slot$3(ctx) {
    	let h1;
    	let t0;
    	let br;
    	let b;
    	let t1_value = /*budget*/ ctx[8].name + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text("You really want to leave from ");
    			br = element("br");
    			b = element("b");
    			t1 = text(t1_value);
    			t2 = text(" budget?");
    			add_location(br, file$k, 45, 42, 1446);
    			add_location(b, file$k, 45, 48, 1452);
    			add_location(h1, file$k, 44, 8, 1398);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			append_dev(h1, br);
    			append_dev(h1, b);
    			append_dev(b, t1);
    			append_dev(h1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*budgets*/ 1 && t1_value !== (t1_value = /*budget*/ ctx[8].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(40:4) <Dialog          ModalID=\\\"modal_leve_{budget.id}\\\"          ConfirmFunction={ActionToLeave}          ConfirmFunctionParams={{ id: budget.id }}      >",
    		ctx
    	});

    	return block;
    }

    // (95:24) {:else}
    function create_else_block_2$1(ctx) {
    	let div;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "media/monobank_disabled.png")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$k, 100, 32, 3669);
    			attr_dev(div, "class", "tooltip tooltip-left");
    			attr_dev(div, "data-tip", "0 cards monobank");
    			add_location(div, file$k, 95, 28, 3398);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(95:24) {:else}",
    		ctx
    	});

    	return block;
    }

    // (83:24) {#if GetMonobankCreds(budget).length > 0}
    function create_if_block_2$1(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let div_data_tip_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "media/monobank.png")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$k, 92, 32, 3267);
    			attr_dev(div, "class", "tooltip tooltip-left");

    			attr_dev(div, "data-tip", div_data_tip_value = "" + (/*GetMonobankCreds*/ ctx[6](/*budget*/ ctx[8]).length + " card" + (/*GetMonobankCreds*/ ctx[6](/*budget*/ ctx[8]).length > 1
    			? 's'
    			: '') + " monobank"));

    			add_location(div, file$k, 83, 28, 2767);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*budgets*/ 1 && div_data_tip_value !== (div_data_tip_value = "" + (/*GetMonobankCreds*/ ctx[6](/*budget*/ ctx[8]).length + " card" + (/*GetMonobankCreds*/ ctx[6](/*budget*/ ctx[8]).length > 1
    			? 's'
    			: '') + " monobank"))) {
    				attr_dev(div, "data-tip", div_data_tip_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(83:24) {#if GetMonobankCreds(budget).length > 0}",
    		ctx
    	});

    	return block;
    }

    // (120:24) {:else}
    function create_else_block_1$3(ctx) {
    	let div;
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "media/p24_disabled.png")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$k, 125, 32, 4913);
    			attr_dev(div, "class", "tooltip tooltip-left");
    			attr_dev(div, "data-tip", "0 cards privatbank");
    			add_location(div, file$k, 120, 28, 4640);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$3.name,
    		type: "else",
    		source: "(120:24) {:else}",
    		ctx
    	});

    	return block;
    }

    // (109:24) {#if GetP24Creds(budget).length > 0}
    function create_if_block_1$4(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let div_data_tip_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = "media/p24.png")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$k, 117, 32, 4514);
    			attr_dev(div, "class", "tooltip tooltip-left");

    			attr_dev(div, "data-tip", div_data_tip_value = "" + (/*GetP24Creds*/ ctx[5](/*budget*/ ctx[8]).length + " card" + (/*GetP24Creds*/ ctx[5](/*budget*/ ctx[8]).length > 1
    			? 's'
    			: '') + " privatbank"));

    			add_location(div, file$k, 109, 28, 4060);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*budgets*/ 1 && div_data_tip_value !== (div_data_tip_value = "" + (/*GetP24Creds*/ ctx[5](/*budget*/ ctx[8]).length + " card" + (/*GetP24Creds*/ ctx[5](/*budget*/ ctx[8]).length > 1
    			? 's'
    			: '') + " privatbank"))) {
    				attr_dev(div, "data-tip", div_data_tip_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(109:24) {#if GetP24Creds(budget).length > 0}",
    		ctx
    	});

    	return block;
    }

    // (150:20) {:else}
    function create_else_block$5(ctx) {
    	let div;
    	let button;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			button.textContent = "Invite token";
    			attr_dev(button, "class", "btn btn-sm btn-ghost btn-outline");
    			button.disabled = true;
    			add_location(button, file$k, 151, 28, 5917);
    			add_location(div, file$k, 150, 24, 5882);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(150:20) {:else}",
    		ctx
    	});

    	return block;
    }

    // (141:20) {#if nullOrEmpty(budget.inviteToken)}
    function create_if_block$6(ctx) {
    	let div;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			button = element("button");
    			button.textContent = "Invite token";
    			attr_dev(button, "class", "btn btn-sm btn-ghost btn-outline");
    			add_location(button, file$k, 142, 28, 5518);
    			attr_dev(div, "class", "tooltip");
    			attr_dev(div, "data-tip", "Press to Copy!");
    			add_location(div, file$k, 141, 24, 5441);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*copyToClipboard*/ ctx[3](/*budget*/ ctx[8].inviteToken))) /*copyToClipboard*/ ctx[3](/*budget*/ ctx[8].inviteToken).apply(this, arguments);
    					},
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(141:20) {#if nullOrEmpty(budget.inviteToken)}",
    		ctx
    	});

    	return block;
    }

    // (39:0) {#each budgets as budget}
    function create_each_block$7(ctx) {
    	let dialog;
    	let t0;
    	let modalbankchooseaction0;
    	let t1;
    	let modalbankchooseaction1;
    	let t2;
    	let div7;
    	let div6;
    	let h2;
    	let div2;
    	let div0;
    	let b;
    	let t3_value = /*budget*/ ctx[8].name + "";
    	let t3;
    	let div0_data_tip_value;
    	let t4;
    	let div1;
    	let t5_value = /*budget*/ ctx[8].balance.currency + "";
    	let t5;
    	let t6;
    	let div3;
    	let label0;
    	let show_if_2;
    	let label0_for_value;
    	let t7;
    	let label1;
    	let show_if_1;
    	let label1_for_value;
    	let t8;
    	let br0;
    	let t9;
    	let div5;
    	let label2;
    	let t10;
    	let label2_for_value;
    	let t11;
    	let div4;
    	let show_if;
    	let t12;
    	let button;
    	let t14;
    	let br1;
    	let current;
    	let mounted;
    	let dispose;

    	dialog = new Dialog({
    			props: {
    				ModalID: "modal_leve_" + /*budget*/ ctx[8].id,
    				ConfirmFunction: /*ActionToLeave*/ ctx[1],
    				ConfirmFunctionParams: { id: /*budget*/ ctx[8].id },
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	modalbankchooseaction0 = new ModalBankChooseAction({
    			props: {
    				ID: "modal_bank_p24_" + /*budget*/ ctx[8].id,
    				SuccessAction: /*UpdateBudgets*/ ctx[2],
    				budget: /*budget*/ ctx[8]
    			},
    			$$inline: true
    		});

    	modalbankchooseaction1 = new ModalBankChooseAction({
    			props: {
    				ID: "modal_bank_mono_" + /*budget*/ ctx[8].id,
    				SuccessAction: /*UpdateBudgets*/ ctx[2],
    				budget: /*budget*/ ctx[8]
    			},
    			$$inline: true
    		});

    	function select_block_type(ctx, dirty) {
    		if (dirty & /*budgets*/ 1) show_if_2 = null;
    		if (show_if_2 == null) show_if_2 = !!(/*GetMonobankCreds*/ ctx[6](/*budget*/ ctx[8]).length > 0);
    		if (show_if_2) return create_if_block_2$1;
    		return create_else_block_2$1;
    	}

    	let current_block_type = select_block_type(ctx, -1);
    	let if_block0 = current_block_type(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (dirty & /*budgets*/ 1) show_if_1 = null;
    		if (show_if_1 == null) show_if_1 = !!(/*GetP24Creds*/ ctx[5](/*budget*/ ctx[8]).length > 0);
    		if (show_if_1) return create_if_block_1$4;
    		return create_else_block_1$3;
    	}

    	let current_block_type_1 = select_block_type_1(ctx, -1);
    	let if_block1 = current_block_type_1(ctx);

    	function select_block_type_2(ctx, dirty) {
    		if (dirty & /*budgets*/ 1) show_if = null;
    		if (show_if == null) show_if = !!/*nullOrEmpty*/ ctx[4](/*budget*/ ctx[8].inviteToken);
    		if (show_if) return create_if_block$6;
    		return create_else_block$5;
    	}

    	let current_block_type_2 = select_block_type_2(ctx, -1);
    	let if_block2 = current_block_type_2(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[7](/*budget*/ ctx[8]);
    	}

    	const block = {
    		c: function create() {
    			create_component(dialog.$$.fragment);
    			t0 = space();
    			create_component(modalbankchooseaction0.$$.fragment);
    			t1 = space();
    			create_component(modalbankchooseaction1.$$.fragment);
    			t2 = space();
    			div7 = element("div");
    			div6 = element("div");
    			h2 = element("h2");
    			div2 = element("div");
    			div0 = element("div");
    			b = element("b");
    			t3 = text(t3_value);
    			t4 = space();
    			div1 = element("div");
    			t5 = text(t5_value);
    			t6 = space();
    			div3 = element("div");
    			label0 = element("label");
    			if_block0.c();
    			t7 = space();
    			label1 = element("label");
    			if_block1.c();
    			t8 = space();
    			br0 = element("br");
    			t9 = space();
    			div5 = element("div");
    			label2 = element("label");
    			t10 = text("leave");
    			t11 = space();
    			div4 = element("div");
    			if_block2.c();
    			t12 = space();
    			button = element("button");
    			button.textContent = "Open";
    			t14 = space();
    			br1 = element("br");
    			add_location(b, file$k, 71, 24, 2264);
    			attr_dev(div0, "class", "tooltip");
    			attr_dev(div0, "data-tip", div0_data_tip_value = "" + (/*budget*/ ctx[8].users?.length + " user" + (/*budget*/ ctx[8].users?.length > 1 ? 's' : '')));
    			add_location(div0, file$k, 64, 20, 1981);
    			attr_dev(div1, "class", "badge badge-outline");
    			add_location(div1, file$k, 73, 20, 2334);
    			attr_dev(div2, "class", "flex-1");
    			add_location(div2, file$k, 63, 16, 1939);
    			attr_dev(label0, "class", "w-6 cursor-pointer");
    			attr_dev(label0, "for", label0_for_value = "modal_bank_mono_" + /*budget*/ ctx[8].id);
    			add_location(label0, file$k, 78, 20, 2530);
    			attr_dev(label1, "class", "w-6 cursor-pointer");
    			attr_dev(label1, "for", label1_for_value = "modal_bank_p24_" + /*budget*/ ctx[8].id);
    			add_location(label1, file$k, 104, 20, 3829);
    			attr_dev(div3, "class", "flex-0");
    			add_location(div3, file$k, 77, 16, 2488);
    			attr_dev(h2, "class", "card-title flex");
    			add_location(h2, file$k, 62, 12, 1893);
    			add_location(br0, file$k, 132, 12, 5105);
    			attr_dev(label2, "class", "btn btn-sm btn-error btn-outline");
    			attr_dev(label2, "for", label2_for_value = "modal_leve_" + /*budget*/ ctx[8].id);
    			add_location(label2, file$k, 135, 16, 5183);
    			add_location(div4, file$k, 139, 16, 5351);
    			attr_dev(button, "class", "btn btn-sm btn-accent btn-outline");
    			add_location(button, file$k, 160, 16, 6257);
    			attr_dev(div5, "class", "card-actions justify-end");
    			add_location(div5, file$k, 134, 12, 5127);
    			attr_dev(div6, "class", "card-body");
    			add_location(div6, file$k, 61, 8, 1856);
    			attr_dev(div7, "class", "card w-1/2 bg-base-100 shadow card-bordered");
    			add_location(div7, file$k, 60, 4, 1789);
    			add_location(br1, file$k, 169, 4, 6533);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dialog, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(modalbankchooseaction0, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(modalbankchooseaction1, target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div6);
    			append_dev(div6, h2);
    			append_dev(h2, div2);
    			append_dev(div2, div0);
    			append_dev(div0, b);
    			append_dev(b, t3);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, t5);
    			append_dev(h2, t6);
    			append_dev(h2, div3);
    			append_dev(div3, label0);
    			if_block0.m(label0, null);
    			append_dev(div3, t7);
    			append_dev(div3, label1);
    			if_block1.m(label1, null);
    			append_dev(div6, t8);
    			append_dev(div6, br0);
    			append_dev(div6, t9);
    			append_dev(div6, div5);
    			append_dev(div5, label2);
    			append_dev(label2, t10);
    			append_dev(div5, t11);
    			append_dev(div5, div4);
    			if_block2.m(div4, null);
    			append_dev(div5, t12);
    			append_dev(div5, button);
    			insert_dev(target, t14, anchor);
    			insert_dev(target, br1, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const dialog_changes = {};
    			if (dirty & /*budgets*/ 1) dialog_changes.ModalID = "modal_leve_" + /*budget*/ ctx[8].id;
    			if (dirty & /*budgets*/ 1) dialog_changes.ConfirmFunctionParams = { id: /*budget*/ ctx[8].id };

    			if (dirty & /*$$scope, budgets*/ 2049) {
    				dialog_changes.$$scope = { dirty, ctx };
    			}

    			dialog.$set(dialog_changes);
    			const modalbankchooseaction0_changes = {};
    			if (dirty & /*budgets*/ 1) modalbankchooseaction0_changes.ID = "modal_bank_p24_" + /*budget*/ ctx[8].id;
    			if (dirty & /*budgets*/ 1) modalbankchooseaction0_changes.budget = /*budget*/ ctx[8];
    			modalbankchooseaction0.$set(modalbankchooseaction0_changes);
    			const modalbankchooseaction1_changes = {};
    			if (dirty & /*budgets*/ 1) modalbankchooseaction1_changes.ID = "modal_bank_mono_" + /*budget*/ ctx[8].id;
    			if (dirty & /*budgets*/ 1) modalbankchooseaction1_changes.budget = /*budget*/ ctx[8];
    			modalbankchooseaction1.$set(modalbankchooseaction1_changes);
    			if ((!current || dirty & /*budgets*/ 1) && t3_value !== (t3_value = /*budget*/ ctx[8].name + "")) set_data_dev(t3, t3_value);

    			if (!current || dirty & /*budgets*/ 1 && div0_data_tip_value !== (div0_data_tip_value = "" + (/*budget*/ ctx[8].users?.length + " user" + (/*budget*/ ctx[8].users?.length > 1 ? 's' : '')))) {
    				attr_dev(div0, "data-tip", div0_data_tip_value);
    			}

    			if ((!current || dirty & /*budgets*/ 1) && t5_value !== (t5_value = /*budget*/ ctx[8].balance.currency + "")) set_data_dev(t5, t5_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(label0, null);
    				}
    			}

    			if (!current || dirty & /*budgets*/ 1 && label0_for_value !== (label0_for_value = "modal_bank_mono_" + /*budget*/ ctx[8].id)) {
    				attr_dev(label0, "for", label0_for_value);
    			}

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx, dirty)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(label1, null);
    				}
    			}

    			if (!current || dirty & /*budgets*/ 1 && label1_for_value !== (label1_for_value = "modal_bank_p24_" + /*budget*/ ctx[8].id)) {
    				attr_dev(label1, "for", label1_for_value);
    			}

    			if (!current || dirty & /*budgets*/ 1 && label2_for_value !== (label2_for_value = "modal_leve_" + /*budget*/ ctx[8].id)) {
    				attr_dev(label2, "for", label2_for_value);
    			}

    			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx, dirty)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_2(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div4, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dialog.$$.fragment, local);
    			transition_in(modalbankchooseaction0.$$.fragment, local);
    			transition_in(modalbankchooseaction1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dialog.$$.fragment, local);
    			transition_out(modalbankchooseaction0.$$.fragment, local);
    			transition_out(modalbankchooseaction1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dialog, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(modalbankchooseaction0, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(modalbankchooseaction1, detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div7);
    			if_block0.d();
    			if_block1.d();
    			if_block2.d();
    			if (detaching) detach_dev(t14);
    			if (detaching) detach_dev(br1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$7.name,
    		type: "each",
    		source: "(39:0) {#each budgets as budget}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*budgets*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_3(ctx);
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();

    			if (each_1_else) {
    				each_1_else.c();
    			}
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);

    			if (each_1_else) {
    				each_1_else.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*push, budgets, copyToClipboard, nullOrEmpty, GetP24Creds, GetMonobankCreds, UpdateBudgets, ActionToLeave*/ 127) {
    				each_value = /*budgets*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$7(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$7(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_3(ctx);
    					each_1_else.c();
    					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    			if (each_1_else) each_1_else.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BudgetList', slots, []);
    	let { budgets = [] } = $$props;

    	const ActionToLeave = async ({ id }) => {
    		try {
    			await Request$1.budget.leave({ BudgetID: id });
    			await UpdateBudgets();
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	const UpdateBudgets = async () => {
    		try {
    			$$invalidate(0, budgets = (await Request$1.budget.getList()).data);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	const copyToClipboard = async data => await navigator.clipboard.writeText(data);
    	const nullOrEmpty = data => data != null && data !== "" && data !== undefined;

    	let GetP24Creds = budget => {
    		return budget.bankCredentials.filter(e => e.bankType == 0);
    	};

    	let GetMonobankCreds = budget => {
    		return budget.bankCredentials.filter(e => e.bankType == 1);
    	};

    	const writable_props = ['budgets'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BudgetList> was created with unknown prop '${key}'`);
    	});

    	const click_handler = async budget => await push(`#/budget/${budget.id}`);

    	$$self.$$set = $$props => {
    		if ('budgets' in $$props) $$invalidate(0, budgets = $$props.budgets);
    	};

    	$$self.$capture_state = () => ({
    		push,
    		Dialog,
    		Request: Request$1,
    		ErrorWrapper,
    		ModalBankChooseAction,
    		budgets,
    		ActionToLeave,
    		UpdateBudgets,
    		copyToClipboard,
    		nullOrEmpty,
    		GetP24Creds,
    		GetMonobankCreds
    	});

    	$$self.$inject_state = $$props => {
    		if ('budgets' in $$props) $$invalidate(0, budgets = $$props.budgets);
    		if ('GetP24Creds' in $$props) $$invalidate(5, GetP24Creds = $$props.GetP24Creds);
    		if ('GetMonobankCreds' in $$props) $$invalidate(6, GetMonobankCreds = $$props.GetMonobankCreds);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		budgets,
    		ActionToLeave,
    		UpdateBudgets,
    		copyToClipboard,
    		nullOrEmpty,
    		GetP24Creds,
    		GetMonobankCreds,
    		click_handler
    	];
    }

    class BudgetList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { budgets: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BudgetList",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get budgets() {
    		throw new Error("<BudgetList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budgets(value) {
    		throw new Error("<BudgetList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\Budgets.svelte generated by Svelte v3.48.0 */
    const file$j = "src\\views\\Budgets.svelte";

    function create_fragment$j(ctx) {
    	let modaljoinbudget;
    	let t0;
    	let modalcreatebudget;
    	let t1;
    	let div1;
    	let div0;
    	let label0;
    	let t2;
    	let t3;
    	let label1;
    	let t4;
    	let t5;
    	let br;
    	let t6;
    	let budgetlist;
    	let current;

    	modaljoinbudget = new ModalJoinBudget({
    			props: {
    				ID: JoinBudgetModalID,
    				SuccessAction: /*UpdateBudgets*/ ctx[1]
    			},
    			$$inline: true
    		});

    	modalcreatebudget = new ModalCreateBudget({
    			props: {
    				ID: CreateBudgetModalID,
    				SuccessAction: /*UpdateBudgets*/ ctx[1]
    			},
    			$$inline: true
    		});

    	budgetlist = new BudgetList({
    			props: { budgets: /*budgets*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modaljoinbudget.$$.fragment);
    			t0 = space();
    			create_component(modalcreatebudget.$$.fragment);
    			t1 = space();
    			div1 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			t2 = text("Join Budget");
    			t3 = space();
    			label1 = element("label");
    			t4 = text("Create Budget");
    			t5 = space();
    			br = element("br");
    			t6 = space();
    			create_component(budgetlist.$$.fragment);
    			attr_dev(label0, "class", "btn btn-wide");
    			attr_dev(label0, "for", JoinBudgetModalID);
    			add_location(label0, file$j, 31, 8, 1031);
    			attr_dev(label1, "class", "btn btn-wide");
    			attr_dev(label1, "for", CreateBudgetModalID);
    			add_location(label1, file$j, 32, 8, 1112);
    			attr_dev(div0, "class", "btn-group");
    			add_location(div0, file$j, 30, 4, 998);
    			add_location(br, file$j, 34, 4, 1205);
    			attr_dev(div1, "class", "center_content");
    			add_location(div1, file$j, 29, 0, 964);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(modaljoinbudget, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(modalcreatebudget, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, label0);
    			append_dev(label0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, label1);
    			append_dev(label1, t4);
    			append_dev(div1, t5);
    			append_dev(div1, br);
    			append_dev(div1, t6);
    			mount_component(budgetlist, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const budgetlist_changes = {};
    			if (dirty & /*budgets*/ 1) budgetlist_changes.budgets = /*budgets*/ ctx[0];
    			budgetlist.$set(budgetlist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modaljoinbudget.$$.fragment, local);
    			transition_in(modalcreatebudget.$$.fragment, local);
    			transition_in(budgetlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modaljoinbudget.$$.fragment, local);
    			transition_out(modalcreatebudget.$$.fragment, local);
    			transition_out(budgetlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modaljoinbudget, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(modalcreatebudget, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div1);
    			destroy_component(budgetlist);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const JoinBudgetModalID = "budget-join-modal";
    const CreateBudgetModalID = "budget-create-modal";

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Budgets', slots, []);
    	let budgets = [];

    	onMount(async () => {
    		await UpdateBudgets();
    	});

    	const UpdateBudgets = async () => {
    		try {
    			$$invalidate(0, budgets = (await Request$1.budget.getList()).data);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Budgets> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		ModalCreateBudget,
    		ModalJoinBudget,
    		BudgetList,
    		Request: Request$1,
    		ErrorWrapper,
    		budgets,
    		UpdateBudgets,
    		JoinBudgetModalID,
    		CreateBudgetModalID
    	});

    	$$self.$inject_state = $$props => {
    		if ('budgets' in $$props) $$invalidate(0, budgets = $$props.budgets);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [budgets, UpdateBudgets];
    }

    class Budgets extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Budgets",
    			options,
    			id: create_fragment$j.name
    		});
    	}
    }

    /* src\components\auth\SignIn.svelte generated by Svelte v3.48.0 */
    const file$i = "src\\components\\auth\\SignIn.svelte";

    function create_fragment$i(ctx) {
    	let div4;
    	let div3;
    	let form;
    	let div0;
    	let control0;
    	let span0;
    	let t1;
    	let input0;
    	let t2;
    	let div1;
    	let control1;
    	let span1;
    	let t4;
    	let input1;
    	let t5;
    	let control2;
    	let a;
    	let t7;
    	let div2;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			form = element("form");
    			div0 = element("div");
    			control0 = element("control");
    			span0 = element("span");
    			span0.textContent = "Email";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			div1 = element("div");
    			control1 = element("control");
    			span1 = element("span");
    			span1.textContent = "Password";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			control2 = element("control");
    			a = element("a");
    			a.textContent = "Forgot password?";
    			t7 = space();
    			div2 = element("div");
    			button = element("button");
    			button.textContent = "Login";
    			attr_dev(span0, "class", "label-text");
    			add_location(span0, file$i, 32, 20, 1052);
    			attr_dev(control0, "class", "label");
    			add_location(control0, file$i, 31, 16, 1007);
    			attr_dev(input0, "type", "email");
    			attr_dev(input0, "placeholder", "email");
    			attr_dev(input0, "class", "input input-bordered");
    			add_location(input0, file$i, 34, 16, 1135);
    			attr_dev(div0, "class", "form-control");
    			add_location(div0, file$i, 30, 12, 963);
    			attr_dev(span1, "class", "label-text");
    			add_location(span1, file$i, 38, 20, 1352);
    			attr_dev(control1, "class", "label");
    			add_location(control1, file$i, 37, 16, 1307);
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "placeholder", "password");
    			attr_dev(input1, "class", "input input-bordered");
    			add_location(input1, file$i, 40, 16, 1438);
    			attr_dev(a, "href", "#todo");
    			attr_dev(a, "class", "label-text-alt link link-hover");
    			add_location(a, file$i, 42, 20, 1604);
    			attr_dev(control2, "class", "label");
    			add_location(control2, file$i, 41, 16, 1559);
    			attr_dev(div1, "class", "form-control");
    			add_location(div1, file$i, 36, 12, 1263);
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$i, 46, 16, 1790);
    			attr_dev(div2, "class", "form-control mt-6");
    			add_location(div2, file$i, 45, 12, 1741);
    			add_location(form, file$i, 29, 8, 910);
    			attr_dev(div3, "class", "card-body");
    			add_location(div3, file$i, 28, 4, 877);
    			attr_dev(div4, "class", "card flex-shrink-0 w-full max-w-sm shadow-2xl bg-base-100");
    			add_location(div4, file$i, 27, 0, 800);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, form);
    			append_dev(form, div0);
    			append_dev(div0, control0);
    			append_dev(control0, span0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*user*/ ctx[0].Email);
    			append_dev(form, t2);
    			append_dev(form, div1);
    			append_dev(div1, control1);
    			append_dev(control1, span1);
    			append_dev(div1, t4);
    			append_dev(div1, input1);
    			set_input_value(input1, /*user*/ ctx[0].Password);
    			append_dev(div1, t5);
    			append_dev(div1, control2);
    			append_dev(control2, a);
    			append_dev(form, t7);
    			append_dev(form, div2);
    			append_dev(div2, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[2]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[3]),
    					listen_dev(form, "submit", prevent_default(/*login*/ ctx[1]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*user*/ 1 && input0.value !== /*user*/ ctx[0].Email) {
    				set_input_value(input0, /*user*/ ctx[0].Email);
    			}

    			if (dirty & /*user*/ 1 && input1.value !== /*user*/ ctx[0].Password) {
    				set_input_value(input1, /*user*/ ctx[0].Password);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $avaliableCurrency;
    	let $userDetails;
    	validate_store(avaliableCurrency, 'avaliableCurrency');
    	component_subscribe($$self, avaliableCurrency, $$value => $$invalidate(4, $avaliableCurrency = $$value));
    	validate_store(userDetails, 'userDetails');
    	component_subscribe($$self, userDetails, $$value => $$invalidate(5, $userDetails = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SignIn', slots, []);

    	let user = {
    		Email: "",
    		Password: "",
    		Firstname: "",
    		Lastname: ""
    	};

    	async function login() {
    		try {
    			LocalStorage.Set("jwt", null);
    			const res = await Request$1.user.login(user);
    			LocalStorage.Set("jwt", res.data.token);
    			set_store_value(userDetails, $userDetails = (await Request$1.user.me()).data, $userDetails);
    			set_store_value(avaliableCurrency, $avaliableCurrency = (await Request$1.exchange.avaliableCurrency()).data.currencies, $avaliableCurrency);
    		} catch(err) {
    			//console.log(err)
    			ErrorWrapper(err);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SignIn> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		user.Email = this.value;
    		$$invalidate(0, user);
    	}

    	function input1_input_handler() {
    		user.Password = this.value;
    		$$invalidate(0, user);
    	}

    	$$self.$capture_state = () => ({
    		avaliableCurrency,
    		LS: LocalStorage,
    		userDetails,
    		Request: Request$1,
    		ErrorWrapper,
    		user,
    		login,
    		$avaliableCurrency,
    		$userDetails
    	});

    	$$self.$inject_state = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [user, login, input0_input_handler, input1_input_handler];
    }

    class SignIn extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SignIn",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    /* src\components\auth\SignUp.svelte generated by Svelte v3.48.0 */
    const file$h = "src\\components\\auth\\SignUp.svelte";

    function create_fragment$h(ctx) {
    	let div10;
    	let div9;
    	let form;
    	let div5;
    	let div4;
    	let div1;
    	let div0;
    	let control0;
    	let span0;
    	let t1;
    	let input0;
    	let t2;
    	let div3;
    	let div2;
    	let control1;
    	let span1;
    	let t4;
    	let input1;
    	let t5;
    	let div6;
    	let control2;
    	let span2;
    	let t7;
    	let input2;
    	let t8;
    	let div7;
    	let control3;
    	let span3;
    	let t10;
    	let input3;
    	let t11;
    	let div8;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div10 = element("div");
    			div9 = element("div");
    			form = element("form");
    			div5 = element("div");
    			div4 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			control0 = element("control");
    			span0 = element("span");
    			span0.textContent = "Firstname:";
    			t1 = space();
    			input0 = element("input");
    			t2 = space();
    			div3 = element("div");
    			div2 = element("div");
    			control1 = element("control");
    			span1 = element("span");
    			span1.textContent = "Lastname:";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			div6 = element("div");
    			control2 = element("control");
    			span2 = element("span");
    			span2.textContent = "Email";
    			t7 = space();
    			input2 = element("input");
    			t8 = space();
    			div7 = element("div");
    			control3 = element("control");
    			span3 = element("span");
    			span3.textContent = "Password";
    			t10 = space();
    			input3 = element("input");
    			t11 = space();
    			div8 = element("div");
    			button = element("button");
    			button.textContent = "Register";
    			attr_dev(span0, "class", "label-text");
    			add_location(span0, file$h, 32, 32, 1158);
    			attr_dev(control0, "class", "label");
    			add_location(control0, file$h, 31, 28, 1101);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "Firstname");
    			attr_dev(input0, "class", "input input-bordered input-sm w-32");
    			add_location(input0, file$h, 34, 28, 1270);
    			attr_dev(div0, "class", "");
    			add_location(div0, file$h, 30, 24, 1057);
    			attr_dev(div1, "class", "flex w-full pr-2");
    			add_location(div1, file$h, 29, 20, 1001);
    			attr_dev(span1, "class", "label-text");
    			add_location(span1, file$h, 41, 32, 1660);
    			attr_dev(control1, "class", "label");
    			add_location(control1, file$h, 40, 28, 1603);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "Lastname");
    			attr_dev(input1, "class", "input input-bordered input-sm w-32");
    			add_location(input1, file$h, 43, 28, 1771);
    			attr_dev(div2, "class", "");
    			add_location(div2, file$h, 39, 24, 1559);
    			attr_dev(div3, "class", "flex w-full pl-2");
    			add_location(div3, file$h, 38, 20, 1503);
    			attr_dev(div4, "class", "flex w-full");
    			add_location(div4, file$h, 28, 16, 954);
    			attr_dev(div5, "class", "form-control");
    			add_location(div5, file$h, 27, 12, 910);
    			attr_dev(span2, "class", "label-text");
    			add_location(span2, file$h, 52, 20, 2134);
    			attr_dev(control2, "class", "label");
    			add_location(control2, file$h, 51, 16, 2089);
    			attr_dev(input2, "type", "email");
    			attr_dev(input2, "placeholder", "email");
    			attr_dev(input2, "class", "input input-bordered");
    			add_location(input2, file$h, 54, 16, 2217);
    			attr_dev(div6, "class", "form-control mt-2");
    			add_location(div6, file$h, 50, 12, 2040);
    			attr_dev(span3, "class", "label-text");
    			add_location(span3, file$h, 58, 20, 2439);
    			attr_dev(control3, "class", "label");
    			add_location(control3, file$h, 57, 16, 2394);
    			attr_dev(input3, "type", "password");
    			attr_dev(input3, "placeholder", "password");
    			attr_dev(input3, "class", "input input-bordered");
    			add_location(input3, file$h, 60, 16, 2525);
    			attr_dev(div7, "class", "form-control mt-2");
    			add_location(div7, file$h, 56, 12, 2345);
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$h, 63, 16, 2711);
    			attr_dev(div8, "class", "form-control mt-8");
    			add_location(div8, file$h, 62, 12, 2662);
    			add_location(form, file$h, 26, 8, 854);
    			attr_dev(div9, "class", "card-body");
    			add_location(div9, file$h, 25, 4, 821);
    			attr_dev(div10, "class", "card flex-shrink-0 w-full max-w-sm shadow-2xl bg-base-100");
    			add_location(div10, file$h, 24, 0, 744);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div10, anchor);
    			append_dev(div10, div9);
    			append_dev(div9, form);
    			append_dev(form, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div1);
    			append_dev(div1, div0);
    			append_dev(div0, control0);
    			append_dev(control0, span0);
    			append_dev(div0, t1);
    			append_dev(div0, input0);
    			set_input_value(input0, /*user*/ ctx[0].Firstname);
    			append_dev(div4, t2);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, control1);
    			append_dev(control1, span1);
    			append_dev(div2, t4);
    			append_dev(div2, input1);
    			set_input_value(input1, /*user*/ ctx[0].Lastname);
    			append_dev(form, t5);
    			append_dev(form, div6);
    			append_dev(div6, control2);
    			append_dev(control2, span2);
    			append_dev(div6, t7);
    			append_dev(div6, input2);
    			set_input_value(input2, /*user*/ ctx[0].Email);
    			append_dev(form, t8);
    			append_dev(form, div7);
    			append_dev(div7, control3);
    			append_dev(control3, span3);
    			append_dev(div7, t10);
    			append_dev(div7, input3);
    			set_input_value(input3, /*user*/ ctx[0].Password);
    			append_dev(form, t11);
    			append_dev(form, div8);
    			append_dev(div8, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[2]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[3]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[4]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[5]),
    					listen_dev(form, "submit", prevent_default(/*register*/ ctx[1]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*user*/ 1 && input0.value !== /*user*/ ctx[0].Firstname) {
    				set_input_value(input0, /*user*/ ctx[0].Firstname);
    			}

    			if (dirty & /*user*/ 1 && input1.value !== /*user*/ ctx[0].Lastname) {
    				set_input_value(input1, /*user*/ ctx[0].Lastname);
    			}

    			if (dirty & /*user*/ 1 && input2.value !== /*user*/ ctx[0].Email) {
    				set_input_value(input2, /*user*/ ctx[0].Email);
    			}

    			if (dirty & /*user*/ 1 && input3.value !== /*user*/ ctx[0].Password) {
    				set_input_value(input3, /*user*/ ctx[0].Password);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div10);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let $avaliableCurrency;
    	let $userDetails;
    	validate_store(avaliableCurrency, 'avaliableCurrency');
    	component_subscribe($$self, avaliableCurrency, $$value => $$invalidate(6, $avaliableCurrency = $$value));
    	validate_store(userDetails, 'userDetails');
    	component_subscribe($$self, userDetails, $$value => $$invalidate(7, $userDetails = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SignUp', slots, []);

    	let user = {
    		Email: "",
    		Password: "",
    		Firstname: "",
    		Lastname: ""
    	};

    	async function register() {
    		try {
    			LocalStorage.Set("jwt", null);
    			LocalStorage.Set("jwt", (await Request$1.user.register(user)).data.token);
    			set_store_value(userDetails, $userDetails = (await Request$1.user.me()).data, $userDetails);
    			set_store_value(avaliableCurrency, $avaliableCurrency = (await Request$1.exchange.avaliableCurrency()).data.currencies, $avaliableCurrency);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SignUp> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		user.Firstname = this.value;
    		$$invalidate(0, user);
    	}

    	function input1_input_handler() {
    		user.Lastname = this.value;
    		$$invalidate(0, user);
    	}

    	function input2_input_handler() {
    		user.Email = this.value;
    		$$invalidate(0, user);
    	}

    	function input3_input_handler() {
    		user.Password = this.value;
    		$$invalidate(0, user);
    	}

    	$$self.$capture_state = () => ({
    		avaliableCurrency,
    		LS: LocalStorage,
    		userDetails,
    		Request: Request$1,
    		ErrorWrapper,
    		user,
    		register,
    		$avaliableCurrency,
    		$userDetails
    	});

    	$$self.$inject_state = $$props => {
    		if ('user' in $$props) $$invalidate(0, user = $$props.user);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		user,
    		register,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler
    	];
    }

    class SignUp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SignUp",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    function styleInject(css, ref) {
      if ( ref === void 0 ) ref = {};
      var insertAt = ref.insertAt;

      if (!css || typeof document === 'undefined') { return; }

      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';

      if (insertAt === 'top') {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }
    }

    var css_248z$4 = ".root.svelte-1u3jrhf.svelte-1u3jrhf{flex-grow:1;height:100vh;display:flex}.root__illustration.svelte-1u3jrhf.svelte-1u3jrhf{flex:3 1 0px;background-image:url(\"/budgetfrog.png\");background-size:contain;background-position:center;background-repeat:no-repeat;padding:50px 80px}.root__container.svelte-1u3jrhf.svelte-1u3jrhf{flex:2 1 0px;background:white;display:flex;padding:50px 80px;justify-content:center;align-items:center}.root__container.svelte-1u3jrhf div.svelte-1u3jrhf{max-width:500px}";
    styleInject(css_248z$4);

    /* src\views\Root.svelte generated by Svelte v3.48.0 */
    const file$g = "src\\views\\Root.svelte";

    // (27:0) {:else}
    function create_else_block_1$2(ctx) {
    	let budgets;
    	let current;
    	budgets = new Budgets({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(budgets.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(budgets, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(budgets.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(budgets.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(budgets, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$2.name,
    		type: "else",
    		source: "(27:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (12:0) {#if !$auth}
    function create_if_block$5(ctx) {
    	let div3;
    	let div0;
    	let t;
    	let div2;
    	let div1;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	const if_block_creators = [create_if_block_1$3, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (!/*registrationField*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div0 = element("div");
    			t = space();
    			div2 = element("div");
    			div1 = element("div");
    			if_block.c();
    			attr_dev(div0, "class", "root__illustration svelte-1u3jrhf");
    			add_location(div0, file$g, 13, 8, 387);
    			attr_dev(div1, "class", "svelte-1u3jrhf");
    			add_location(div1, file$g, 15, 12, 473);
    			attr_dev(div2, "class", "root__container svelte-1u3jrhf");
    			add_location(div2, file$g, 14, 8, 430);
    			attr_dev(div3, "class", "root svelte-1u3jrhf");
    			add_location(div3, file$g, 12, 4, 359);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div0);
    			append_dev(div3, t);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			if_blocks[current_block_type_index].m(div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(div1, null);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if_blocks[current_block_type_index].d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(12:0) {#if !$auth}",
    		ctx
    	});

    	return block;
    }

    // (20:16) {:else}
    function create_else_block$4(ctx) {
    	let signup;
    	let t0;
    	let label;
    	let current;
    	let mounted;
    	let dispose;
    	signup = new SignUp({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(signup.$$.fragment);
    			t0 = space();
    			label = element("label");
    			label.textContent = "Sign in already have account";
    			attr_dev(label, "class", "label-text text-center mt-5");
    			set_style(label, "cursor", "pointer");
    			add_location(label, file$g, 21, 20, 779);
    		},
    		m: function mount(target, anchor) {
    			mount_component(signup, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, label, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(label, "click", /*switchRegField*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(signup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(signup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(signup, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(label);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(20:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (17:16) {#if !registrationField}
    function create_if_block_1$3(ctx) {
    	let signin;
    	let t0;
    	let label;
    	let current;
    	let mounted;
    	let dispose;
    	signin = new SignIn({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(signin.$$.fragment);
    			t0 = space();
    			label = element("label");
    			label.textContent = "Sign up for a new account";
    			attr_dev(label, "class", "label-text text-center mt-5");
    			set_style(label, "cursor", "pointer");
    			add_location(label, file$g, 18, 20, 573);
    		},
    		m: function mount(target, anchor) {
    			mount_component(signin, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, label, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(label, "click", /*switchRegField*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(signin.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(signin.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(signin, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(label);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(17:16) {#if !registrationField}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$5, create_else_block_1$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*$auth*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let $auth;
    	validate_store(auth, 'auth');
    	component_subscribe($$self, auth, $$value => $$invalidate(1, $auth = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Root', slots, []);
    	let registrationField = false;
    	const switchRegField = () => $$invalidate(0, registrationField = !registrationField);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Root> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		auth,
    		Budgets,
    		SignIn,
    		SignUp,
    		registrationField,
    		switchRegField,
    		$auth
    	});

    	$$self.$inject_state = $$props => {
    		if ('registrationField' in $$props) $$invalidate(0, registrationField = $$props.registrationField);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [registrationField, $auth, switchRegField];
    }

    class Root extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Root",
    			options,
    			id: create_fragment$g.name
    		});
    	}
    }

    var css_248z$3 = "video.svelte-1difd9v{min-width:200px;width:50%;height:auto;margin-left:auto;margin-right:auto;display:block}";
    styleInject(css_248z$3);

    /* src\views\NotFound.svelte generated by Svelte v3.48.0 */

    const file$f = "src\\views\\NotFound.svelte";

    function create_fragment$f(ctx) {
    	let video;
    	let video_src_value;

    	const block = {
    		c: function create() {
    			video = element("video");
    			if (!src_url_equal(video.src, video_src_value = "404.mp4")) attr_dev(video, "src", video_src_value);
    			video.autoplay = true;
    			video.muted = true;
    			video.loop = true;
    			attr_dev(video, "class", "svelte-1difd9v");
    			add_location(video, file$f, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, video, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(video);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('NotFound', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<NotFound> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class NotFound extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "NotFound",
    			options,
    			id: create_fragment$f.name
    		});
    	}
    }

    /* src\views\Profile.svelte generated by Svelte v3.48.0 */
    const file$e = "src\\views\\Profile.svelte";

    function create_fragment$e(ctx) {
    	let div2;
    	let div1;
    	let figure;
    	let img;
    	let img_src_value;
    	let t0;
    	let div0;
    	let p0;
    	let t1_value = /*$userDetails*/ ctx[0].firstName + "";
    	let t1;
    	let t2;
    	let p1;
    	let t3_value = /*$userDetails*/ ctx[0].lastName + "";
    	let t3;
    	let t4;
    	let p2;
    	let t5_value = /*$userDetails*/ ctx[0].email + "";
    	let t5;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			figure = element("figure");
    			img = element("img");
    			t0 = space();
    			div0 = element("div");
    			p0 = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			p1 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			p2 = element("p");
    			t5 = text(t5_value);
    			if (!src_url_equal(img.src, img_src_value = "https://random.imagecdn.app/250/250")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Avatar");
    			add_location(img, file$e, 17, 16, 453);
    			add_location(figure, file$e, 17, 8, 445);
    			attr_dev(p0, "class", "card-title");
    			add_location(p0, file$e, 19, 12, 569);
    			attr_dev(p1, "class", "card-title");
    			add_location(p1, file$e, 20, 12, 633);
    			attr_dev(p2, "class", "card-title");
    			add_location(p2, file$e, 21, 12, 696);
    			attr_dev(div0, "class", "card-body");
    			add_location(div0, file$e, 18, 8, 532);
    			attr_dev(div1, "class", "card w-96 glass");
    			add_location(div1, file$e, 16, 4, 406);
    			attr_dev(div2, "class", "center_content");
    			add_location(div2, file$e, 15, 0, 372);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, figure);
    			append_dev(figure, img);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, p0);
    			append_dev(p0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, p1);
    			append_dev(p1, t3);
    			append_dev(div0, t4);
    			append_dev(div0, p2);
    			append_dev(p2, t5);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$userDetails*/ 1 && t1_value !== (t1_value = /*$userDetails*/ ctx[0].firstName + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*$userDetails*/ 1 && t3_value !== (t3_value = /*$userDetails*/ ctx[0].lastName + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$userDetails*/ 1 && t5_value !== (t5_value = /*$userDetails*/ ctx[0].email + "")) set_data_dev(t5, t5_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let $userDetails;
    	validate_store(userDetails, 'userDetails');
    	component_subscribe($$self, userDetails, $$value => $$invalidate(0, $userDetails = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Profile', slots, []);

    	onMount(async () => {
    		try {
    			let reqMe = await Request$1.user.me();
    			set_store_value(userDetails, $userDetails = reqMe.data, $userDetails);
    		} catch(err) {
    			set_store_value(userDetails, $userDetails = {}, $userDetails);
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Profile> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		userDetails,
    		Request: Request$1,
    		$userDetails
    	});

    	return [$userDetails];
    }

    class Profile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profile",
    			options,
    			id: create_fragment$e.name
    		});
    	}
    }

    const mccDataEN = [{ "mcc": "0742", "shortDescription": "Veterinary Services", "fullDescription": "Veterinary Services" }, { "mcc": "0743", "shortDescription": "Wine producers", "fullDescription": "Wine producers" }, { "mcc": "0744", "shortDescription": "Champagne producers", "fullDescription": "Champagne producers" }, { "mcc": "0763", "shortDescription": "Agricultural Co-operatives", "fullDescription": "Agricultural Co-operatives" }, { "mcc": "0780", "shortDescription": "Horticultural and landscaping", "fullDescription": "Horticultural Services, Landscaping Services" }, { "mcc": "1520", "shortDescription": "General Contractors", "fullDescription": "General Contractors - Residential and Commercial" }, { "mcc": "1711", "shortDescription": "Heating, Plumbing, A/C", "fullDescription": "Air Conditioning Contractors - Sales and Installation, Heating Contractors - Sales, Service, Installation" }, { "mcc": "1731", "shortDescription": "Electrical Contractors", "fullDescription": "Electrical Contractors" }, { "mcc": "1740", "shortDescription": "Masonry, Stonework, and Plaster", "fullDescription": "Insulation - Contractors, Masonry, Stonework Contractors, Plastering Contractors, Stonework and Masonry Contractors, Tile Settings Contractors" }, { "mcc": "1750", "shortDescription": "Carpentry Contractors", "fullDescription": "Carpentry Contractors" }, { "mcc": "1761", "shortDescription": "Roofing/Siding, Sheet Metal", "fullDescription": "Roofing - Contractors, Sheet Metal Work - Contractors, Siding - Contractors" }, { "mcc": "1771", "shortDescription": "Concrete Work Contractors", "fullDescription": "Contractors - Concrete Work" }, { "mcc": "1799", "shortDescription": "Special Trade Contractors", "fullDescription": "Contractors - Special Trade" }, { "mcc": "2741", "shortDescription": "Miscellaneous Publishing and Printing", "fullDescription": "Miscellaneous Publishing and Printing" }, { "mcc": "2744", "shortDescription": "Miscellaneous Publishing and Printing", "fullDescription": "Miscellaneous Publishing and Printing" }, { "mcc": "2791", "shortDescription": "Typesetting, Plate Making", "fullDescription": "Typesetting, Plate Making & Related Services" }, { "mcc": "2842", "shortDescription": "Specialty Cleaning", "fullDescription": "Specialty Cleaning, Polishing, and Sanitation Preparations" }, { "mcc": "3000", "shortDescription": "Airlines", "fullDescription": "United Airlines" }, { "mcc": "3001", "shortDescription": "Airlines", "fullDescription": "American Airlines" }, { "mcc": "3002", "shortDescription": "Airlines", "fullDescription": "Pan American World Airways" }, { "mcc": "3003", "shortDescription": "Airlines", "fullDescription": "Eurofly" }, { "mcc": "3004", "shortDescription": "Airlines", "fullDescription": "Dragon Airlines" }, { "mcc": "3005", "shortDescription": "Airlines", "fullDescription": "British Airways" }, { "mcc": "3006", "shortDescription": "Airlines", "fullDescription": "Japan Air Lines" }, { "mcc": "3007", "shortDescription": "Airlines", "fullDescription": "Air France" }, { "mcc": "3008", "shortDescription": "Airlines", "fullDescription": "Lufthansa" }, { "mcc": "3009", "shortDescription": "Airlines", "fullDescription": "Air Canada" }, { "mcc": "3010", "shortDescription": "Airlines", "fullDescription": "KLM (Royal Dutch Airlines)" }, { "mcc": "3011", "shortDescription": "Airlines", "fullDescription": "Aeroflot - Russian Airlines" }, { "mcc": "3012", "shortDescription": "Airlines", "fullDescription": "Qantas" }, { "mcc": "3013", "shortDescription": "Airlines", "fullDescription": "Alitalia" }, { "mcc": "3014", "shortDescription": "Airlines", "fullDescription": "Saudi Arabian Airlines" }, { "mcc": "3015", "shortDescription": "Airlines", "fullDescription": "Swiss International Air Lines" }, { "mcc": "3016", "shortDescription": "Airlines", "fullDescription": "Scandinavian Airline System" }, { "mcc": "3017", "shortDescription": "Airlines", "fullDescription": "South African Airways" }, { "mcc": "3018", "shortDescription": "Airlines", "fullDescription": "Varig (Brazil)" }, { "mcc": "3019", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3020", "shortDescription": "Airlines", "fullDescription": "Air India" }, { "mcc": "3021", "shortDescription": "Airlines", "fullDescription": "Air Algerie" }, { "mcc": "3022", "shortDescription": "Airlines", "fullDescription": "Philippine Airlines" }, { "mcc": "3023", "shortDescription": "Airlines", "fullDescription": "Mexicana de Aviación" }, { "mcc": "3024", "shortDescription": "Airlines", "fullDescription": "Pakistan International Airlines" }, { "mcc": "3025", "shortDescription": "Airlines", "fullDescription": "Air New Zealand Limited International" }, { "mcc": "3026", "shortDescription": "Airlines", "fullDescription": "Emirates Airlines" }, { "mcc": "3027", "shortDescription": "Airlines", "fullDescription": "Union de Transports Aeriens" }, { "mcc": "3028", "shortDescription": "Airlines", "fullDescription": "Air Malta" }, { "mcc": "3029", "shortDescription": "Airlines", "fullDescription": "SN Brussels Airlines" }, { "mcc": "3030", "shortDescription": "Airlines", "fullDescription": "Aerolineas Argentinas" }, { "mcc": "3031", "shortDescription": "Airlines", "fullDescription": "Olympic Airways" }, { "mcc": "3032", "shortDescription": "Airlines", "fullDescription": "El Al" }, { "mcc": "3033", "shortDescription": "Airlines", "fullDescription": "Ansett Airlines" }, { "mcc": "3034", "shortDescription": "Airlines", "fullDescription": "Etihad Airways" }, { "mcc": "3035", "shortDescription": "Airlines", "fullDescription": "Tap (Portugal)" }, { "mcc": "3036", "shortDescription": "Airlines", "fullDescription": "VASP (Brazil)" }, { "mcc": "3037", "shortDescription": "Airlines", "fullDescription": "EgyptAir" }, { "mcc": "3038", "shortDescription": "Airlines", "fullDescription": "Kuwait Airways" }, { "mcc": "3039", "shortDescription": "Airlines", "fullDescription": "Avianca" }, { "mcc": "3040", "shortDescription": "Airlines", "fullDescription": "Gulf Air (Bahrain)" }, { "mcc": "3041", "shortDescription": "Airlines", "fullDescription": "Balkan-Bulgarian Airlines" }, { "mcc": "3042", "shortDescription": "Airlines", "fullDescription": "Finnair" }, { "mcc": "3043", "shortDescription": "Airlines", "fullDescription": "Aer Lingus (Ireland)" }, { "mcc": "3044", "shortDescription": "Airlines", "fullDescription": "Air Lanka" }, { "mcc": "3045", "shortDescription": "Airlines", "fullDescription": "Nigeria Airways" }, { "mcc": "3046", "shortDescription": "Airlines", "fullDescription": "Cruzeiro do Sul (Brazil)" }, { "mcc": "3047", "shortDescription": "Airlines", "fullDescription": "Turkish Airlines" }, { "mcc": "3048", "shortDescription": "Airlines", "fullDescription": "Royal Air Maroc" }, { "mcc": "3049", "shortDescription": "Airlines", "fullDescription": "Tunis Air" }, { "mcc": "3050", "shortDescription": "Airlines", "fullDescription": "Icelandair" }, { "mcc": "3051", "shortDescription": "Airlines", "fullDescription": "Austrian Airlines" }, { "mcc": "3052", "shortDescription": "Airlines", "fullDescription": "LATAM Chile Airlines" }, { "mcc": "3053", "shortDescription": "Airlines", "fullDescription": "AVIACO (Spain)" }, { "mcc": "3054", "shortDescription": "Airlines", "fullDescription": "LADECO (Chile)" }, { "mcc": "3055", "shortDescription": "Airlines", "fullDescription": "LAB (Bolivia)" }, { "mcc": "3056", "shortDescription": "Airlines", "fullDescription": "Jet Airways (India)" }, { "mcc": "3057", "shortDescription": "Airlines", "fullDescription": "Virgin America" }, { "mcc": "3058", "shortDescription": "Airlines", "fullDescription": "Delta Air Lines" }, { "mcc": "3059", "shortDescription": "Airlines", "fullDescription": "DBA Airlines" }, { "mcc": "3060", "shortDescription": "Airlines", "fullDescription": "Northwest Airlines (USA)" }, { "mcc": "3061", "shortDescription": "Airlines", "fullDescription": "Continental Airlines" }, { "mcc": "3062", "shortDescription": "Airlines", "fullDescription": "Hapag-Lloyd Express" }, { "mcc": "3063", "shortDescription": "Airlines", "fullDescription": "U.S. Airways" }, { "mcc": "3064", "shortDescription": "Airlines", "fullDescription": "Adria Airways" }, { "mcc": "3065", "shortDescription": "Airlines", "fullDescription": "Air Inter" }, { "mcc": "3066", "shortDescription": "Airlines", "fullDescription": "Southwest Airlines (USA)" }, { "mcc": "3067", "shortDescription": "Airlines", "fullDescription": "Vanguard Airlines (USA)" }, { "mcc": "3068", "shortDescription": "Airlines", "fullDescription": "Air Astana" }, { "mcc": "3069", "shortDescription": "Airlines", "fullDescription": "Sun Country Airlines" }, { "mcc": "3070", "shortDescription": "Airlines", "fullDescription": "Pacific Southwest Airlines" }, { "mcc": "3071", "shortDescription": "Airlines", "fullDescription": "Air British Columbia (Canada)" }, { "mcc": "3072", "shortDescription": "Airlines", "fullDescription": "Cebu Pacific (Philippines)" }, { "mcc": "3073", "shortDescription": "Airlines", "fullDescription": "Air California" }, { "mcc": "3074", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3075", "shortDescription": "Airlines", "fullDescription": "Singapore Airlines" }, { "mcc": "3076", "shortDescription": "Airlines", "fullDescription": "Aeromexico" }, { "mcc": "3077", "shortDescription": "Airlines", "fullDescription": "Thai International Airlines" }, { "mcc": "3078", "shortDescription": "Airlines", "fullDescription": "China Airlines" }, { "mcc": "3079", "shortDescription": "Airlines", "fullDescription": "Jetstar Airways (Australia)" }, { "mcc": "3080", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3081", "shortDescription": "Airlines", "fullDescription": "Nordair (Canada)" }, { "mcc": "3082", "shortDescription": "Airlines", "fullDescription": "Korean Airlines" }, { "mcc": "3083", "shortDescription": "Airlines", "fullDescription": "Air Afrique" }, { "mcc": "3084", "shortDescription": "Airlines", "fullDescription": "Eva Airways (Taiwan)" }, { "mcc": "3085", "shortDescription": "Airlines", "fullDescription": "Midwest Express Airlines" }, { "mcc": "3086", "shortDescription": "Airlines", "fullDescription": "Carnival Airlines (USA)" }, { "mcc": "3087", "shortDescription": "Airlines", "fullDescription": "Metro Airlines" }, { "mcc": "3088", "shortDescription": "Airlines", "fullDescription": "Croatia Air" }, { "mcc": "3089", "shortDescription": "Airlines", "fullDescription": "Transaero (Russia)" }, { "mcc": "3090", "shortDescription": "Airlines", "fullDescription": "Uni Airways (Taiwan)" }, { "mcc": "3091", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3092", "shortDescription": "Airlines", "fullDescription": "Midway Airlines (USA)" }, { "mcc": "3093", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3094", "shortDescription": "Airlines", "fullDescription": "Zambia Airways" }, { "mcc": "3095", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3096", "shortDescription": "Airlines", "fullDescription": "Air Zimbabwe" }, { "mcc": "3097", "shortDescription": "Airlines", "fullDescription": "Spanair" }, { "mcc": "3098", "shortDescription": "Airlines", "fullDescription": "Asiana Airlines" }, { "mcc": "3099", "shortDescription": "Airlines", "fullDescription": "Cathay Pacific (Hong Kong)" }, { "mcc": "3100", "shortDescription": "Airlines", "fullDescription": "Malaysian Airline System" }, { "mcc": "3101", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3102", "shortDescription": "Airlines", "fullDescription": "Iberia (Spain)" }, { "mcc": "3103", "shortDescription": "Airlines", "fullDescription": "Garuda (Indonesia)" }, { "mcc": "3104", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3105", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3106", "shortDescription": "Airlines", "fullDescription": "Braathens S.A.F.E. (Norway)" }, { "mcc": "3107", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3108", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3109", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3110", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3111", "shortDescription": "Airlines", "fullDescription": "British Midland Airways" }, { "mcc": "3112", "shortDescription": "Airlines", "fullDescription": "Windward Island" }, { "mcc": "3113", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3114", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3115", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3116", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3117", "shortDescription": "Airlines", "fullDescription": "Venezolana International de Aviacion" }, { "mcc": "3118", "shortDescription": "Airlines", "fullDescription": "Valley International Airport" }, { "mcc": "3119", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3120", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3121", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3122", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3123", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3124", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3125", "shortDescription": "Airlines", "fullDescription": "Tan Airlines" }, { "mcc": "3126", "shortDescription": "Airlines", "fullDescription": "Talair (Papua New Guinea)" }, { "mcc": "3127", "shortDescription": "Airlines", "fullDescription": "TACA International" }, { "mcc": "3128", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3129", "shortDescription": "Airlines", "fullDescription": "Surinam Airways" }, { "mcc": "3130", "shortDescription": "Airlines", "fullDescription": "Sunworld International Airways" }, { "mcc": "3131", "shortDescription": "Airlines", "fullDescription": "VLM Airlines (Belgium)" }, { "mcc": "3132", "shortDescription": "Airlines", "fullDescription": "Frontier Airlines (USA)" }, { "mcc": "3133", "shortDescription": "Airlines", "fullDescription": "Sunbelt Airlines" }, { "mcc": "3134", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3135", "shortDescription": "Airlines", "fullDescription": "Sudan Airways" }, { "mcc": "3136", "shortDescription": "Airlines", "fullDescription": "Qatar Airways" }, { "mcc": "3137", "shortDescription": "Airlines", "fullDescription": "Singleton" }, { "mcc": "3138", "shortDescription": "Airlines", "fullDescription": "Simmons Airlines (USA)" }, { "mcc": "3139", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3140", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3141", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3142", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3143", "shortDescription": "Airlines", "fullDescription": "Scenic Airlines (USA)" }, { "mcc": "3144", "shortDescription": "Airlines", "fullDescription": "Virgin Atlantic (USA)" }, { "mcc": "3145", "shortDescription": "Airlines", "fullDescription": "San Juan Airlines" }, { "mcc": "3146", "shortDescription": "Airlines", "fullDescription": "Luxair (Luxembourg)" }, { "mcc": "3147", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3148", "shortDescription": "Airlines", "fullDescription": "Air Littoral (France)" }, { "mcc": "3149", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3150", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3151", "shortDescription": "Airlines", "fullDescription": "Air Zaire" }, { "mcc": "3152", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3153", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3154", "shortDescription": "Airlines", "fullDescription": "Princeville" }, { "mcc": "3155", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3156", "shortDescription": "Airlines", "fullDescription": "GO FLY Airline" }, { "mcc": "3157", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3158", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3159", "shortDescription": "Airlines", "fullDescription": "Provincetown-Boston Airways" }, { "mcc": "3160", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3161", "shortDescription": "Airlines", "fullDescription": "All Nippon Airways (Japan)" }, { "mcc": "3162", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3163", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3164", "shortDescription": "Airlines", "fullDescription": "Norontair (Canada)" }, { "mcc": "3165", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3166", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3167", "shortDescription": "Airlines", "fullDescription": "Aero Continente (Peru)" }, { "mcc": "3168", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3169", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3170", "shortDescription": "Airlines", "fullDescription": "Mount Cook" }, { "mcc": "3171", "shortDescription": "Airlines", "fullDescription": "Canadian Airlines" }, { "mcc": "3172", "shortDescription": "Airlines", "fullDescription": "National Airlines (USA)" }, { "mcc": "3173", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3174", "shortDescription": "Airlines", "fullDescription": "JetBlue Airways (USA)" }, { "mcc": "3175", "shortDescription": "Airlines", "fullDescription": "Middle East Air (Lebanon)" }, { "mcc": "3176", "shortDescription": "Airlines", "fullDescription": "Metroflight airlines (USA)" }, { "mcc": "3177", "shortDescription": "Airlines", "fullDescription": "AirTran Airways (USA)" }, { "mcc": "3178", "shortDescription": "Airlines", "fullDescription": "Mesa Air (USA)" }, { "mcc": "3179", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3180", "shortDescription": "Airlines", "fullDescription": "Westjet Airlines (Canada)" }, { "mcc": "3181", "shortDescription": "Airlines", "fullDescription": "Malev Hungarian Airlines" }, { "mcc": "3182", "shortDescription": "Airlines", "fullDescription": "LOT - Polish Airlines" }, { "mcc": "3183", "shortDescription": "Airlines", "fullDescription": "Oman Aviation Services" }, { "mcc": "3184", "shortDescription": "Airlines", "fullDescription": "LIAT (Antigua and Barbuda)" }, { "mcc": "3185", "shortDescription": "Airlines", "fullDescription": "LAV (Venezuela)" }, { "mcc": "3186", "shortDescription": "Airlines", "fullDescription": "LAP (Paraguay)" }, { "mcc": "3187", "shortDescription": "Airlines", "fullDescription": "Avianca Costa Rica" }, { "mcc": "3188", "shortDescription": "Airlines", "fullDescription": "Virgin Express (Belgium)" }, { "mcc": "3189", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3190", "shortDescription": "Airlines", "fullDescription": "Jugoslav Air (Serbia)" }, { "mcc": "3191", "shortDescription": "Airlines", "fullDescription": "Island Airlines (USA)" }, { "mcc": "3192", "shortDescription": "Airlines", "fullDescription": "Iran Air" }, { "mcc": "3193", "shortDescription": "Airlines", "fullDescription": "Indian Airlines" }, { "mcc": "3194", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3195", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3196", "shortDescription": "Airlines", "fullDescription": "Hawaiian Airlines" }, { "mcc": "3197", "shortDescription": "Airlines", "fullDescription": "Havasu Airlines" }, { "mcc": "3198", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3199", "shortDescription": "Airlines", "fullDescription": "Servicios Aereos Militares" }, { "mcc": "3200", "shortDescription": "Airlines", "fullDescription": "Guyana Airways" }, { "mcc": "3201", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3202", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3203", "shortDescription": "Airlines", "fullDescription": "Golden Pacific Airlines (USA)" }, { "mcc": "3204", "shortDescription": "Airlines", "fullDescription": "Freedom Airline Express (Kenya)" }, { "mcc": "3205", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3206", "shortDescription": "Airlines", "fullDescription": "China Eastern Airlines" }, { "mcc": "3207", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3208", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3209", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3210", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3211", "shortDescription": "Airlines", "fullDescription": "Norwegian Air Shuttle" }, { "mcc": "3212", "shortDescription": "Airlines", "fullDescription": "Dominicana de Aviacion" }, { "mcc": "3213", "shortDescription": "Airlines", "fullDescription": "Braathens Regional Airlines (Sweden)" }, { "mcc": "3214", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3215", "shortDescription": "Airlines", "fullDescription": "Dan-Air (United Kingdom)" }, { "mcc": "3216", "shortDescription": "Airlines", "fullDescription": "Greater Cumberland Regional Airport" }, { "mcc": "3217", "shortDescription": "Airlines", "fullDescription": "CSA Ceskoslovenske Aerolinie" }, { "mcc": "3218", "shortDescription": "Airlines", "fullDescription": "Crown Airways (USA)" }, { "mcc": "3219", "shortDescription": "Airlines", "fullDescription": "Compania Panamena de Aviacion" }, { "mcc": "3220", "shortDescription": "Airlines", "fullDescription": "Compania Faucett (Peru)" }, { "mcc": "3221", "shortDescription": "Airlines", "fullDescription": "Transportes Aeros Militares Ecuatorianos" }, { "mcc": "3222", "shortDescription": "Airlines", "fullDescription": "Command Airways (USA)" }, { "mcc": "3223", "shortDescription": "Airlines", "fullDescription": "Comair (South Africa)" }, { "mcc": "3224", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3225", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3226", "shortDescription": "Airlines", "fullDescription": "Skyways Express (Sweden)" }, { "mcc": "3227", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3228", "shortDescription": "Airlines", "fullDescription": "Cayman Airways" }, { "mcc": "3229", "shortDescription": "Airlines", "fullDescription": "Sociedad Ecuatorianas De Transportes Aereo" }, { "mcc": "3230", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3231", "shortDescription": "Airlines", "fullDescription": "Servicio Aero de Honduras" }, { "mcc": "3232", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3233", "shortDescription": "Airlines", "fullDescription": "Capitol Air" }, { "mcc": "3234", "shortDescription": "Airlines", "fullDescription": "Caribbean Airlines / West Indies Airways" }, { "mcc": "3235", "shortDescription": "Airlines", "fullDescription": "Brockway Air" }, { "mcc": "3236", "shortDescription": "Airlines", "fullDescription": "Air Arabia Airline (United Arab Emirates)" }, { "mcc": "3237", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3238", "shortDescription": "Airlines", "fullDescription": "Bemidji Airlines (USA)" }, { "mcc": "3239", "shortDescription": "Airlines", "fullDescription": "Bar Harbor Airlines (USA)" }, { "mcc": "3240", "shortDescription": "Airlines", "fullDescription": "Bahamasair (Bahamas)" }, { "mcc": "3241", "shortDescription": "Airlines", "fullDescription": "Avianca (Guatemala)" }, { "mcc": "3242", "shortDescription": "Airlines", "fullDescription": "Avensa (Venezuela)" }, { "mcc": "3243", "shortDescription": "Airlines", "fullDescription": "Austrian Airlines" }, { "mcc": "3244", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3245", "shortDescription": "Airlines", "fullDescription": "EasyJet (United Kingdom)" }, { "mcc": "3246", "shortDescription": "Airlines", "fullDescription": "Ryanair" }, { "mcc": "3247", "shortDescription": "Airlines", "fullDescription": "Gol Airlines (Brazil)" }, { "mcc": "3248", "shortDescription": "Airlines", "fullDescription": "Tam Airlines (Brazil)" }, { "mcc": "3249", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3250", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3251", "shortDescription": "Airlines", "fullDescription": "Aloha Airlines (USA)" }, { "mcc": "3252", "shortDescription": "Airlines", "fullDescription": "ALM Antilean Airlines" }, { "mcc": "3253", "shortDescription": "Airlines", "fullDescription": "America West Airlines" }, { "mcc": "3254", "shortDescription": "Airlines", "fullDescription": "Trump Airline" }, { "mcc": "3255", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3256", "shortDescription": "Airlines", "fullDescription": "Alaska Airlines" }, { "mcc": "3257", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3258", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3259", "shortDescription": "Airlines", "fullDescription": "American Trans Air" }, { "mcc": "3260", "shortDescription": "Airlines", "fullDescription": "Spirit Airlines (USA)" }, { "mcc": "3261", "shortDescription": "Airlines", "fullDescription": "Air China" }, { "mcc": "3262", "shortDescription": "Airlines", "fullDescription": "Reno Air, Inc. / American Airlines" }, { "mcc": "3263", "shortDescription": "Airlines", "fullDescription": "Aserca Airlines / Aero Servicio Carabobo (Venezuela)" }, { "mcc": "3264", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3265", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3266", "shortDescription": "Airlines", "fullDescription": "Air Seychelles" }, { "mcc": "3267", "shortDescription": "Airlines", "fullDescription": "Air Panama International" }, { "mcc": "3268", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3269", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3270", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3271", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3272", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3273", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3274", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3275", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3276", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3277", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3278", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3279", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3280", "shortDescription": "Airlines", "fullDescription": "Air Jamaica" }, { "mcc": "3281", "shortDescription": "Airlines", "fullDescription": "Air Djibouti" }, { "mcc": "3282", "shortDescription": "Airlines", "fullDescription": "Air Djibouti" }, { "mcc": "3283", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3284", "shortDescription": "Airlines", "fullDescription": "Aero Virgin Islands" }, { "mcc": "3285", "shortDescription": "Airlines", "fullDescription": "Aero Peru" }, { "mcc": "3286", "shortDescription": "Airlines", "fullDescription": "Aero Nicaraguenses" }, { "mcc": "3287", "shortDescription": "Airlines", "fullDescription": "Aero Coach Aviation" }, { "mcc": "3288", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3289", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3290", "shortDescription": "Airlines", "fullDescription": "Airlines" }, { "mcc": "3291", "shortDescription": "Airlines", "fullDescription": "Ariana Afghan Airlines" }, { "mcc": "3292", "shortDescription": "Airlines", "fullDescription": "Cyprus Airways" }, { "mcc": "3293", "shortDescription": "Airlines", "fullDescription": "Ecuatoriana de Aviación" }, { "mcc": "3294", "shortDescription": "Airlines", "fullDescription": "Ethiopian Airlines" }, { "mcc": "3295", "shortDescription": "Airlines", "fullDescription": "Kenya Airways" }, { "mcc": "3296", "shortDescription": "Airlines", "fullDescription": "Air Berlin" }, { "mcc": "3297", "shortDescription": "Airlines", "fullDescription": "TAROM / Romanian Air Transport" }, { "mcc": "3298", "shortDescription": "Airlines", "fullDescription": "Air Mauritius" }, { "mcc": "3299", "shortDescription": "Airlines", "fullDescription": "Wideroes Flyveselskap (Norway)" }, { "mcc": "3300", "shortDescription": "Airlines", "fullDescription": "Azul Airlines (Brazil)" }, { "mcc": "3301", "shortDescription": "Airlines", "fullDescription": "Wizz Air (Hungary)" }, { "mcc": "3302", "shortDescription": "Airlines", "fullDescription": "Flybe Air (United Kingdom)" }, { "mcc": "3351", "shortDescription": "Car rent", "fullDescription": "Affiliated Auto Rental" }, { "mcc": "3352", "shortDescription": "Car rent", "fullDescription": "American Intl Rent-a-car" }, { "mcc": "3353", "shortDescription": "Car rent", "fullDescription": "Brooks Rent-a-car" }, { "mcc": "3354", "shortDescription": "Car rent", "fullDescription": "Action Auto Rental" }, { "mcc": "3355", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3356", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3357", "shortDescription": "Car rent", "fullDescription": "Hertz Rent-a-car" }, { "mcc": "3358", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3359", "shortDescription": "Car rent", "fullDescription": "Payless Car Rental" }, { "mcc": "3360", "shortDescription": "Car rent", "fullDescription": "Snappy Car Rental" }, { "mcc": "3361", "shortDescription": "Car rent", "fullDescription": "Airways Rent-a-car" }, { "mcc": "3362", "shortDescription": "Car rent", "fullDescription": "Altra Auto Rental" }, { "mcc": "3363", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3364", "shortDescription": "Car rent", "fullDescription": "Agency Rent-a-car" }, { "mcc": "3365", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3366", "shortDescription": "Car rent", "fullDescription": "Budget Rent a Car" }, { "mcc": "3367", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3368", "shortDescription": "Car rent", "fullDescription": "Holiday Rent-a-wreck" }, { "mcc": "3369", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3370", "shortDescription": "Car rent", "fullDescription": "Rent-a-wreck" }, { "mcc": "3371", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3372", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3373", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3374", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3375", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3376", "shortDescription": "Car rent", "fullDescription": "Ajax Rent-a-car" }, { "mcc": "3377", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3378", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3379", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3380", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3381", "shortDescription": "Car rent", "fullDescription": "Europ Car" }, { "mcc": "3382", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3383", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3384", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3385", "shortDescription": "Car rent", "fullDescription": "Tropical Rent-a-car" }, { "mcc": "3386", "shortDescription": "Car rent", "fullDescription": "Showcase Rental Cars" }, { "mcc": "3387", "shortDescription": "Car rent", "fullDescription": "Alamo Rent-a-car" }, { "mcc": "3388", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3389", "shortDescription": "Car rent", "fullDescription": "Avis Rent-a-car" }, { "mcc": "3390", "shortDescription": "Car rent", "fullDescription": "Dollar Rent-a-car" }, { "mcc": "3391", "shortDescription": "Car rent", "fullDescription": "Europe By Car" }, { "mcc": "3392", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3393", "shortDescription": "Car rent", "fullDescription": "National Car Rental" }, { "mcc": "3394", "shortDescription": "Car rent", "fullDescription": "Kemwell Group Rent-a-car" }, { "mcc": "3395", "shortDescription": "Car rent", "fullDescription": "Thrifty Rent-a-car" }, { "mcc": "3396", "shortDescription": "Car rent", "fullDescription": "Tilden Tent-a-car" }, { "mcc": "3397", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3398", "shortDescription": "Car rent", "fullDescription": "Econo-car Rent-a-car" }, { "mcc": "3399", "shortDescription": "Car rent", "fullDescription": "Amerex Rent-a-Car" }, { "mcc": "3400", "shortDescription": "Car rent", "fullDescription": "Auto Host Cost Car Rentals" }, { "mcc": "3401", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3402", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3403", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3404", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3405", "shortDescription": "Car rent", "fullDescription": "Enterprise Rent-a-car" }, { "mcc": "3406", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3407", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3408", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3409", "shortDescription": "Car rent", "fullDescription": "General Rent-a-car" }, { "mcc": "3410", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3411", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3412", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3413", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3414", "shortDescription": "Car rent", "fullDescription": "Godfrey Natl Rent-a-car" }, { "mcc": "3415", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3416", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3417", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3418", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3419", "shortDescription": "Car rent", "fullDescription": "Alpha Rent-a-car" }, { "mcc": "3420", "shortDescription": "Car rent", "fullDescription": "Ansa Intl Rent-a-car" }, { "mcc": "3421", "shortDescription": "Car rent", "fullDescription": "Allstae Rent-a-car" }, { "mcc": "3422", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3423", "shortDescription": "Car rent", "fullDescription": "Avcar Rent-a-car" }, { "mcc": "3424", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3425", "shortDescription": "Car rent", "fullDescription": "Automate Rent-a-car" }, { "mcc": "3426", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3427", "shortDescription": "Car rent", "fullDescription": "Avon Rent-a-car" }, { "mcc": "3428", "shortDescription": "Car rent", "fullDescription": "Carey Rent-a-car" }, { "mcc": "3429", "shortDescription": "Car rent", "fullDescription": "Insurance Rent-a-car" }, { "mcc": "3430", "shortDescription": "Car rent", "fullDescription": "Major Rent-a-car" }, { "mcc": "3431", "shortDescription": "Car rent", "fullDescription": "Replacement Rent-a-car" }, { "mcc": "3432", "shortDescription": "Car rent", "fullDescription": "Reserve Rent-a-car" }, { "mcc": "3433", "shortDescription": "Car rent", "fullDescription": "Ugly Duckling Rent-a-car" }, { "mcc": "3434", "shortDescription": "Car rent", "fullDescription": "USA Rent-a-car" }, { "mcc": "3435", "shortDescription": "Car rent", "fullDescription": "Value Rent-a-car" }, { "mcc": "3436", "shortDescription": "Car rent", "fullDescription": "Autohansa Rent-a-car" }, { "mcc": "3437", "shortDescription": "Car rent", "fullDescription": "Cite Rent-a-car" }, { "mcc": "3438", "shortDescription": "Car rent", "fullDescription": "Interent Rent-a-car" }, { "mcc": "3439", "shortDescription": "Car rent", "fullDescription": "Milleville Rent-a-car" }, { "mcc": "3440", "shortDescription": "Car rent", "fullDescription": "Via Route Rent-a-Car" }, { "mcc": "3441", "shortDescription": "Car rent", "fullDescription": "Car rental agencies" }, { "mcc": "3501", "shortDescription": "Hotels and resorts", "fullDescription": "Holiday Inns" }, { "mcc": "3502", "shortDescription": "Hotels and resorts", "fullDescription": "Best Western Hotels & Resorts" }, { "mcc": "3503", "shortDescription": "Hotels and resorts", "fullDescription": "Sheraton Hotels and Resorts" }, { "mcc": "3504", "shortDescription": "Hotels and resorts", "fullDescription": "Hilton Hotels & Resorts" }, { "mcc": "3505", "shortDescription": "Hotels and resorts", "fullDescription": "Rocco Forte Hotels" }, { "mcc": "3506", "shortDescription": "Hotels and resorts", "fullDescription": "Golden Tulip Hotels" }, { "mcc": "3507", "shortDescription": "Hotels and resorts", "fullDescription": "Friendship Inns" }, { "mcc": "3508", "shortDescription": "Hotels and resorts", "fullDescription": "Quality Inns" }, { "mcc": "3509", "shortDescription": "Hotels and resorts", "fullDescription": "Marriott Hotels" }, { "mcc": "3510", "shortDescription": "Hotels and resorts", "fullDescription": "Days Inn" }, { "mcc": "3511", "shortDescription": "Hotels and resorts", "fullDescription": "Arabella Hotels" }, { "mcc": "3512", "shortDescription": "Hotels and resorts", "fullDescription": "Inter-continental Hotels" }, { "mcc": "3513", "shortDescription": "Hotels and resorts", "fullDescription": "Westin Hotels & Resorts" }, { "mcc": "3514", "shortDescription": "Hotels and resorts", "fullDescription": "AmeriSuites Hotels" }, { "mcc": "3515", "shortDescription": "Hotels and resorts", "fullDescription": "Rodeway Inns" }, { "mcc": "3516", "shortDescription": "Hotels and resorts", "fullDescription": "La Quinta Motor Inns" }, { "mcc": "3517", "shortDescription": "Hotels and resorts", "fullDescription": "Americana Hotels" }, { "mcc": "3518", "shortDescription": "Hotels and resorts", "fullDescription": "Sol Hotels" }, { "mcc": "3519", "shortDescription": "Hotels and resorts", "fullDescription": "Pullman International Hotels" }, { "mcc": "3520", "shortDescription": "Hotels and resorts", "fullDescription": "Meridien Hotels" }, { "mcc": "3521", "shortDescription": "Hotels and resorts", "fullDescription": "Forte Crest Hotels" }, { "mcc": "3522", "shortDescription": "Hotels and resorts", "fullDescription": "Tokyo Hotel" }, { "mcc": "3523", "shortDescription": "Hotels and resorts", "fullDescription": "Peninsula Hotels" }, { "mcc": "3524", "shortDescription": "Hotels and resorts", "fullDescription": "Welcomgroup Hotels" }, { "mcc": "3525", "shortDescription": "Hotels and resorts", "fullDescription": "Dunfey Hotels" }, { "mcc": "3526", "shortDescription": "Hotels and resorts", "fullDescription": "Prince Hotels" }, { "mcc": "3527", "shortDescription": "Hotels and resorts", "fullDescription": "Downtowner-passport Hotel" }, { "mcc": "3528", "shortDescription": "Hotels and resorts", "fullDescription": "Red Lion Hotels" }, { "mcc": "3529", "shortDescription": "Hotels and resorts", "fullDescription": "Canadian Pacific Hotels" }, { "mcc": "3530", "shortDescription": "Hotels and resorts", "fullDescription": "Renaissance Hotels" }, { "mcc": "3531", "shortDescription": "Hotels and resorts", "fullDescription": "Astir Hotels" }, { "mcc": "3532", "shortDescription": "Hotels and resorts", "fullDescription": "Sun Route Hotels" }, { "mcc": "3533", "shortDescription": "Hotels and resorts", "fullDescription": "Hotel Ibis" }, { "mcc": "3534", "shortDescription": "Hotels and resorts", "fullDescription": "Southern Pacific Hotels" }, { "mcc": "3535", "shortDescription": "Hotels and resorts", "fullDescription": "Hilton International" }, { "mcc": "3536", "shortDescription": "Hotels and resorts", "fullDescription": "Amfac Hotels" }, { "mcc": "3537", "shortDescription": "Hotels and resorts", "fullDescription": "ANA Hotel" }, { "mcc": "3538", "shortDescription": "Hotels and resorts", "fullDescription": "Concorde Hotels" }, { "mcc": "3539", "shortDescription": "Hotels and resorts", "fullDescription": "Summerfield Suites Hotels" }, { "mcc": "3540", "shortDescription": "Hotels and resorts", "fullDescription": "Iberotel Hotels" }, { "mcc": "3541", "shortDescription": "Hotels and resorts", "fullDescription": "Okura Hotels & Resorts" }, { "mcc": "3542", "shortDescription": "Hotels and resorts", "fullDescription": "Royal Hotels" }, { "mcc": "3543", "shortDescription": "Hotels and resorts", "fullDescription": "Four Seasons Hotels" }, { "mcc": "3544", "shortDescription": "Hotels and resorts", "fullDescription": "Ciga Hotels" }, { "mcc": "3545", "shortDescription": "Hotels and resorts", "fullDescription": "Shangri-La Hotels and Resorts" }, { "mcc": "3546", "shortDescription": "Hotels and resorts", "fullDescription": "Hotel Sierra" }, { "mcc": "3547", "shortDescription": "Hotels and resorts", "fullDescription": "Breakers Resort" }, { "mcc": "3548", "shortDescription": "Hotels and resorts", "fullDescription": "Melia Hotels International" }, { "mcc": "3549", "shortDescription": "Hotels and resorts", "fullDescription": "Auberge Des Governeurs" }, { "mcc": "3550", "shortDescription": "Hotels and resorts", "fullDescription": "Regal 8 Inns" }, { "mcc": "3551", "shortDescription": "Hotels and resorts", "fullDescription": "Mirage Hotels and Casino" }, { "mcc": "3552", "shortDescription": "Hotels and resorts", "fullDescription": "Coast Hotels" }, { "mcc": "3553", "shortDescription": "Hotels and resorts", "fullDescription": "Park Inns International" }, { "mcc": "3554", "shortDescription": "Hotels and resorts", "fullDescription": "Pinehurst Resort" }, { "mcc": "3555", "shortDescription": "Hotels and resorts", "fullDescription": "Treasure Island Hotel and Casino" }, { "mcc": "3556", "shortDescription": "Hotels and resorts", "fullDescription": "Barton Creek Resort" }, { "mcc": "3557", "shortDescription": "Hotels and resorts", "fullDescription": "Manhattan East Suite Hotels" }, { "mcc": "3558", "shortDescription": "Hotels and resorts", "fullDescription": "Jolly Hotels" }, { "mcc": "3559", "shortDescription": "Hotels and resorts", "fullDescription": "Candleood Suites" }, { "mcc": "3560", "shortDescription": "Hotels and resorts", "fullDescription": "Alladin Resort and Casino" }, { "mcc": "3561", "shortDescription": "Hotels and resorts", "fullDescription": "Golden Nugget" }, { "mcc": "3562", "shortDescription": "Hotels and resorts", "fullDescription": "Comfort Inns" }, { "mcc": "3563", "shortDescription": "Hotels and resorts", "fullDescription": "Journey’s End Motеls" }, { "mcc": "3564", "shortDescription": "Hotels and resorts", "fullDescription": "Sam Town Hotel and Casino" }, { "mcc": "3565", "shortDescription": "Hotels and resorts", "fullDescription": "Relax Inns" }, { "mcc": "3566", "shortDescription": "Hotels and resorts", "fullDescription": "Garden Place Hotel" }, { "mcc": "3567", "shortDescription": "Hotels and resorts", "fullDescription": "Soho Grand Hotel" }, { "mcc": "3568", "shortDescription": "Hotels and resorts", "fullDescription": "Ladbroke Hotels" }, { "mcc": "3569", "shortDescription": "Hotels and resorts", "fullDescription": "Tribeca Grand Hotels" }, { "mcc": "3570", "shortDescription": "Hotels and resorts", "fullDescription": "Grand Met Forum Hotels" }, { "mcc": "3571", "shortDescription": "Hotels and resorts", "fullDescription": "Grand Wailea Hotels" }, { "mcc": "3572", "shortDescription": "Hotels and resorts", "fullDescription": "Miyako Hotels & Resorts" }, { "mcc": "3573", "shortDescription": "Hotels and resorts", "fullDescription": "Sandman Hotels" }, { "mcc": "3574", "shortDescription": "Hotels and resorts", "fullDescription": "Venture Inns" }, { "mcc": "3575", "shortDescription": "Hotels and resorts", "fullDescription": "Vagabond Hotels" }, { "mcc": "3576", "shortDescription": "Hotels and resorts", "fullDescription": "La Quinta Resort" }, { "mcc": "3577", "shortDescription": "Hotels and resorts", "fullDescription": "Mandarin Oriental Hotel" }, { "mcc": "3578", "shortDescription": "Hotels and resorts", "fullDescription": "Bavarian Inn Lodge" }, { "mcc": "3579", "shortDescription": "Hotels and resorts", "fullDescription": "Hotel Mercure" }, { "mcc": "3580", "shortDescription": "Hotels and resorts", "fullDescription": "Hotel Del Coronado" }, { "mcc": "3581", "shortDescription": "Hotels and resorts", "fullDescription": "Delta Hotels" }, { "mcc": "3582", "shortDescription": "Hotels and resorts", "fullDescription": "California Hotel and Casino" }, { "mcc": "3583", "shortDescription": "Hotels and resorts", "fullDescription": "Radisson Blue Hotel" }, { "mcc": "3584", "shortDescription": "Hotels and resorts", "fullDescription": "Princess Hotels International" }, { "mcc": "3585", "shortDescription": "Hotels and resorts", "fullDescription": "Hungary Hotels" }, { "mcc": "3586", "shortDescription": "Hotels and resorts", "fullDescription": "Sokos Hotels" }, { "mcc": "3587", "shortDescription": "Hotels and resorts", "fullDescription": "Doral Hotels" }, { "mcc": "3588", "shortDescription": "Hotels and resorts", "fullDescription": "Helmsley Hotels" }, { "mcc": "3589", "shortDescription": "Hotels and resorts", "fullDescription": "Doral Golf Resort" }, { "mcc": "3590", "shortDescription": "Hotels and resorts", "fullDescription": "Fairmont Hotels" }, { "mcc": "3591", "shortDescription": "Hotels and resorts", "fullDescription": "Sonesta Hotels" }, { "mcc": "3592", "shortDescription": "Hotels and resorts", "fullDescription": "Omni Hotels & Resorts" }, { "mcc": "3593", "shortDescription": "Hotels and resorts", "fullDescription": "Cunard Hotels" }, { "mcc": "3594", "shortDescription": "Hotels and resorts", "fullDescription": "Arizona Biltmore, A Waldorf Astoria Resort" }, { "mcc": "3595", "shortDescription": "Hotels and resorts", "fullDescription": "Hospitality International" }, { "mcc": "3596", "shortDescription": "Hotels and resorts", "fullDescription": "Wynn Las Vegas" }, { "mcc": "3597", "shortDescription": "Hotels and resorts", "fullDescription": "Riverside Resort and Casino" }, { "mcc": "3598", "shortDescription": "Hotels and resorts", "fullDescription": "Regent Hotels & Resorts" }, { "mcc": "3599", "shortDescription": "Hotels and resorts", "fullDescription": "Pannonia Hotels" }, { "mcc": "3600", "shortDescription": "Hotels and resorts", "fullDescription": "Saddlebrook Resort" }, { "mcc": "3601", "shortDescription": "Hotels and resorts", "fullDescription": "TradeWinds Island Grand Resort" }, { "mcc": "3602", "shortDescription": "Hotels and resorts", "fullDescription": "Hudson Hotel" }, { "mcc": "3603", "shortDescription": "Hotels and resorts", "fullDescription": "Noah's Ark Hotel and Resort" }, { "mcc": "3604", "shortDescription": "Hotels and resorts", "fullDescription": "Hilton Garden Inn" }, { "mcc": "3605", "shortDescription": "Hotels and resorts", "fullDescription": "Jurys Inn" }, { "mcc": "3606", "shortDescription": "Hotels and resorts", "fullDescription": "Jefferson Hotel" }, { "mcc": "3607", "shortDescription": "Hotels and resorts", "fullDescription": "Fontainebleau Resort" }, { "mcc": "3608", "shortDescription": "Hotels and resorts", "fullDescription": "Gaylord Opryland Resort" }, { "mcc": "3609", "shortDescription": "Hotels and resorts", "fullDescription": "Gaylord Palms Resort" }, { "mcc": "3610", "shortDescription": "Hotels and resorts", "fullDescription": "Gaylord Texan Resort" }, { "mcc": "3611", "shortDescription": "Hotels and resorts", "fullDescription": "C'mon Inn Hotel & Suites" }, { "mcc": "3612", "shortDescription": "Hotels and resorts", "fullDescription": "Movenpick Hotels & Resorts" }, { "mcc": "3613", "shortDescription": "Hotels and resorts", "fullDescription": "Microtel Inn and Suites" }, { "mcc": "3614", "shortDescription": "Hotels and resorts", "fullDescription": "AmericInn" }, { "mcc": "3615", "shortDescription": "Hotels and resorts", "fullDescription": "Travelodge Hotels" }, { "mcc": "3616", "shortDescription": "Hotels and resorts", "fullDescription": "Hermitage Hotels" }, { "mcc": "3617", "shortDescription": "Hotels and resorts", "fullDescription": "America’s Best Value Inn" }, { "mcc": "3618", "shortDescription": "Hotels and resorts", "fullDescription": "Great Wolf Resorts" }, { "mcc": "3619", "shortDescription": "Hotels and resorts", "fullDescription": "Aloft Hotels" }, { "mcc": "3620", "shortDescription": "Hotels and resorts", "fullDescription": "Binions Horseshoe Club" }, { "mcc": "3621", "shortDescription": "Hotels and resorts", "fullDescription": "Extended Stay" }, { "mcc": "3622", "shortDescription": "Hotels and resorts", "fullDescription": "Merlin Hotel (Perth)" }, { "mcc": "3623", "shortDescription": "Hotels and resorts", "fullDescription": "Dorint Hotels & Resort" }, { "mcc": "3624", "shortDescription": "Hotels and resorts", "fullDescription": "Lady Luck Hotel and Casino" }, { "mcc": "3625", "shortDescription": "Hotels and resorts", "fullDescription": "Hotel Universal" }, { "mcc": "3626", "shortDescription": "Hotels and resorts", "fullDescription": "Prince Hotels / Studio Plus Hotel" }, { "mcc": "3627", "shortDescription": "Hotels and resorts", "fullDescription": "Extended Stay America" }, { "mcc": "3628", "shortDescription": "Hotels and resorts", "fullDescription": "Excalibur Hotel and Casino" }, { "mcc": "3629", "shortDescription": "Hotels and resorts", "fullDescription": "Dan Hotels" }, { "mcc": "3630", "shortDescription": "Hotels and resorts", "fullDescription": "Extended Stay Deluxe" }, { "mcc": "3631", "shortDescription": "Hotels and resorts", "fullDescription": "Sleep Inn" }, { "mcc": "3632", "shortDescription": "Hotels and resorts", "fullDescription": "The Phoenician Resort" }, { "mcc": "3633", "shortDescription": "Hotels and resorts", "fullDescription": "Rank Hotels" }, { "mcc": "3634", "shortDescription": "Hotels and resorts", "fullDescription": "Swissôtel Hotels & Resorts" }, { "mcc": "3635", "shortDescription": "Hotels and resorts", "fullDescription": "Reso Hotels" }, { "mcc": "3636", "shortDescription": "Hotels and resorts", "fullDescription": "Sarova Hotels" }, { "mcc": "3637", "shortDescription": "Hotels and resorts", "fullDescription": "Ramada Inns" }, { "mcc": "3638", "shortDescription": "Hotels and resorts", "fullDescription": "Howard Johnson Hotels" }, { "mcc": "3639", "shortDescription": "Hotels and resorts", "fullDescription": "Mount Charlotte Hotels" }, { "mcc": "3640", "shortDescription": "Hotels and resorts", "fullDescription": "Hyatt Hotels/International" }, { "mcc": "3641", "shortDescription": "Hotels and resorts", "fullDescription": "Sofitel Hotels & Resorts" }, { "mcc": "3642", "shortDescription": "Hotels and resorts", "fullDescription": "Novotel Sieh (Accor)" }, { "mcc": "3643", "shortDescription": "Hotels and resorts", "fullDescription": "Steigenberger Hotels and Resorts" }, { "mcc": "3644", "shortDescription": "Hotels and resorts", "fullDescription": "Econo-Travel Motor Hotel" }, { "mcc": "3645", "shortDescription": "Hotels and resorts", "fullDescription": "Queens Moat Houses" }, { "mcc": "3646", "shortDescription": "Hotels and resorts", "fullDescription": "Swallow Hotels" }, { "mcc": "3647", "shortDescription": "Hotels and resorts", "fullDescription": "HUSA Hotels" }, { "mcc": "3648", "shortDescription": "Hotels and resorts", "fullDescription": "De Vere Hotels" }, { "mcc": "3649", "shortDescription": "Hotels and resorts", "fullDescription": "Radisson Hotels" }, { "mcc": "3650", "shortDescription": "Hotels and resorts", "fullDescription": "Red Roof Inns" }, { "mcc": "3651", "shortDescription": "Hotels and resorts", "fullDescription": "Imperial London Hotels" }, { "mcc": "3652", "shortDescription": "Hotels and resorts", "fullDescription": "Embassy Suites Hotels by Hilton" }, { "mcc": "3653", "shortDescription": "Hotels and resorts", "fullDescription": "Penta Hotels" }, { "mcc": "3654", "shortDescription": "Hotels and resorts", "fullDescription": "Loews Hotels" }, { "mcc": "3655", "shortDescription": "Hotels and resorts", "fullDescription": "Scandic Hotels" }, { "mcc": "3656", "shortDescription": "Hotels and resorts", "fullDescription": "Sara Hotels" }, { "mcc": "3657", "shortDescription": "Hotels and resorts", "fullDescription": "Oberoi Hotels & Resorts" }, { "mcc": "3658", "shortDescription": "Hotels and resorts", "fullDescription": "New Otani Hotels" }, { "mcc": "3659", "shortDescription": "Hotels and resorts", "fullDescription": "Taj Hotels Intl" }, { "mcc": "3660", "shortDescription": "Hotels and resorts", "fullDescription": "Knights Inn" }, { "mcc": "3661", "shortDescription": "Hotels and resorts", "fullDescription": "Metropole Hotel and SPA" }, { "mcc": "3662", "shortDescription": "Hotels and resorts", "fullDescription": "Circus Circus Hotel and Casino" }, { "mcc": "3663", "shortDescription": "Hotels and resorts", "fullDescription": "Hoteles El Presidente" }, { "mcc": "3664", "shortDescription": "Hotels and resorts", "fullDescription": "Flag Inns" }, { "mcc": "3665", "shortDescription": "Hotels and resorts", "fullDescription": "Hampton Inns by Hilton" }, { "mcc": "3666", "shortDescription": "Hotels and resorts", "fullDescription": "Stakis Hotels" }, { "mcc": "3667", "shortDescription": "Hotels and resorts", "fullDescription": "Luxor Hotel and Casino" }, { "mcc": "3668", "shortDescription": "Hotels and resorts", "fullDescription": "Maritim" }, { "mcc": "3669", "shortDescription": "Hotels and resorts", "fullDescription": "Eldorado Hotel and Casino" }, { "mcc": "3670", "shortDescription": "Hotels and resorts", "fullDescription": "Arcade Hotel" }, { "mcc": "3671", "shortDescription": "Hotels and resorts", "fullDescription": "Arctia Hotels" }, { "mcc": "3672", "shortDescription": "Hotels and resorts", "fullDescription": "Campanile Hotel" }, { "mcc": "3673", "shortDescription": "Hotels and resorts", "fullDescription": "Ibusz Hotels" }, { "mcc": "3674", "shortDescription": "Hotels and resorts", "fullDescription": "Rantasipi Hotels" }, { "mcc": "3675", "shortDescription": "Hotels and resorts", "fullDescription": "Interhotel Cedok" }, { "mcc": "3676", "shortDescription": "Hotels and resorts", "fullDescription": "Monte Carlo Hotel and Casino" }, { "mcc": "3677", "shortDescription": "Hotels and resorts", "fullDescription": "Climat De France Hotels" }, { "mcc": "3678", "shortDescription": "Hotels and resorts", "fullDescription": "Cumulus Hotels" }, { "mcc": "3679", "shortDescription": "Hotels and resorts", "fullDescription": "Silver Legacy Hotel and Casino" }, { "mcc": "3680", "shortDescription": "Hotels and resorts", "fullDescription": "Hoteis Othan" }, { "mcc": "3681", "shortDescription": "Hotels and resorts", "fullDescription": "Adams Mark Hotels" }, { "mcc": "3682", "shortDescription": "Hotels and resorts", "fullDescription": "Sahara Hotel and Casino" }, { "mcc": "3683", "shortDescription": "Hotels and resorts", "fullDescription": "Bradbury Suites" }, { "mcc": "3684", "shortDescription": "Hotels and resorts", "fullDescription": "Budget Host Hotels" }, { "mcc": "3685", "shortDescription": "Hotels and resorts", "fullDescription": "Budgetel" }, { "mcc": "3686", "shortDescription": "Hotels and resorts", "fullDescription": "Suisse Chalet Hotels" }, { "mcc": "3687", "shortDescription": "Hotels and resorts", "fullDescription": "Clarion Hotels" }, { "mcc": "3688", "shortDescription": "Hotels and resorts", "fullDescription": "Compri Hotel Bucks County" }, { "mcc": "3689", "shortDescription": "Hotels and resorts", "fullDescription": "Consort Hotel" }, { "mcc": "3690", "shortDescription": "Hotels and resorts", "fullDescription": "Courtyard by Marriott Hotel" }, { "mcc": "3691", "shortDescription": "Hotels and resorts", "fullDescription": "Dillon Inn" }, { "mcc": "3692", "shortDescription": "Hotels and resorts", "fullDescription": "DoubleTree by Hilton" }, { "mcc": "3693", "shortDescription": "Hotels and resorts", "fullDescription": "Drury Hotels" }, { "mcc": "3694", "shortDescription": "Hotels and resorts", "fullDescription": "Economy Inns Of America" }, { "mcc": "3695", "shortDescription": "Hotels and resorts", "fullDescription": "Embassy Suites by Hilton" }, { "mcc": "3696", "shortDescription": "Hotels and resorts", "fullDescription": "Excel Inn" }, { "mcc": "3697", "shortDescription": "Hotels and resorts", "fullDescription": "Fairfield Hotel by Marriott" }, { "mcc": "3698", "shortDescription": "Hotels and resorts", "fullDescription": "Harley Hotel" }, { "mcc": "3699", "shortDescription": "Hotels and resorts", "fullDescription": "Midway Motor Lodge" }, { "mcc": "3700", "shortDescription": "Hotels and resorts", "fullDescription": "Motel 6" }, { "mcc": "3701", "shortDescription": "Hotels and resorts", "fullDescription": "La Mansion Del Rio" }, { "mcc": "3702", "shortDescription": "Hotels and resorts", "fullDescription": "Registry Hotels" }, { "mcc": "3703", "shortDescription": "Hotels and resorts", "fullDescription": "Residence Inn by Marriott" }, { "mcc": "3704", "shortDescription": "Hotels and resorts", "fullDescription": "Royce Hotel" }, { "mcc": "3705", "shortDescription": "Hotels and resorts", "fullDescription": "Sandman Inn" }, { "mcc": "3706", "shortDescription": "Hotels and resorts", "fullDescription": "Shilo Inn" }, { "mcc": "3707", "shortDescription": "Hotels and resorts", "fullDescription": "Shoneys Inn" }, { "mcc": "3708", "shortDescription": "Hotels and resorts", "fullDescription": "Virgin River Hotel and Casino" }, { "mcc": "3709", "shortDescription": "Hotels and resorts", "fullDescription": "Super 8 Motel" }, { "mcc": "3710", "shortDescription": "Hotels and resorts", "fullDescription": "Ritz-Carlton Hotel" }, { "mcc": "3711", "shortDescription": "Hotels and resorts", "fullDescription": "Flag Inns (Australia)" }, { "mcc": "3712", "shortDescription": "Hotels and resorts", "fullDescription": "Buffalo Bills Hotel and Casino" }, { "mcc": "3713", "shortDescription": "Hotels and resorts", "fullDescription": "Quality Pacific Hotel" }, { "mcc": "3714", "shortDescription": "Hotels and resorts", "fullDescription": "Four Seasons Hotels (Australia)" }, { "mcc": "3715", "shortDescription": "Hotels and resorts", "fullDescription": "Fairfield Inn" }, { "mcc": "3716", "shortDescription": "Hotels and resorts", "fullDescription": "Carlton Hotels" }, { "mcc": "3717", "shortDescription": "Hotels and resorts", "fullDescription": "City Lodge Hotels" }, { "mcc": "3718", "shortDescription": "Hotels and resorts", "fullDescription": "Karos Hotels" }, { "mcc": "3719", "shortDescription": "Hotels and resorts", "fullDescription": "Protea Hotels by Marriott" }, { "mcc": "3720", "shortDescription": "Hotels and resorts", "fullDescription": "Southern Sun Hotels" }, { "mcc": "3721", "shortDescription": "Hotels and resorts", "fullDescription": "Conrad Hotels" }, { "mcc": "3722", "shortDescription": "Hotels and resorts", "fullDescription": "Wyndham Hotels & Resorts" }, { "mcc": "3723", "shortDescription": "Hotels and resorts", "fullDescription": "Rica Hotels" }, { "mcc": "3724", "shortDescription": "Hotels and resorts", "fullDescription": "Inter Nor Hotels" }, { "mcc": "3725", "shortDescription": "Hotels and resorts", "fullDescription": "Sea Pines Resort" }, { "mcc": "3726", "shortDescription": "Hotels and resorts", "fullDescription": "Rio Suites" }, { "mcc": "3727", "shortDescription": "Hotels and resorts", "fullDescription": "Broadmoor Hotel" }, { "mcc": "3728", "shortDescription": "Hotels and resorts", "fullDescription": "Ballys Hotel and Casino" }, { "mcc": "3729", "shortDescription": "Hotels and resorts", "fullDescription": "Nugget Casino Resort" }, { "mcc": "3730", "shortDescription": "Hotels and resorts", "fullDescription": "MGM Grand Hotel" }, { "mcc": "3731", "shortDescription": "Hotels and resorts", "fullDescription": "Harrah’s Hotels and Casinos" }, { "mcc": "3732", "shortDescription": "Hotels and resorts", "fullDescription": "Opryland Hotel" }, { "mcc": "3733", "shortDescription": "Hotels and resorts", "fullDescription": "Boca Raton Resort and Club" }, { "mcc": "3734", "shortDescription": "Hotels and resorts", "fullDescription": "Harvey Bristol Hotels" }, { "mcc": "3735", "shortDescription": "Hotels and resorts", "fullDescription": "Masters Economy Inns" }, { "mcc": "3736", "shortDescription": "Hotels and resorts", "fullDescription": "Colorado Belle Edgewater Resort" }, { "mcc": "3737", "shortDescription": "Hotels and resorts", "fullDescription": "Riviera Hotel and Casino" }, { "mcc": "3738", "shortDescription": "Hotels and resorts", "fullDescription": "Tropicana Resort and Casino" }, { "mcc": "3739", "shortDescription": "Hotels and resorts", "fullDescription": "Woodside Hotels and Resorts" }, { "mcc": "3740", "shortDescription": "Hotels and resorts", "fullDescription": "Towneplace Suites" }, { "mcc": "3741", "shortDescription": "Hotels and resorts", "fullDescription": "Millennium Times Square New York" }, { "mcc": "3742", "shortDescription": "Hotels and resorts", "fullDescription": "Club Med" }, { "mcc": "3743", "shortDescription": "Hotels and resorts", "fullDescription": "Atlanta Biltmore Hotel and Apartments" }, { "mcc": "3744", "shortDescription": "Hotels and resorts", "fullDescription": "Carefree Resorts" }, { "mcc": "3745", "shortDescription": "Hotels and resorts", "fullDescription": "St. Regis Hotel" }, { "mcc": "3746", "shortDescription": "Hotels and resorts", "fullDescription": "The Eliot Hotel" }, { "mcc": "3747", "shortDescription": "Hotels and resorts", "fullDescription": "Club Corporation / Club Resorts" }, { "mcc": "3748", "shortDescription": "Hotels and resorts", "fullDescription": "Wellesley Inns" }, { "mcc": "3749", "shortDescription": "Hotels and resorts", "fullDescription": "Beverly Hills Hotel" }, { "mcc": "3750", "shortDescription": "Hotels and resorts", "fullDescription": "Crowne Plaza Hotels" }, { "mcc": "3751", "shortDescription": "Hotels and resorts", "fullDescription": "Homewood Suites by Hilton" }, { "mcc": "3752", "shortDescription": "Hotels and resorts", "fullDescription": "Peabody Hotels" }, { "mcc": "3753", "shortDescription": "Hotels and resorts", "fullDescription": "Greenbriar Resorts" }, { "mcc": "3754", "shortDescription": "Hotels and resorts", "fullDescription": "Amelia Island Plantation" }, { "mcc": "3755", "shortDescription": "Hotels and resorts", "fullDescription": "Homestead Hotels" }, { "mcc": "3756", "shortDescription": "Hotels and resorts", "fullDescription": "South Seas Island Resort" }, { "mcc": "3757", "shortDescription": "Hotels and resorts", "fullDescription": "Canyon Ranch" }, { "mcc": "3758", "shortDescription": "Hotels and resorts", "fullDescription": "Kahala Mandarin Oriental Hotel" }, { "mcc": "3759", "shortDescription": "Hotels and resorts", "fullDescription": "Orchid At Mauna Lani" }, { "mcc": "3760", "shortDescription": "Hotels and resorts", "fullDescription": "Halekulani Hotel / Waikiki Parc" }, { "mcc": "3761", "shortDescription": "Hotels and resorts", "fullDescription": "Primadonna Hotel and Casino" }, { "mcc": "3762", "shortDescription": "Hotels and resorts", "fullDescription": "Whiskey Pete’s Hotel and Casino" }, { "mcc": "3763", "shortDescription": "Hotels and resorts", "fullDescription": "Chateau Elan Winery and Resort" }, { "mcc": "3764", "shortDescription": "Hotels and resorts", "fullDescription": "Beau Rivage Hotel and Casino" }, { "mcc": "3765", "shortDescription": "Hotels and resorts", "fullDescription": "Bellagio Resort and Casino" }, { "mcc": "3766", "shortDescription": "Hotels and resorts", "fullDescription": "Fremont Hotel and Casino" }, { "mcc": "3767", "shortDescription": "Hotels and resorts", "fullDescription": "Main Street Station Casino Brewery Hotel" }, { "mcc": "3768", "shortDescription": "Hotels and resorts", "fullDescription": "Silver Star Hotel and Casino" }, { "mcc": "3769", "shortDescription": "Hotels and resorts", "fullDescription": "Stratosphere Hotel and Casino" }, { "mcc": "3770", "shortDescription": "Hotels and resorts", "fullDescription": "Springhill Suites" }, { "mcc": "3771", "shortDescription": "Hotels and resorts", "fullDescription": "Caesars Hotel and Casino" }, { "mcc": "3772", "shortDescription": "Hotels and resorts", "fullDescription": "Nemacolin Woodlands" }, { "mcc": "3773", "shortDescription": "Hotels and resorts", "fullDescription": "Venetian Resort Hotel and Casino" }, { "mcc": "3774", "shortDescription": "Hotels and resorts", "fullDescription": "New York-New York Hotel & Casino" }, { "mcc": "3775", "shortDescription": "Hotels and resorts", "fullDescription": "Sands Resort" }, { "mcc": "3776", "shortDescription": "Hotels and resorts", "fullDescription": "Nevele Grande Resort and Country Club" }, { "mcc": "3777", "shortDescription": "Hotels and resorts", "fullDescription": "Mandalay Bay Resort" }, { "mcc": "3778", "shortDescription": "Hotels and resorts", "fullDescription": "Four Points Hotels" }, { "mcc": "3779", "shortDescription": "Hotels and resorts", "fullDescription": "W Hotels" }, { "mcc": "3780", "shortDescription": "Hotels and resorts", "fullDescription": "Disneyland Resorts" }, { "mcc": "3781", "shortDescription": "Hotels and resorts", "fullDescription": "Patricia Grand Resort Hotels" }, { "mcc": "3782", "shortDescription": "Hotels and resorts", "fullDescription": "Rosen Hotel and Resorts" }, { "mcc": "3783", "shortDescription": "Hotels and resorts", "fullDescription": "Town and Country Resort and Convention Center" }, { "mcc": "3784", "shortDescription": "Hotels and resorts", "fullDescription": "First Hospitality Hotels" }, { "mcc": "3785", "shortDescription": "Hotels and resorts", "fullDescription": "Outrigger Hotels and Resorts " }, { "mcc": "3786", "shortDescription": "Hotels and resorts", "fullDescription": "Ohana Hotels of Hawaii" }, { "mcc": "3787", "shortDescription": "Hotels and resorts", "fullDescription": "Caribe Royal Orlando Resort Suite and Villas" }, { "mcc": "3788", "shortDescription": "Hotels and resorts", "fullDescription": "Ala Moana Honolulu by Mantra" }, { "mcc": "3789", "shortDescription": "Hotels and resorts", "fullDescription": "Smugglers Notch Resort" }, { "mcc": "3790", "shortDescription": "Hotels and resorts", "fullDescription": "Raffles Hotels & Resorts" }, { "mcc": "3791", "shortDescription": "Hotels and resorts", "fullDescription": "Staybridge Suites" }, { "mcc": "3792", "shortDescription": "Hotels and resorts", "fullDescription": "Claridge Casino Hotel" }, { "mcc": "3793", "shortDescription": "Hotels and resorts", "fullDescription": "The Flamingo Hotels" }, { "mcc": "3794", "shortDescription": "Hotels and resorts", "fullDescription": "Grand Casino Hotel & Resort" }, { "mcc": "3795", "shortDescription": "Hotels and resorts", "fullDescription": "Paris Las Vegas Hotel" }, { "mcc": "3796", "shortDescription": "Hotels and resorts", "fullDescription": "Peppermill Hotel Casino" }, { "mcc": "3797", "shortDescription": "Hotels and resorts", "fullDescription": "The Atlantic Club Casino Hotel" }, { "mcc": "3798", "shortDescription": "Hotels and resorts", "fullDescription": "Embassy Vacation Resort" }, { "mcc": "3799", "shortDescription": "Hotels and resorts", "fullDescription": "Hale Koa Hotel" }, { "mcc": "3800", "shortDescription": "Hotels and resorts", "fullDescription": "Homestead Suites" }, { "mcc": "3801", "shortDescription": "Hotels and resorts", "fullDescription": "Wilderness Hotel and Resort" }, { "mcc": "3802", "shortDescription": "Hotels and resorts", "fullDescription": "The Palace Hotel" }, { "mcc": "3803", "shortDescription": "Hotels and resorts", "fullDescription": "The Wigwam Golf Resort and Spa" }, { "mcc": "3804", "shortDescription": "Hotels and resorts", "fullDescription": "The Diplomat Country Club and Spa" }, { "mcc": "3805", "shortDescription": "Hotels and resorts", "fullDescription": "The Atlantic Hotel" }, { "mcc": "3806", "shortDescription": "Hotels and resorts", "fullDescription": "Princeville Resort" }, { "mcc": "3807", "shortDescription": "Hotels and resorts", "fullDescription": "Element Hotel" }, { "mcc": "3808", "shortDescription": "Hotels and resorts", "fullDescription": "LXR (Luxury Resorts)" }, { "mcc": "3809", "shortDescription": "Hotels and resorts", "fullDescription": "Settle Inn" }, { "mcc": "3810", "shortDescription": "Hotels and resorts", "fullDescription": "La Costa Resort" }, { "mcc": "3811", "shortDescription": "Hotels and resorts", "fullDescription": "Premier Travel Inns" }, { "mcc": "3812", "shortDescription": "Hotels and resorts", "fullDescription": "Hyatt Place" }, { "mcc": "3813", "shortDescription": "Hotels and resorts", "fullDescription": "Hotel Indigo" }, { "mcc": "3814", "shortDescription": "Hotels and resorts", "fullDescription": "The Roosevelt Hotel NY" }, { "mcc": "3815", "shortDescription": "Hotels and resorts", "fullDescription": "Nickelodeon Family Suites by Holiday Inn" }, { "mcc": "3816", "shortDescription": "Hotels and resorts", "fullDescription": "Home2 Suites by Hilton" }, { "mcc": "3817", "shortDescription": "Hotels and resorts", "fullDescription": "Affinia Hotels" }, { "mcc": "3818", "shortDescription": "Hotels and resorts", "fullDescription": "Mainstay Suites" }, { "mcc": "3819", "shortDescription": "Hotels and resorts", "fullDescription": "Oxford Suites" }, { "mcc": "3820", "shortDescription": "Hotels and resorts", "fullDescription": "Jumeirah Essex House" }, { "mcc": "3821", "shortDescription": "Hotels and resorts", "fullDescription": "Caribe Royal Orlando Resort Suite and Villas" }, { "mcc": "3822", "shortDescription": "Hotels and resorts", "fullDescription": "Crossland Economy Studios Hotels" }, { "mcc": "3823", "shortDescription": "Hotels and resorts", "fullDescription": "Grand Sierra Resort" }, { "mcc": "3824", "shortDescription": "Hotels and resorts", "fullDescription": "Aria Hotels" }, { "mcc": "3825", "shortDescription": "Hotels and resorts", "fullDescription": "Vdara Hotel & Spa" }, { "mcc": "3826", "shortDescription": "Hotels and resorts", "fullDescription": "Hotel am Steinplatz" }, { "mcc": "3827", "shortDescription": "Hotels and resorts", "fullDescription": "The Galt House Hotel by Wyndham" }, { "mcc": "3828", "shortDescription": "Hotels and resorts", "fullDescription": "Cosmopolitan of Las Vegas" }, { "mcc": "3829", "shortDescription": "Hotels and resorts", "fullDescription": "Country Inn By Carlson" }, { "mcc": "3830", "shortDescription": "Hotels and resorts", "fullDescription": "Park Plaza Hotel" }, { "mcc": "3831", "shortDescription": "Hotels and resorts", "fullDescription": "Waldorf Astoria Hotels & Resorts" }, { "mcc": "3832", "shortDescription": "Hotels and resorts", "fullDescription": "Curio Hotels Country Inn by Hilton" }, { "mcc": "3833", "shortDescription": "Hotels and resorts", "fullDescription": "Canopy Hotels by Hilton" }, { "mcc": "3834", "shortDescription": "Hotels and resorts", "fullDescription": "Baymont Inn & Suites" }, { "mcc": "3835", "shortDescription": "Hotels and resorts", "fullDescription": "Dolce Hotels and Resorts" }, { "mcc": "3836", "shortDescription": "Hotels and resorts", "fullDescription": "Hawthorn by Wyndham" }, { "mcc": "3837", "shortDescription": "Hotels and resorts", "fullDescription": "Hoshino Resorts" }, { "mcc": "3838", "shortDescription": "Hotels and resorts", "fullDescription": "Kimpton Hotels" }, { "mcc": "3882", "shortDescription": "Сashing", "fullDescription": "Cash collection (cashing)" }, { "mcc": "4011", "shortDescription": "Railway", "fullDescription": "Railroads - Freight" }, { "mcc": "4111", "shortDescription": "Passenger transportation", "fullDescription": "Transportation-Suburban and Local Commuter Passenger, including Ferries" }, { "mcc": "4112", "shortDescription": "Passenger railways", "fullDescription": "Passenger Railways" }, { "mcc": "4119", "shortDescription": "Ambulance", "fullDescription": "Ambulance Services" }, { "mcc": "4121", "shortDescription": "Taxi", "fullDescription": "Taxicabs and Limousines" }, { "mcc": "4131", "shortDescription": "Transportation. Bus", "fullDescription": "Bus Lines" }, { "mcc": "4214", "shortDescription": "Transportation. Delivery", "fullDescription": "Motor Freight Carriers,Trucking-Local/Long Distance, Moving and Storage Companies, Local Delivery" }, { "mcc": "4215", "shortDescription": "Delivery service", "fullDescription": "Courier Services - Air and Ground, Freight Forwarders" }, { "mcc": "4225", "shortDescription": "Storage", "fullDescription": "Public Warehousing-Farm Products, Refrigerated Goods, Household Goods Storage" }, { "mcc": "4304", "shortDescription": "Miscellaneous", "fullDescription": "Miscellaneous" }, { "mcc": "4411", "shortDescription": "Cruise Lines", "fullDescription": "Cruise Lines" }, { "mcc": "4457", "shortDescription": "Boat Rentals", "fullDescription": "Boat Leases and Boat Rentals" }, { "mcc": "4468", "shortDescription": "Yachting service", "fullDescription": "Marinas, Marine Service/Supplies" }, { "mcc": "4511", "shortDescription": "Airlines", "fullDescription": "Air Carriers, Airlines" }, { "mcc": "4582", "shortDescription": "Airports", "fullDescription": "Airports, Airport Terminals, Flying Fields" }, { "mcc": "4722", "shortDescription": "Tourism", "fullDescription": "Travel Agencies and Tour Operators" }, { "mcc": "4723", "shortDescription": "Tour operators", "fullDescription": "Package Tour Operators (Germany Only)" }, { "mcc": "4729", "shortDescription": "Transportation Services", "fullDescription": "Passenger transportation services" }, { "mcc": "4761", "shortDescription": "Telemarketing", "fullDescription": "Telemarketing of Travel Related Services and Vitamins" }, { "mcc": "4784", "shortDescription": "Toll roads", "fullDescription": "Bridge and Road Fees, Tolls" }, { "mcc": "4785", "shortDescription": "Miscellaneous", "fullDescription": "Miscellaneous" }, { "mcc": "4789", "shortDescription": "Railway", "fullDescription": "Transportation Services" }, { "mcc": "4812", "shortDescription": "Telecommunication equipment", "fullDescription": "Telecommunication Equipment Including Telephone Sales" }, { "mcc": "4813", "shortDescription": "Retail outlets with telephony", "fullDescription": "Key-Entry Telecom Merchant providing single local and long-distance phone calls using a central access number in a non-face-to-face environment using key entry" }, { "mcc": "4814", "shortDescription": "Mobile connection", "fullDescription": "Telecommunication Services" }, { "mcc": "4815", "shortDescription": "Telephone services", "fullDescription": "Telephone services" }, { "mcc": "4816", "shortDescription": "Information Services", "fullDescription": "Computer Network/Information Services" }, { "mcc": "4821", "shortDescription": "Telegraph", "fullDescription": "Telegraph Services" }, { "mcc": "4829", "shortDescription": "Money transfer", "fullDescription": "Wire Transfer Money Orders / Money Transfer" }, { "mcc": "4899", "shortDescription": "The television", "fullDescription": "Cable, Satellite, and Other Pay Television and Radio Services" }, { "mcc": "4900", "shortDescription": "Utilities", "fullDescription": "Utilities - Electric, Gas, Heating Oil, Sanitary, Water" }, { "mcc": "5013", "shortDescription": "Auto Parts", "fullDescription": "Motor Vehicle Supplies and New Parts" }, { "mcc": "5021", "shortDescription": "Furniture", "fullDescription": "Office and Commercial Furniture" }, { "mcc": "5039", "shortDescription": "Building materials", "fullDescription": "Construction Materials" }, { "mcc": "5044", "shortDescription": "Office equipment", "fullDescription": "Office, Photographic, Photocopy and Microfilm Equipment" }, { "mcc": "5045", "shortDescription": "Computers and software", "fullDescription": "Computers, Computer Peripheral Equipment, Software" }, { "mcc": "5046", "shortDescription": "Equipment", "fullDescription": "Commercial Equipment" }, { "mcc": "5047", "shortDescription": "Medical equipment", "fullDescription": "Dental / Laboratory / Medical / Ophthalmic Hospital Equipment and Supplies" }, { "mcc": "5051", "shortDescription": "Metal processing", "fullDescription": "Metal Service Centers and Offices" }, { "mcc": "5065", "shortDescription": "Electronics", "fullDescription": "Electrical Parts and Equipment" }, { "mcc": "5072", "shortDescription": "Equipment", "fullDescription": "Hardware Equipment and Supplies" }, { "mcc": "5074", "shortDescription": "Plumbing", "fullDescription": "Plumbing and Heating Equipment" }, { "mcc": "5085", "shortDescription": "Industry", "fullDescription": "Industrial Supplies" }, { "mcc": "5094", "shortDescription": "Jewelry", "fullDescription": "Precious Stones and Metals, Watches and Jewelry" }, { "mcc": "5099", "shortDescription": "Goods", "fullDescription": "Durable Goods" }, { "mcc": "5111", "shortDescription": "Chancery", "fullDescription": "Stationery, Office Supplies, Printing and Writing Paper" }, { "mcc": "5122", "shortDescription": "Drugs", "fullDescription": "Drugs, Drug Proprietors and Druggists Sundries" }, { "mcc": "5131", "shortDescription": "Haberdashery", "fullDescription": "Piece Goods, Notions, and Other Dry Goods" }, { "mcc": "5137", "shortDescription": "Clothing", "fullDescription": "Men’s, Women’s and Children’s Uniforms and Commercial Clothing" }, { "mcc": "5139", "shortDescription": "Footwear", "fullDescription": "Commercial Footware" }, { "mcc": "5169", "shortDescription": "Chemicals", "fullDescription": "Chemicals and Allied Products" }, { "mcc": "5172", "shortDescription": "Petroleum", "fullDescription": "Petroleum and Petroleum Products" }, { "mcc": "5192", "shortDescription": "Books. Press", "fullDescription": "Books, Periodicals and Newspapers" }, { "mcc": "5193", "shortDescription": "Flowers", "fullDescription": "Florists Supplies, Nursery Stock and Flowers" }, { "mcc": "5198", "shortDescription": "Paints", "fullDescription": "Paints, Varnishes and Supplies" }, { "mcc": "5199", "shortDescription": "Goods", "fullDescription": "Non-Durable Goods" }, { "mcc": "5200", "shortDescription": "Household products", "fullDescription": "Home Supply Warehouse Stores" }, { "mcc": "5211", "shortDescription": "Building materials", "fullDescription": "Building Materials, Lumber Stores" }, { "mcc": "5231", "shortDescription": "Renovation", "fullDescription": "Glass, Paint, Wallpaper Stores" }, { "mcc": "5251", "shortDescription": "Hardware Stores", "fullDescription": "Hardware Stores" }, { "mcc": "5261", "shortDescription": "Garden accessories", "fullDescription": "Lawn and Garden Supply Stores" }, { "mcc": "5262", "shortDescription": "Marketplaces", "fullDescription": "Marketplaces" }, { "mcc": "5271", "shortDescription": "Mobile homes", "fullDescription": "Mobile Home Dealers" }, { "mcc": "5292", "shortDescription": "Miscellaneous", "fullDescription": "Miscellaneous" }, { "mcc": "5295", "shortDescription": "Miscellaneous", "fullDescription": "Miscellaneous" }, { "mcc": "5297", "shortDescription": "Retail stores", "fullDescription": "Online retail stores" }, { "mcc": "5298", "shortDescription": "Retail stores", "fullDescription": "Internet Shopping Grocery Store" }, { "mcc": "5299", "shortDescription": "Gas sales", "fullDescription": "Warehouse Club Gas" }, { "mcc": "5300", "shortDescription": "Wholesalers", "fullDescription": "Wholesale Clubs" }, { "mcc": "5309", "shortDescription": "Duty Free", "fullDescription": "Duty Free Stores" }, { "mcc": "5310", "shortDescription": "Discounters", "fullDescription": "Discount Stores" }, { "mcc": "5311", "shortDescription": "Department stores", "fullDescription": "Department Stores" }, { "mcc": "5331", "shortDescription": "Variety stores", "fullDescription": "Variety Stores" }, { "mcc": "5399", "shortDescription": "Merchandise stores", "fullDescription": "Miscellaneous General Merchandise Stores" }, { "mcc": "5411", "shortDescription": "Grocery", "fullDescription": "Grocery Stores, Supermarkets" }, { "mcc": "5415", "shortDescription": "Miscellaneous", "fullDescription": "Miscellaneous" }, { "mcc": "5422", "shortDescription": "Meat", "fullDescription": "Freezer and Locker Meat Provisioners" }, { "mcc": "5441", "shortDescription": "Sweets", "fullDescription": "Candy, Nut and Confectionery Stores" }, { "mcc": "5451", "shortDescription": "Farm goods", "fullDescription": "Dairy Products Stores" }, { "mcc": "5462", "shortDescription": "Bakeries", "fullDescription": "Bakeries" }, { "mcc": "5499", "shortDescription": "Food stores", "fullDescription": "Miscellaneous Food Stores - Convenience Stores, Markets, Specialty Stores, and Vending Machines" }, { "mcc": "5511", "shortDescription": "Car dealerships", "fullDescription": "Automobile and Truck Dealers - Sales, Service, Repairs, Parts and Leasing" }, { "mcc": "5521", "shortDescription": "Car dealerships", "fullDescription": "Automobile and Truck Dealers-(Used Only)-Sales" }, { "mcc": "5531", "shortDescription": "Auto parts", "fullDescription": "Auto shops and household goods" }, { "mcc": "5532", "shortDescription": "Tires", "fullDescription": "Automotive Tire Stores" }, { "mcc": "5533", "shortDescription": "Auto shops", "fullDescription": "Automotive Parts and Accessories Stores" }, { "mcc": "5541", "shortDescription": "Service Stations", "fullDescription": "Service Stations (With or Without Ancillary Services)" }, { "mcc": "5542", "shortDescription": "Gas station", "fullDescription": "Fuel Dispenser, Automated" }, { "mcc": "5551", "shortDescription": "Boats", "fullDescription": "Boat Dealers" }, { "mcc": "5552", "shortDescription": "Charging stations", "fullDescription": "Electric car charging stations" }, { "mcc": "5561", "shortDescription": "Car dealerships", "fullDescription": "Camper Dealers, Recreational and Utility Trailers" }, { "mcc": "5571", "shortDescription": "Car dealerships", "fullDescription": "Motorcycle Shops and Dealers" }, { "mcc": "5592", "shortDescription": "Car dealerships", "fullDescription": "Motor Home Dealers" }, { "mcc": "5598", "shortDescription": "Car dealerships", "fullDescription": "Snowmobile Dealers" }, { "mcc": "5599", "shortDescription": "Car dealerships", "fullDescription": "Miscellaneous Automotive, Aircraft, and Farm Equipment Dealers" }, { "mcc": "5611", "shortDescription": "Mens clothing", "fullDescription": "Men’s and Boys’ Clothing and Accessories Stores" }, { "mcc": "5621", "shortDescription": "Womens clothing", "fullDescription": "Women’s Ready to Wear Stores" }, { "mcc": "5631", "shortDescription": "Clothing stores", "fullDescription": "Women’s Accessory and Specialty Stores" }, { "mcc": "5641", "shortDescription": "Baby clothes", "fullDescription": "Children’s and Infants’ Wear Stores" }, { "mcc": "5651", "shortDescription": "Clothes", "fullDescription": "Family Clothing Stores" }, { "mcc": "5655", "shortDescription": "Sportswear", "fullDescription": "Sports Apparel, and Riding Apparel Stores" }, { "mcc": "5661", "shortDescription": "Shoes", "fullDescription": "Shoe Stores" }, { "mcc": "5681", "shortDescription": "Fur", "fullDescription": "Furriers and Fur Shops" }, { "mcc": "5691", "shortDescription": "Clothes", "fullDescription": "Men’s and Women’s Clothing Stores" }, { "mcc": "5697", "shortDescription": "Atelier", "fullDescription": "Alterations, Mending, Seamstresses, Tailors" }, { "mcc": "5698", "shortDescription": "Wigs", "fullDescription": "Wig and Toupee Shops" }, { "mcc": "5699", "shortDescription": "Accessories", "fullDescription": "Accessory and Apparel Stores - Miscellaneous" }, { "mcc": "5712", "shortDescription": "Furniture", "fullDescription": "Equipment, Furniture and Home Furnishings Stores (except Appliances)" }, { "mcc": "5713", "shortDescription": "Floor coverings", "fullDescription": "Floor Covering Stores" }, { "mcc": "5714", "shortDescription": "Curtains", "fullDescription": "Drapery, Upholstery and Window Coverings Stores" }, { "mcc": "5715", "shortDescription": "Alcohol", "fullDescription": "Wholesalers of alcohol" }, { "mcc": "5718", "shortDescription": "Fireplaces", "fullDescription": "Fireplace, Fireplace Screens and Accessories Stores" }, { "mcc": "5719", "shortDescription": "Furniture", "fullDescription": "Miscellaneous House Furnishing Specialty Shops" }, { "mcc": "5722", "shortDescription": "Household appliance", "fullDescription": "Household Appliance Stores" }, { "mcc": "5732", "shortDescription": "Household appliance", "fullDescription": "Electronics Sales" }, { "mcc": "5733", "shortDescription": "Musical Instruments", "fullDescription": "Music Stores - Musical Instruments, Pianos and Sheet Music" }, { "mcc": "5734", "shortDescription": "Computer Software", "fullDescription": "Computer Software Stores" }, { "mcc": "5735", "shortDescription": "Record Shops", "fullDescription": "Record Shops" }, { "mcc": "5811", "shortDescription": "Caterers", "fullDescription": "Caterers" }, { "mcc": "5812", "shortDescription": "Cafe. Restaurants", "fullDescription": "Eating Places and Restaurants " }, { "mcc": "5813", "shortDescription": "Bars", "fullDescription": "Bars, Cocktail Lounges, Discotheques, Nightclubs and Taverns-Drinking Places (Alcoholic Beverages)" }, { "mcc": "5814", "shortDescription": "Fast Food", "fullDescription": "Fast Food Restaurants" }, { "mcc": "5815", "shortDescription": "Digital Goods", "fullDescription": "Digital Goods: Books, Movies, Music" }, { "mcc": "5816", "shortDescription": "Games", "fullDescription": "Digital Goods: Games" }, { "mcc": "5817", "shortDescription": "Applications", "fullDescription": "Digital Goods: Applications (Excludes Games)" }, { "mcc": "5818", "shortDescription": "Digital Goods", "fullDescription": "Digital Goods: Large Digital Goods Merchant / Digital Goods: Multi-Category" }, { "mcc": "5832", "shortDescription": "Antiques", "fullDescription": "Antique Shops - Sales, Repairs, and Restoration Services" }, { "mcc": "5912", "shortDescription": "Drug Stores", "fullDescription": "Drug Stores and Pharmacies" }, { "mcc": "5921", "shortDescription": "Alcohol", "fullDescription": "Package Stores - Beer, Wine and Liquor" }, { "mcc": "5931", "shortDescription": "Second Hand", "fullDescription": "Second Hand Stores, Used Merchandise Stores" }, { "mcc": "5932", "shortDescription": "Antiques", "fullDescription": "Antique Shops-Sales, Repairs and Restoration Services" }, { "mcc": "5933", "shortDescription": "Pawn Shops", "fullDescription": "Pawn Shops" }, { "mcc": "5935", "shortDescription": "Car dump", "fullDescription": "Wrecking and Salvage Yards" }, { "mcc": "5937", "shortDescription": "Reproduction Stores", "fullDescription": "Antique Reproduction Stores" }, { "mcc": "5940", "shortDescription": "Bicycles", "fullDescription": "Bicycle Shops-Sales and Service" }, { "mcc": "5941", "shortDescription": "Sports goods", "fullDescription": "Sporting Goods Stores" }, { "mcc": "5942", "shortDescription": "Book Stores", "fullDescription": "Book Stores" }, { "mcc": "5943", "shortDescription": "Stationery", "fullDescription": "Office, School Supply and Stationery Stores" }, { "mcc": "5944", "shortDescription": "Clock", "fullDescription": "Clock, Jewelry, Watch and Silverware Stores" }, { "mcc": "5945", "shortDescription": "Toys", "fullDescription": "Game, Toy and Hobby Shops" }, { "mcc": "5946", "shortDescription": "Photo goods", "fullDescription": "Camera and Photographic Supply Stores" }, { "mcc": "5947", "shortDescription": "Souvenirs", "fullDescription": "Card, Gift, Novelty and Souvenir Shops" }, { "mcc": "5948", "shortDescription": "Leather Products", "fullDescription": "Leather Goods and Luggage Stores" }, { "mcc": "5949", "shortDescription": "Sewing supplies", "fullDescription": "Fabric, Needlework, Piece Goods and Sewing Stores" }, { "mcc": "5950", "shortDescription": "Crystal / glassware", "fullDescription": "Crystal and Glassware Stores" }, { "mcc": "5960", "shortDescription": "Insurance", "fullDescription": "Direct Marketing Insurance Services" }, { "mcc": "5961", "shortDescription": "Goods by mail", "fullDescription": "Mail Order Houses Including Catalog Order Stores" }, { "mcc": "5962", "shortDescription": "Travels", "fullDescription": "Direct Marketing - Travel Related Arrangement Services" }, { "mcc": "5963", "shortDescription": "Salesmen", "fullDescription": "Door-to-Door Sales" }, { "mcc": "5964", "shortDescription": "Goods by mail", "fullDescription": "Direct Marketing-Catalog Merchants" }, { "mcc": "5965", "shortDescription": "Goods by mail", "fullDescription": "Direct Marketing - Combination Catalog and Retail Merchant" }, { "mcc": "5966", "shortDescription": "Goods by mail", "fullDescription": "Direct Marketing - Outbound Telemarketing Merchants" }, { "mcc": "5967", "shortDescription": "Information Services", "fullDescription": "Direct Marketing - Inbound Telemarketing Merchants" }, { "mcc": "5968", "shortDescription": "Subscriptions", "fullDescription": "Direct Marketing - Continuity / Subscription Merchants" }, { "mcc": "5969", "shortDescription": "Goods by mail", "fullDescription": "Direct Marketing - Other Direct Marketers" }, { "mcc": "5970", "shortDescription": "Art goods", "fullDescription": "Artist Supply Stores, Craft Shops" }, { "mcc": "5971", "shortDescription": "Galleries", "fullDescription": "Art Dealers and Galleries" }, { "mcc": "5972", "shortDescription": "Philatelicism", "fullDescription": "Stamp and Coin Stores - Philatelic and Numismatic Supplies" }, { "mcc": "5973", "shortDescription": "Church shops", "fullDescription": "Religious Goods Stores" }, { "mcc": "5974", "shortDescription": "Rubber stamp", "fullDescription": "Rubber Stamp Store" }, { "mcc": "5975", "shortDescription": "Hearing Aids", "fullDescription": "Hearing Aids - Sales, Service, Supply Stores" }, { "mcc": "5976", "shortDescription": "Prostheses", "fullDescription": "Orthopedic Goods - Artificial Limb Stores" }, { "mcc": "5977", "shortDescription": "Cosmetics", "fullDescription": "Cosmetic Stores" }, { "mcc": "5978", "shortDescription": "Printing machines", "fullDescription": "Typewriter Stores - Rentals, Sales, Service" }, { "mcc": "5983", "shortDescription": "Fuel", "fullDescription": "Fuel Dealers - Coal, Fuel Oil, Liquefied Petroleum, Wood" }, { "mcc": "5992", "shortDescription": "Florists", "fullDescription": "Florists" }, { "mcc": "5993", "shortDescription": "Tobacco products", "fullDescription": "Cigar Stores and Stands" }, { "mcc": "5994", "shortDescription": "Newspapers. Magazines", "fullDescription": "News Dealers and Newsstands" }, { "mcc": "5995", "shortDescription": "Pet supplies", "fullDescription": "Pet Shops, Pet Food and Supplies" }, { "mcc": "5996", "shortDescription": "Swimming Pools", "fullDescription": "Swimming Pools - Sales and Supplies" }, { "mcc": "5997", "shortDescription": "Razors", "fullDescription": "Electric Razor Stores - Sales and Service" }, { "mcc": "5998", "shortDescription": "Tents", "fullDescription": "Tent and Awning Shops" }, { "mcc": "5999", "shortDescription": "Miscellaneous", "fullDescription": "Miscellaneous and Specialty Retail Stores" }, { "mcc": "6010", "shortDescription": "Сashier's office", "fullDescription": "Member Financial Institution - Manual Cash Disbursements" }, { "mcc": "6011", "shortDescription": "Сashier's office", "fullDescription": "Member Financial Institution - Automated Cash Disbursements" }, { "mcc": "6012", "shortDescription": "Financial services", "fullDescription": "Member Financial Institution - Merchandise And Services" }, { "mcc": "6022", "shortDescription": "Banks", "fullDescription": "Financial Institution (internal RCL)" }, { "mcc": "6023", "shortDescription": "Banks", "fullDescription": "State Banks (RCL Internal)" }, { "mcc": "6025", "shortDescription": "Banks", "fullDescription": "National Banks (RCL Internal)" }, { "mcc": "6026", "shortDescription": "Banks", "fullDescription": "National Banks Non Federal (RCL Internal)" }, { "mcc": "6028", "shortDescription": "Banks", "fullDescription": "Unincorporated Private Banks (RCL Internal)" }, { "mcc": "6050", "shortDescription": "Quasi Cash", "fullDescription": "Quasi Cash - Member Financial Institution" }, { "mcc": "6051", "shortDescription": "Quasi Cash", "fullDescription": "Quasi Cash - Merchant" }, { "mcc": "6211", "shortDescription": "Securities", "fullDescription": "Securities - Brokers and Dealers" }, { "mcc": "6236", "shortDescription": "Securities", "fullDescription": "Aserca Airlines / Aero Servicio Carabobo (Venezuela)" }, { "mcc": "6300", "shortDescription": "Insurance", "fullDescription": "Insurance Sales, Underwriting and Premiums" }, { "mcc": "6381", "shortDescription": "Insurance", "fullDescription": "Insurance - Premiums" }, { "mcc": "6399", "shortDescription": "Insurance", "fullDescription": "Insurance" }, { "mcc": "6513", "shortDescription": "Rental Property", "fullDescription": "Real Estate Agents and Managers - Rentals" }, { "mcc": "6529", "shortDescription": "Сard replenishment", "fullDescription": "Remote Stored Value Load - Member Financial Institution" }, { "mcc": "6530", "shortDescription": "Сard replenishment", "fullDescription": "Remove Stored Value Load - Merchant" }, { "mcc": "6531", "shortDescription": "Money transfer", "fullDescription": "Payment for services - money transfers" }, { "mcc": "6532", "shortDescription": "Money transfer", "fullDescription": "Payment Transaction - Financial Institution" }, { "mcc": "6533", "shortDescription": "Money transfer", "fullDescription": "Payment operation - seller" }, { "mcc": "6534", "shortDescription": "Money transfer", "fullDescription": "Money Transfer - Financial Institution" }, { "mcc": "6535", "shortDescription": "Money transfer", "fullDescription": "Value Purchase - Member Financial Institution" }, { "mcc": "6536", "shortDescription": "Money transfer", "fullDescription": "MoneySend Intracountry" }, { "mcc": "6537", "shortDescription": "Money transfer", "fullDescription": "MoneySend Intercountry" }, { "mcc": "6538", "shortDescription": "Money transfer", "fullDescription": "MoneySend Funding" }, { "mcc": "6539", "shortDescription": "Money transfer", "fullDescription": "Funding Transaction (Excluding MoneySend)" }, { "mcc": "6540", "shortDescription": "Money transfer", "fullDescription": "POI (Point of Interaction) Funding Transactions (Excluding MoneySend)" }, { "mcc": "6611", "shortDescription": "Money transfer", "fullDescription": "Overpayments" }, { "mcc": "6760", "shortDescription": "Bonds", "fullDescription": "Savings Bonds" }, { "mcc": "7011", "shortDescription": "Hotels and resorts", "fullDescription": "Hotels and resorts" }, { "mcc": "7012", "shortDescription": "Timeshares", "fullDescription": "Timeshares" }, { "mcc": "7032", "shortDescription": "Recreation", "fullDescription": "Sporting and Recreational Camps" }, { "mcc": "7033", "shortDescription": "Campgrounds", "fullDescription": "Campgrounds and Trailer Parks" }, { "mcc": "7210", "shortDescription": "Cleaning", "fullDescription": "Cleaning, Garment and Laundry Services" }, { "mcc": "7211", "shortDescription": "Laundry", "fullDescription": "Laundry Services - Family and Commercial" }, { "mcc": "7216", "shortDescription": "Dry Cleaners", "fullDescription": "Dry Cleaners" }, { "mcc": "7217", "shortDescription": "Cleaning", "fullDescription": "Carpet and Upholstery Cleaning" }, { "mcc": "7221", "shortDescription": "Photographic Studios", "fullDescription": "Photographic Studios" }, { "mcc": "7230", "shortDescription": "The beauty", "fullDescription": "Barber and Beauty Shops" }, { "mcc": "7251", "shortDescription": "Clothing repair", "fullDescription": "Hat Cleaning Shops, Shoe Repair Shops, Shoe Shine Parlors" }, { "mcc": "7261", "shortDescription": "Funeral services", "fullDescription": "Funeral Service and Crematories" }, { "mcc": "7272", "shortDescription": "Escort", "fullDescription": "Escort Services" }, { "mcc": "7273", "shortDescription": "Dating. Escort", "fullDescription": "Dating Services" }, { "mcc": "7276", "shortDescription": "Taxes", "fullDescription": "Tax Preparation Service" }, { "mcc": "7277", "shortDescription": "Consultation", "fullDescription": "Debt, Marriage, Personal - Counseling Services" }, { "mcc": "7278", "shortDescription": "Shopping", "fullDescription": "Buying / Shopping Clubs, Services" }, { "mcc": "7280", "shortDescription": "Hospitals", "fullDescription": "Hospital Patient - Personal Funds Withdrawal" }, { "mcc": "7295", "shortDescription": "Babysitters", "fullDescription": "Babysitting Services" }, { "mcc": "7296", "shortDescription": "Clothing rental", "fullDescription": "Clothing Rental - Costumes, Uniforms and Formal Wear" }, { "mcc": "7297", "shortDescription": "Massage", "fullDescription": "Massage Parlors" }, { "mcc": "7298", "shortDescription": "Health and beauty", "fullDescription": "Health and Beauty Spas" }, { "mcc": "7299", "shortDescription": "Miscellaneous", "fullDescription": "Other Services" }, { "mcc": "7311", "shortDescription": "Advertising", "fullDescription": "Advertising Services" }, { "mcc": "7321", "shortDescription": "Credit bureaus", "fullDescription": "Consumer Credit Reporting Agencies" }, { "mcc": "7322", "shortDescription": "Collection agencies", "fullDescription": "Debt collection agencies" }, { "mcc": "7332", "shortDescription": "Copy centers", "fullDescription": "Blueprinting and Photocopying Services" }, { "mcc": "7333", "shortDescription": "Photography and art", "fullDescription": "Commercial Art, Graphics, Photography" }, { "mcc": "7338", "shortDescription": "Copy centers", "fullDescription": "Quick Copy, Reproduction and Blueprinting Services" }, { "mcc": "7339", "shortDescription": "Stenography", "fullDescription": "Stenographic and Secretarial Support Services" }, { "mcc": "7342", "shortDescription": "Disinfecting", "fullDescription": "Exterminating and Disinfecting Services" }, { "mcc": "7349", "shortDescription": "Cleaning and maintenance", "fullDescription": "Cleaning and Maintenance, Janitorial Services" }, { "mcc": "7361", "shortDescription": "Employment", "fullDescription": "Employment Agencies and Temporary Help Services" }, { "mcc": "7372", "shortDescription": "Programming", "fullDescription": "Computer Programming, Data Processing and Integrated System Design Services" }, { "mcc": "7375", "shortDescription": "Information Services", "fullDescription": "Information Retrieval Services" }, { "mcc": "7379", "shortDescription": "Computer Repair", "fullDescription": "Computer Maintenance, Repair And Services" }, { "mcc": "7389", "shortDescription": "Business Services", "fullDescription": "Business Services" }, { "mcc": "7392", "shortDescription": "Consulting, PR", "fullDescription": "Consulting, Management and Public Relations Services" }, { "mcc": "7393", "shortDescription": "Detective agencies", "fullDescription": "Detective Agencies, Protective Agencies, Security Services including Armored Cars, Guard Dogs" }, { "mcc": "7394", "shortDescription": "Equipment rental", "fullDescription": "Equipment Rental and Leasing Services, Furniture Rental, Tool Rental" }, { "mcc": "7395", "shortDescription": "Photo printing", "fullDescription": "Photo Developing, Photofinishing Laboratories" }, { "mcc": "7399", "shortDescription": "Business Services", "fullDescription": "Business Services" }, { "mcc": "7511", "shortDescription": "Parking", "fullDescription": "Truck parking" }, { "mcc": "7512", "shortDescription": "Car rent", "fullDescription": "Automobile Rental Agency" }, { "mcc": "7513", "shortDescription": "Truck Rental", "fullDescription": "Truck Rental" }, { "mcc": "7519", "shortDescription": "Car rent", "fullDescription": "Motor Home and Recreational Vehicle Rental" }, { "mcc": "7523", "shortDescription": "Parking", "fullDescription": "Automobile Parking Lots and Garages" }, { "mcc": "7524", "shortDescription": "Parking", "fullDescription": "Express Payment Service Merchants - Parking Lots and Garages" }, { "mcc": "7531", "shortDescription": "Auto repair", "fullDescription": "Automotive Body Repair Shops" }, { "mcc": "7534", "shortDescription": "Tire service", "fullDescription": "Tire Retreading and Repair Shops" }, { "mcc": "7535", "shortDescription": "Car paints", "fullDescription": "Automotive Paint Shops" }, { "mcc": "7538", "shortDescription": "Maintenance stations", "fullDescription": "Automotive Service Shops" }, { "mcc": "7542", "shortDescription": "Car Washes", "fullDescription": "Car Washes" }, { "mcc": "7549", "shortDescription": "Tow truck", "fullDescription": "Towing Services" }, { "mcc": "7622", "shortDescription": "Repair of equipment", "fullDescription": "Electronic Repair Shops" }, { "mcc": "7623", "shortDescription": "HVAC equipment repair", "fullDescription": "Air Conditioning and Refrigeration Repair Shops" }, { "mcc": "7629", "shortDescription": "Repair of equipment", "fullDescription": "Appliance Repair Shops, Electrical and Small " }, { "mcc": "7631", "shortDescription": "Repair of watches and jewelry", "fullDescription": "Clock, Jewelry and Watch Repair Shops" }, { "mcc": "7641", "shortDescription": "Furniture repair", "fullDescription": "Furniture - Reupholstery, Repair and Refinishing" }, { "mcc": "7692", "shortDescription": "Welding works", "fullDescription": "Welding Repair" }, { "mcc": "7699", "shortDescription": "Repairs", "fullDescription": "Miscellaneous Repair Shops and Related Services" }, { "mcc": "7800", "shortDescription": "Government Owned Lottery", "fullDescription": "Government Owned Lottery" }, { "mcc": "7801", "shortDescription": "Online casino", "fullDescription": "Government-Licensed Casinos (Online or Internet Gambling)" }, { "mcc": "7802", "shortDescription": "Horse / Dog racing", "fullDescription": "Government-Licensed Horse / Dog Racing" }, { "mcc": "7829", "shortDescription": "Video rental", "fullDescription": "Motion Picture and Video Tape Production and Distribution" }, { "mcc": "7832", "shortDescription": "Cinemas", "fullDescription": "Motion Picture Theaters" }, { "mcc": "7833", "shortDescription": "Cinemas", "fullDescription": "Express Payment Service — Motion Picture Theater" }, { "mcc": "7841", "shortDescription": "Video rental", "fullDescription": "DVD/Video Tape Rental Stores" }, { "mcc": "7911", "shortDescription": "Dance studios. Dance schools", "fullDescription": "Dance Halls, Schools and Studios" }, { "mcc": "7922", "shortDescription": "Tickets", "fullDescription": "Theatrical Producers (Except Motion Pictures), Ticket Agencies" }, { "mcc": "7929", "shortDescription": "Music bands. Orchestras", "fullDescription": "Bands, Orchestras and Miscellaneous Entertainers" }, { "mcc": "7932", "shortDescription": "Billiard", "fullDescription": "Pool and Billiard Establishments" }, { "mcc": "7933", "shortDescription": "Bowling clubs", "fullDescription": "Bowling Alleys" }, { "mcc": "7941", "shortDescription": "Sports clubs", "fullDescription": "Athletic Fields, Commercial Sports, Professional Sports Clubs, Sports Promoters" }, { "mcc": "7991", "shortDescription": "Tourism", "fullDescription": "Tourist Attractions and Exhibits" }, { "mcc": "7992", "shortDescription": "Golf", "fullDescription": "Golf Courses, Public" }, { "mcc": "7993", "shortDescription": "Videogames", "fullDescription": "Video Amusement Game Supplies" }, { "mcc": "7994", "shortDescription": "Videogames", "fullDescription": "Video Game Arcades and Establishments" }, { "mcc": "7995", "shortDescription": "Gambling", "fullDescription": "Gambling Transactions, Betting" }, { "mcc": "7996", "shortDescription": "Entertainment", "fullDescription": "Amusement Parks, Carnivals, Circuses, Fortune Tellers" }, { "mcc": "7997", "shortDescription": "Entertainment and sport", "fullDescription": "Clubs-Country Clubs, Membership (Athletic, Recreation, Sports), Private Golf Courses" }, { "mcc": "7998", "shortDescription": "Aquariums. Dolphinariums", "fullDescription": "Aquariums, Dolphinariums, Zoos and Seaquariums" }, { "mcc": "7999", "shortDescription": "Entertainment and sport", "fullDescription": "Recreation Services" }, { "mcc": "8011", "shortDescription": "Medicine", "fullDescription": "Doctors" }, { "mcc": "8021", "shortDescription": "Dentistry", "fullDescription": "Dentists and Orthodontists" }, { "mcc": "8031", "shortDescription": "Medicine", "fullDescription": "Osteopathic Physicians" }, { "mcc": "8041", "shortDescription": "Chiropractors", "fullDescription": "Chiropractors" }, { "mcc": "8042", "shortDescription": "Optics", "fullDescription": "Optometrists and Ophthalmologists" }, { "mcc": "8043", "shortDescription": "Optics", "fullDescription": "Opticians, Optical Goods and Eyeglasses" }, { "mcc": "8044", "shortDescription": "Optics", "fullDescription": "Optical Goods and Eyeglasses" }, { "mcc": "8049", "shortDescription": "Podiatrists", "fullDescription": "Chiropodists, Podiatrists" }, { "mcc": "8050", "shortDescription": "Caregiver / Nurse", "fullDescription": "Nursing and Personal Care Facilities" }, { "mcc": "8062", "shortDescription": "Hospitals", "fullDescription": "Hospitals" }, { "mcc": "8071", "shortDescription": "Medicine and dentistry", "fullDescription": "Dental and Medical Laboratories" }, { "mcc": "8099", "shortDescription": "Medical services", "fullDescription": "Health Practitioners, Medical Services" }, { "mcc": "8110", "shortDescription": "Lawyers", "fullDescription": "Attorneys, Legal Services" }, { "mcc": "8111", "shortDescription": "Lawyers", "fullDescription": "Attorneys, Legal Services" }, { "mcc": "8211", "shortDescription": "School", "fullDescription": "Schools, Elementary and Secondary" }, { "mcc": "8220", "shortDescription": "Education. University", "fullDescription": "Colleges, Universities, Professional Schools and Junior Colleges" }, { "mcc": "8241", "shortDescription": "Schools, Correspondence", "fullDescription": "Schools, Correspondence" }, { "mcc": "8244", "shortDescription": "Education. Business", "fullDescription": "Schools, Business and Secretarial " }, { "mcc": "8249", "shortDescription": "Education", "fullDescription": "Schools, Trade and Vocational" }, { "mcc": "8299", "shortDescription": "Education", "fullDescription": "Schools And Educational Services" }, { "mcc": "8351", "shortDescription": "Kindergarten", "fullDescription": "Child Care Services" }, { "mcc": "8398", "shortDescription": "Charity", "fullDescription": "Organizations, Charitable and Social Service" }, { "mcc": "8641", "shortDescription": "Public organizations", "fullDescription": "Associations - Civic, Social and Fraternal" }, { "mcc": "8651", "shortDescription": "Organizations, Political", "fullDescription": "Organizations, Political" }, { "mcc": "8661", "shortDescription": "Organizations, Religious", "fullDescription": "Organizations, Religious" }, { "mcc": "8664", "shortDescription": "Miscellaneous", "fullDescription": "Miscellaneous" }, { "mcc": "8675", "shortDescription": "Autoclub", "fullDescription": "Automobile Associations" }, { "mcc": "8699", "shortDescription": "Organizations, Membership", "fullDescription": "Organizations, Membership" }, { "mcc": "8734", "shortDescription": "Testing laboratories", "fullDescription": "Testing Laboratories (Non-Medical)" }, { "mcc": "8743", "shortDescription": "Testing laboratories", "fullDescription": "Testing Laboratories (Non-Medical)" }, { "mcc": "8911", "shortDescription": "Architects", "fullDescription": "Architectural, Engineering and Surveying Services" }, { "mcc": "8931", "shortDescription": "Accounting. Audit", "fullDescription": "Accounting, Auditing and Bookkeeping Services" }, { "mcc": "8999", "shortDescription": "Professional services", "fullDescription": "Professional services" }, { "mcc": "9034", "shortDescription": "I-Purchasing Pilot", "fullDescription": "I-Purchasing Pilot" }, { "mcc": "9211", "shortDescription": "Court", "fullDescription": "Court Costs Including Alimony and Child Support" }, { "mcc": "9222", "shortDescription": "Fines", "fullDescription": "Fines" }, { "mcc": "9223", "shortDescription": "Payouts. Bonds", "fullDescription": "Bail and Bond Payments" }, { "mcc": "9311", "shortDescription": "Taxes", "fullDescription": "Tax Payments" }, { "mcc": "9399", "shortDescription": "Government Services", "fullDescription": "Government Services" }, { "mcc": "9401", "shortDescription": "I-Purchasing Pilot", "fullDescription": "I-Purchasing Pilot" }, { "mcc": "9402", "shortDescription": "Mail", "fullDescription": "Postal Services - Government Only" }, { "mcc": "9405", "shortDescription": "Government procurement", "fullDescription": "Intra-Government Purchases - Government Only" }, { "mcc": "9406", "shortDescription": "Government Owned Lottery", "fullDescription": "Government Owned Lottery" }, { "mcc": "9411", "shortDescription": "Government Services", "fullDescription": "Government loan payments" }, { "mcc": "9700", "shortDescription": "Cashback", "fullDescription": "Automated Referral Service" }, { "mcc": "9701", "shortDescription": "VISA", "fullDescription": "Visa Credential Server" }, { "mcc": "9702", "shortDescription": "Emergency services", "fullDescription": "GCAS Emergency Services" }, { "mcc": "9751", "shortDescription": "Document flow", "fullDescription": "UK Supermarkets, Electronic Hot File" }, { "mcc": "9752", "shortDescription": "Document flow", "fullDescription": "UK Petrol Stations, Electronic Hot File" }, { "mcc": "9754", "shortDescription": "Horse / Dog racing", "fullDescription": "Government-Licensed Horse / Dog Racing" }, { "mcc": "9950", "shortDescription": "In-company purchases", "fullDescription": "Intra-Company Purchases" }, { "mcc": "9999", "shortDescription": "Miscellaneous", "fullDescription": "Miscellaneous" }];

    const mccDataUK = [{ "mcc": "0742", "shortDescription": "Ветеринарні послуги", "fullDescription": "Ветеринарні послуги" }, { "mcc": "0743", "shortDescription": "Виноробники", "fullDescription": "Виноробники" }, { "mcc": "0744", "shortDescription": "Виробники шампанського", "fullDescription": "Виробники шампанського" }, { "mcc": "0763", "shortDescription": "Сільскогосподарські кооперативи", "fullDescription": "Сільскогосподарські кооперативи" }, { "mcc": "0780", "shortDescription": "Садівництво. Ландшафтний дизайн", "fullDescription": "Послуги садівництва та ландшафтного дизайну" }, { "mcc": "1520", "shortDescription": "Будівництво. Підрядники", "fullDescription": "Генеральні підрядники - житлове та комерційне будівництво" }, { "mcc": "1711", "shortDescription": "Кондиціонери. Встановлення", "fullDescription": "Генеральні підрядники з вентиляції, теплопостачання та водопроводу" }, { "mcc": "1731", "shortDescription": "Електрики", "fullDescription": "Підрядники по електриці" }, { "mcc": "1740", "shortDescription": "Будівники. Облицювання", "fullDescription": "Ізоляція, мозаїка, штукатурні роботи, кам'яна кладка, облицювання плиткою, кахлем" }, { "mcc": "1750", "shortDescription": "Столярні роботи", "fullDescription": "Столярні роботи" }, { "mcc": "1761", "shortDescription": "Будівники. Облицювання", "fullDescription": "Покрівельні і сайдингові роботи, обробка листового металу" }, { "mcc": "1771", "shortDescription": "Будівництво. Бетон", "fullDescription": "Підрядчики бетонних робіт" }, { "mcc": "1799", "shortDescription": "Спеціалізовані підрядники", "fullDescription": "Спеціалізовані підрядники" }, { "mcc": "2741", "shortDescription": "Друкарська справа", "fullDescription": "Різні видавництва / друкарська справа" }, { "mcc": "2744", "shortDescription": "Друкарська справа", "fullDescription": "Різні видавництва / друкарська справа" }, { "mcc": "2791", "shortDescription": "Набір текстів та друк", "fullDescription": "Набір текстів, виготовлення друкованих форм та пов'язані послуги" }, { "mcc": "2842", "shortDescription": "Спеціалізоване прибирання", "fullDescription": "Санітарна обробка, полірування і спеціалізована підготовка" }, { "mcc": "3000", "shortDescription": "Авіалінії", "fullDescription": "Сполучені авіалінії (США)" }, { "mcc": "3001", "shortDescription": "Авіалінії", "fullDescription": "Американські авіалінії (США)" }, { "mcc": "3002", "shortDescription": "Авіалінії", "fullDescription": "Панамериканські світові авіалінії (США)" }, { "mcc": "3003", "shortDescription": "Авіалінії", "fullDescription": "Eurofly" }, { "mcc": "3004", "shortDescription": "Авіалінії", "fullDescription": "Драгон Ейрлайнз" }, { "mcc": "3005", "shortDescription": "Авіалінії", "fullDescription": "British Airways" }, { "mcc": "3006", "shortDescription": "Авіалінії", "fullDescription": "Японські авіалінії" }, { "mcc": "3007", "shortDescription": "Авіалінії", "fullDescription": "Ер Франс" }, { "mcc": "3008", "shortDescription": "Авіалінії", "fullDescription": "Люфтганза" }, { "mcc": "3009", "shortDescription": "Авіалінії", "fullDescription": "Ейр Канада" }, { "mcc": "3010", "shortDescription": "Авіалінії", "fullDescription": "KLM (Королівські Голландські Авіалінії)" }, { "mcc": "3011", "shortDescription": "Авіалінії", "fullDescription": "Аерофлот - Російські авіалінії" }, { "mcc": "3012", "shortDescription": "Авіалінії", "fullDescription": "Квантас" }, { "mcc": "3013", "shortDescription": "Авіалінії", "fullDescription": "Аліталія" }, { "mcc": "3014", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії Саудівської Аравії" }, { "mcc": "3015", "shortDescription": "Авіалінії", "fullDescription": "Швейцарські Міжнародні авіалінії" }, { "mcc": "3016", "shortDescription": "Авіалінії", "fullDescription": "Скандинавська система авіаліній" }, { "mcc": "3017", "shortDescription": "Авіалінії", "fullDescription": "Південноафриканські авіалінії" }, { "mcc": "3018", "shortDescription": "Авіалінії", "fullDescription": "Varig (Бразилія)" }, { "mcc": "3019", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії, авіакомпанії" }, { "mcc": "3020", "shortDescription": "Авіалінії", "fullDescription": "Ейр Індія" }, { "mcc": "3021", "shortDescription": "Авіалінії", "fullDescription": "Ейр Алжир" }, { "mcc": "3022", "shortDescription": "Авіалінії", "fullDescription": "Філіппінські авіалінії" }, { "mcc": "3023", "shortDescription": "Авіалінії", "fullDescription": "Мексиканська Авіація" }, { "mcc": "3024", "shortDescription": "Авіалінії", "fullDescription": "Пакистанські міжнародні авіалінії" }, { "mcc": "3025", "shortDescription": "Авіалінії", "fullDescription": "Air New Zealand Limited International" }, { "mcc": "3026", "shortDescription": "Авіалінії", "fullDescription": "Еміратські авіалінії" }, { "mcc": "3027", "shortDescription": "Авіалінії", "fullDescription": "Союз повітряного транспорту" }, { "mcc": "3028", "shortDescription": "Авіалінії", "fullDescription": "Ейр Мальта" }, { "mcc": "3029", "shortDescription": "Авіалінії", "fullDescription": "SN Брюссельські авіалінії" }, { "mcc": "3030", "shortDescription": "Авіалінії", "fullDescription": "Аргентинські авіалінії" }, { "mcc": "3031", "shortDescription": "Авіалінії", "fullDescription": "Олімпійські авіалінії" }, { "mcc": "3032", "shortDescription": "Авіалінії", "fullDescription": "Ель Аль" }, { "mcc": "3033", "shortDescription": "Авіалінії", "fullDescription": "Ansett Airlines" }, { "mcc": "3034", "shortDescription": "Авіалінії", "fullDescription": "Etihad Airways" }, { "mcc": "3035", "shortDescription": "Авіалінії", "fullDescription": "Tap (Португалія)" }, { "mcc": "3036", "shortDescription": "Авіалінії", "fullDescription": "VASP (Бразилія)" }, { "mcc": "3037", "shortDescription": "Авіалінії", "fullDescription": "EgyptAir" }, { "mcc": "3038", "shortDescription": "Авіалінії", "fullDescription": "Kuwait Airways" }, { "mcc": "3039", "shortDescription": "Авіалінії", "fullDescription": "Avianca" }, { "mcc": "3040", "shortDescription": "Авіалінії", "fullDescription": "Gulf Air (Бахрейн)" }, { "mcc": "3041", "shortDescription": "Авіалінії", "fullDescription": "Балкано-Болгарські авіалінії" }, { "mcc": "3042", "shortDescription": "Авіалінії", "fullDescription": "Finnair" }, { "mcc": "3043", "shortDescription": "Авіалінії", "fullDescription": "Aer Lingus (Ірландія)" }, { "mcc": "3044", "shortDescription": "Авіалінії", "fullDescription": "Ейр Ланка" }, { "mcc": "3045", "shortDescription": "Авіалінії", "fullDescription": "Нігерійські авіалінії" }, { "mcc": "3046", "shortDescription": "Авіалінії", "fullDescription": "Cruzeiro do Sul (Brazil)" }, { "mcc": "3047", "shortDescription": "Авіалінії", "fullDescription": "Турецькі авіалінії" }, { "mcc": "3048", "shortDescription": "Авіалінії", "fullDescription": "Royal Air Maroc" }, { "mcc": "3049", "shortDescription": "Авіалінії", "fullDescription": "Туніс Ейр" }, { "mcc": "3050", "shortDescription": "Авіалінії", "fullDescription": "Icelandair" }, { "mcc": "3051", "shortDescription": "Авіалінії", "fullDescription": "Австрійські авіалінії" }, { "mcc": "3052", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії LATAM Chile Airlines" }, { "mcc": "3053", "shortDescription": "Авіалінії", "fullDescription": "AVIACO (Іспанія)" }, { "mcc": "3054", "shortDescription": "Авіалінії", "fullDescription": "LADECO (Чилі)" }, { "mcc": "3055", "shortDescription": "Авіалінії", "fullDescription": "LAB (Болівія)" }, { "mcc": "3056", "shortDescription": "Авіалінії", "fullDescription": "Реактивні авіалінії (Індія)" }, { "mcc": "3057", "shortDescription": "Авіалінії", "fullDescription": "Virgin America" }, { "mcc": "3058", "shortDescription": "Авіалінії", "fullDescription": "Дельта Ейрлайнз" }, { "mcc": "3059", "shortDescription": "Авіалінії", "fullDescription": "DBA Ейрлайнз" }, { "mcc": "3060", "shortDescription": "Авіалінії", "fullDescription": "Північно-Західні авіалінії (США)" }, { "mcc": "3061", "shortDescription": "Авіалінії", "fullDescription": "Континентальні авіалінії" }, { "mcc": "3062", "shortDescription": "Авіалінії", "fullDescription": "Hapag-Lloyd Express" }, { "mcc": "3063", "shortDescription": "Авіалінії", "fullDescription": "U.S. Airways" }, { "mcc": "3064", "shortDescription": "Авіалінії", "fullDescription": "Adria Airways" }, { "mcc": "3065", "shortDescription": "Авіалінії", "fullDescription": "Ейр Інтер" }, { "mcc": "3066", "shortDescription": "Авіалінії", "fullDescription": "Південно-західні авіалінії (США)" }, { "mcc": "3067", "shortDescription": "Авіалінії", "fullDescription": "Vanguard Airlines (США)" }, { "mcc": "3068", "shortDescription": "Авіалінії", "fullDescription": "Ейр Астана" }, { "mcc": "3069", "shortDescription": "Авіалінії", "fullDescription": "Сан Кантрі Ейрлайнз" }, { "mcc": "3070", "shortDescription": "Авіалінії", "fullDescription": "Pacific Southwest Airlines" }, { "mcc": "3071", "shortDescription": "Авіалінії", "fullDescription": "Ейр Брітіш Колумбія (Канада)" }, { "mcc": "3072", "shortDescription": "Авіалінії", "fullDescription": "Себу Пасіфік (Філіппіни)" }, { "mcc": "3073", "shortDescription": "Авіалінії", "fullDescription": "Ейр Каліфорнія" }, { "mcc": "3074", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3075", "shortDescription": "Авіалінії", "fullDescription": "Сінгапурські авіалінії" }, { "mcc": "3076", "shortDescription": "Авіалінії", "fullDescription": "Aeromexico" }, { "mcc": "3077", "shortDescription": "Авіалінії", "fullDescription": "Тайські міжнародні авіалінії" }, { "mcc": "3078", "shortDescription": "Авіалінії", "fullDescription": "Китайські авіалінії" }, { "mcc": "3079", "shortDescription": "Авіалінії", "fullDescription": "Jetstar Airways (Австралія)" }, { "mcc": "3080", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3081", "shortDescription": "Авіалінії", "fullDescription": "Nordair (Канада)" }, { "mcc": "3082", "shortDescription": "Авіалінії", "fullDescription": "Корейські авіалінії" }, { "mcc": "3083", "shortDescription": "Авіалінії", "fullDescription": "Ейр Африка" }, { "mcc": "3084", "shortDescription": "Авіалінії", "fullDescription": "Eva Airways (Тайвань)" }, { "mcc": "3085", "shortDescription": "Авіалінії", "fullDescription": "Мідвест Експрес Ейрлайнз" }, { "mcc": "3086", "shortDescription": "Авіалінії", "fullDescription": "Carnival Airlines (США)" }, { "mcc": "3087", "shortDescription": "Авіалінії", "fullDescription": "Метро Ейрлайнз" }, { "mcc": "3088", "shortDescription": "Авіалінії", "fullDescription": "Хорватія Ейр" }, { "mcc": "3089", "shortDescription": "Авіалінії", "fullDescription": "Трансаеро (Росія)" }, { "mcc": "3090", "shortDescription": "Авіалінії", "fullDescription": "Uni Airways (Тайвань)" }, { "mcc": "3091", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3092", "shortDescription": "Авіалінії", "fullDescription": "Мідвей Ейрлайнз (США)" }, { "mcc": "3093", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3094", "shortDescription": "Авіалінії", "fullDescription": "Замбійські авіалінії" }, { "mcc": "3095", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3096", "shortDescription": "Авіалінії", "fullDescription": "Ейр Зімбабве" }, { "mcc": "3097", "shortDescription": "Авіалінії", "fullDescription": "Spanair" }, { "mcc": "3098", "shortDescription": "Авіалінії", "fullDescription": "Азіана Ейрлайнз" }, { "mcc": "3099", "shortDescription": "Авіалінії", "fullDescription": "Cathay Pacific (Гонконг)" }, { "mcc": "3100", "shortDescription": "Авіалінії", "fullDescription": "Система малайзійських авіаліній" }, { "mcc": "3101", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3102", "shortDescription": "Авіалінії", "fullDescription": "Іберія (Іспанія)" }, { "mcc": "3103", "shortDescription": "Авіалінії", "fullDescription": "Garuda (Індонезія)" }, { "mcc": "3104", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3105", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3106", "shortDescription": "Авіалінії", "fullDescription": "Braathens S.A.F.E. (Норвегія)" }, { "mcc": "3107", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3108", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3109", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3110", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3111", "shortDescription": "Авіалінії", "fullDescription": "British Midland Airways" }, { "mcc": "3112", "shortDescription": "Авіалінії", "fullDescription": "Навітряний острів" }, { "mcc": "3113", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3114", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3115", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3116", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3117", "shortDescription": "Авіалінії", "fullDescription": "Венесуельська міжнародна авіація" }, { "mcc": "3118", "shortDescription": "Авіалінії", "fullDescription": "Міжнародний аеропорт Валлі" }, { "mcc": "3119", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3120", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3121", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3122", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3123", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3124", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3125", "shortDescription": "Авіалінії", "fullDescription": "Tan Airlines" }, { "mcc": "3126", "shortDescription": "Авіалінії", "fullDescription": "Talair (Папуа-Нова Гвінея)" }, { "mcc": "3127", "shortDescription": "Авіалінії", "fullDescription": "TACA International" }, { "mcc": "3128", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3129", "shortDescription": "Авіалінії", "fullDescription": "Суринам Ейрвейс" }, { "mcc": "3130", "shortDescription": "Авіалінії", "fullDescription": "Sunworld International Airways" }, { "mcc": "3131", "shortDescription": "Авіалінії", "fullDescription": "VLM Airlines (Бельгія)" }, { "mcc": "3132", "shortDescription": "Авіалінії", "fullDescription": "Фронтир Ейрлайнз" }, { "mcc": "3133", "shortDescription": "Авіалінії", "fullDescription": "Санбелт Ейрлайнз" }, { "mcc": "3134", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3135", "shortDescription": "Авіалінії", "fullDescription": "Суданські авіалінії" }, { "mcc": "3136", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії Катару" }, { "mcc": "3137", "shortDescription": "Авіалінії", "fullDescription": "Singleton" }, { "mcc": "3138", "shortDescription": "Авіалінії", "fullDescription": "Сіммонс Ейрлайнз (США)" }, { "mcc": "3139", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3140", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3141", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3142", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3143", "shortDescription": "Авіалінії", "fullDescription": "Мальовничі авіалінії (США)" }, { "mcc": "3144", "shortDescription": "Авіалінії", "fullDescription": "Virgin Atlantic (США)" }, { "mcc": "3145", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії Сан-Хуана" }, { "mcc": "3146", "shortDescription": "Авіалінії", "fullDescription": "Luxair (Люксембург)" }, { "mcc": "3147", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3148", "shortDescription": "Авіалінії", "fullDescription": "Ейр Літораль (Франція)" }, { "mcc": "3149", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3150", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3151", "shortDescription": "Авіалінії", "fullDescription": "Ейр Заїр" }, { "mcc": "3152", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3153", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3154", "shortDescription": "Авіалінії", "fullDescription": "Принсвілл" }, { "mcc": "3155", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3156", "shortDescription": "Авіалінії", "fullDescription": "Авіалінія GO FLY" }, { "mcc": "3157", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3158", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3159", "shortDescription": "Авіалінії", "fullDescription": "Провінстаун-Бостон Ейрвейс" }, { "mcc": "3160", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3161", "shortDescription": "Авіалінії", "fullDescription": "All Nippon Airways (Японія)" }, { "mcc": "3162", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3163", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3164", "shortDescription": "Авіалінії", "fullDescription": "Norontair (Канада)" }, { "mcc": "3165", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3166", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3167", "shortDescription": "Авіалінії", "fullDescription": "Аеро Континент (Перу)" }, { "mcc": "3168", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3169", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3170", "shortDescription": "Авіалінії", "fullDescription": "Гора Кука" }, { "mcc": "3171", "shortDescription": "Авіалінії", "fullDescription": "Канадські авіалінії" }, { "mcc": "3172", "shortDescription": "Авіалінії", "fullDescription": "Національні авіалінії (США)" }, { "mcc": "3173", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3174", "shortDescription": "Авіалінії", "fullDescription": "JetBlue Airways (США)" }, { "mcc": "3175", "shortDescription": "Авіалінії", "fullDescription": "Мідл Іст Ейр (Ліван)" }, { "mcc": "3176", "shortDescription": "Авіалінії", "fullDescription": "Metroflight airlines (США)" }, { "mcc": "3177", "shortDescription": "Авіалінії", "fullDescription": "AirTran Airways (США)" }, { "mcc": "3178", "shortDescription": "Авіалінії", "fullDescription": "Меса Ейр (США)" }, { "mcc": "3179", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3180", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії Westjet (Канада)" }, { "mcc": "3181", "shortDescription": "Авіалінії", "fullDescription": "Малєв Угорські Авіалінії" }, { "mcc": "3182", "shortDescription": "Авіалінії", "fullDescription": "Польські авіалінії LOT" }, { "mcc": "3183", "shortDescription": "Авіалінії", "fullDescription": "Авіаційні служби Оману" }, { "mcc": "3184", "shortDescription": "Авіалінії", "fullDescription": "LIAT (Антигуа и Барбуда)" }, { "mcc": "3185", "shortDescription": "Авіалінії", "fullDescription": "LAV (Венесуела)" }, { "mcc": "3186", "shortDescription": "Авіалінії", "fullDescription": "LAP (Парагвай)" }, { "mcc": "3187", "shortDescription": "Авіалінії", "fullDescription": "Avianca Costa Rica" }, { "mcc": "3188", "shortDescription": "Авіалінії", "fullDescription": "Virgin Express (Бельгія)" }, { "mcc": "3189", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3190", "shortDescription": "Авіалінії", "fullDescription": "Югослав Ейр (Сербія)" }, { "mcc": "3191", "shortDescription": "Авіалінії", "fullDescription": "Острівні авіалінії (США)" }, { "mcc": "3192", "shortDescription": "Авіалінії", "fullDescription": "Іран Ейр" }, { "mcc": "3193", "shortDescription": "Авіалінії", "fullDescription": "Індійські авіалінії" }, { "mcc": "3194", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3195", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3196", "shortDescription": "Авіалінії", "fullDescription": "Гавайські авіалінії" }, { "mcc": "3197", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії Лейк-Гавасу-Сіті" }, { "mcc": "3198", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3199", "shortDescription": "Авіалінії", "fullDescription": "Військові авіаційні служби" }, { "mcc": "3200", "shortDescription": "Авіалінії", "fullDescription": "Гайанські авіалінії" }, { "mcc": "3201", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3202", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3203", "shortDescription": "Авіалінії", "fullDescription": "Голден Пасифік Ейрлайнз (США)" }, { "mcc": "3204", "shortDescription": "Авіалінії", "fullDescription": "Експрес \"Вільні авіалінії\" (Кенія)" }, { "mcc": "3205", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3206", "shortDescription": "Авіалінії", "fullDescription": "Китайські східні авіалінії" }, { "mcc": "3207", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3208", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3209", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3210", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3211", "shortDescription": "Авіалінії", "fullDescription": "Норвезький повітряний шаттл" }, { "mcc": "3212", "shortDescription": "Авіалінії", "fullDescription": "Домініканська авіація" }, { "mcc": "3213", "shortDescription": "Авіалінії", "fullDescription": "Braathens Regional Airlines (Швеція)" }, { "mcc": "3214", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3215", "shortDescription": "Авіалінії", "fullDescription": "Дан-Ейр (Великобританія)" }, { "mcc": "3216", "shortDescription": "Авіалінії", "fullDescription": "Великий регіональний аеропорт Камберленда" }, { "mcc": "3217", "shortDescription": "Авіалінії", "fullDescription": "CSA Чехословацькі авіалінії" }, { "mcc": "3218", "shortDescription": "Авіалінії", "fullDescription": "Crown Airways (США)" }, { "mcc": "3219", "shortDescription": "Авіалінії", "fullDescription": "Панамська авіаційна компанія" }, { "mcc": "3220", "shortDescription": "Авіалінії", "fullDescription": "Компанія Faucett (Перу)" }, { "mcc": "3221", "shortDescription": "Авіалінії", "fullDescription": "Еквадорський військовий повітряний транспорт" }, { "mcc": "3222", "shortDescription": "Авіалінії", "fullDescription": "Command Airways (США)" }, { "mcc": "3223", "shortDescription": "Авіалінії", "fullDescription": "Comair (Південна Африка)" }, { "mcc": "3224", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3225", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3226", "shortDescription": "Авіалінії", "fullDescription": "Skyways Express (Швеція)" }, { "mcc": "3227", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3228", "shortDescription": "Авіалінії", "fullDescription": "Кайман Ейрвейз" }, { "mcc": "3229", "shortDescription": "Авіалінії", "fullDescription": "Еквадорське товариство повітряного транспорту" }, { "mcc": "3230", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3231", "shortDescription": "Авіалінії", "fullDescription": "Аеросервіс Гондурасу" }, { "mcc": "3232", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3233", "shortDescription": "Авіалінії", "fullDescription": "Капітол Ейр" }, { "mcc": "3234", "shortDescription": "Авіалінії", "fullDescription": "Карибські авіалінії / Вест-Індські авіалінії" }, { "mcc": "3235", "shortDescription": "Авіалінії", "fullDescription": "Броквей Ейр" }, { "mcc": "3236", "shortDescription": "Авіалінії", "fullDescription": "Ейр Арабія Ейрлайнз (Об'єднані Арабські Емірати)" }, { "mcc": "3237", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3238", "shortDescription": "Авіалінії", "fullDescription": "Беміджі Ейрлайнз (США)" }, { "mcc": "3239", "shortDescription": "Авіалінії", "fullDescription": "Бар-Харбор Ейрлайнз (США)" }, { "mcc": "3240", "shortDescription": "Авіалінії", "fullDescription": "Bahamasair (Багамські острови)" }, { "mcc": "3241", "shortDescription": "Авіалінії", "fullDescription": "Авіанка (Гватемала)" }, { "mcc": "3242", "shortDescription": "Авіалінії", "fullDescription": "Авенса (Венесуела)" }, { "mcc": "3243", "shortDescription": "Авіалінії", "fullDescription": "Австрійські авіалінії" }, { "mcc": "3244", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3245", "shortDescription": "Авіалінії", "fullDescription": "EasyJet (Великобританія)" }, { "mcc": "3246", "shortDescription": "Авіалінії", "fullDescription": "Ryanair" }, { "mcc": "3247", "shortDescription": "Авіалінії", "fullDescription": "Гол Ейрлайнз (Бразилія)" }, { "mcc": "3248", "shortDescription": "Авіалінії", "fullDescription": "Тем Ейрлайнз (Бразилія)" }, { "mcc": "3249", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3250", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3251", "shortDescription": "Авіалінії", "fullDescription": "Алоха Ейрлайнз (США)" }, { "mcc": "3252", "shortDescription": "Авіалінії", "fullDescription": "ALM Антильські авіалінії" }, { "mcc": "3253", "shortDescription": "Авіалінії", "fullDescription": "Західноамериканські авіалінії" }, { "mcc": "3254", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії Трампа" }, { "mcc": "3255", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3256", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії Аляски" }, { "mcc": "3257", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3258", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3259", "shortDescription": "Авіалінії", "fullDescription": "Американ Транс Ейр" }, { "mcc": "3260", "shortDescription": "Авіалінії", "fullDescription": "Спіріт Ейрлайнз (США)" }, { "mcc": "3261", "shortDescription": "Авіалінії", "fullDescription": "Ейр Чайна" }, { "mcc": "3262", "shortDescription": "Авіалінії", "fullDescription": "Reno Air, Inc. / Американські авіалінії" }, { "mcc": "3263", "shortDescription": "Авіалінії", "fullDescription": "Aserca Airlines / Aero Servicio Carabobo (Венесуела)" }, { "mcc": "3264", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3265", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3266", "shortDescription": "Авіалінії", "fullDescription": "Ейр Сейшели" }, { "mcc": "3267", "shortDescription": "Авіалінії", "fullDescription": "Ейр Панама Інтернешнл" }, { "mcc": "3268", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3269", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3270", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3271", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3272", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3273", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3274", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3275", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3276", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3277", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3278", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3279", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3280", "shortDescription": "Авіалінії", "fullDescription": "Ейр Ямайка" }, { "mcc": "3281", "shortDescription": "Авіалінії", "fullDescription": "Ейр Джибуті" }, { "mcc": "3282", "shortDescription": "Авіалінії", "fullDescription": "Ейр Джибуті" }, { "mcc": "3283", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3284", "shortDescription": "Авіалінії", "fullDescription": "Аеро Вірґінські Острови" }, { "mcc": "3285", "shortDescription": "Авіалінії", "fullDescription": "Аеро Перу" }, { "mcc": "3286", "shortDescription": "Авіалінії", "fullDescription": "Аеро Нікарагуенс" }, { "mcc": "3287", "shortDescription": "Авіалінії", "fullDescription": "Aero Coach Aviation" }, { "mcc": "3288", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3289", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3290", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії" }, { "mcc": "3291", "shortDescription": "Авіалінії", "fullDescription": "\"Аріана\" Афганські авіалінії" }, { "mcc": "3292", "shortDescription": "Авіалінії", "fullDescription": "Кіпрські авіалінії" }, { "mcc": "3293", "shortDescription": "Авіалінії", "fullDescription": "Еквадорська авіація" }, { "mcc": "3294", "shortDescription": "Авіалінії", "fullDescription": "Ефіопські авіалінії" }, { "mcc": "3295", "shortDescription": "Авіалінії", "fullDescription": "Кенія Ейрвейз" }, { "mcc": "3296", "shortDescription": "Авіалінії", "fullDescription": "Ейр Берлін" }, { "mcc": "3297", "shortDescription": "Авіалінії", "fullDescription": "TAROM / Повітряний транспорт Румунії" }, { "mcc": "3298", "shortDescription": "Авіалінії", "fullDescription": "Ейр Маврикій" }, { "mcc": "3299", "shortDescription": "Авіалінії", "fullDescription": "Wideroes Flyveselskap (Норвеґія)" }, { "mcc": "3300", "shortDescription": "Авіалінії", "fullDescription": "Азул Ейрлайнз (Бразилія)" }, { "mcc": "3301", "shortDescription": "Авіалінії", "fullDescription": "Візз Ейр (Угорщина)" }, { "mcc": "3302", "shortDescription": "Авіалінії", "fullDescription": "Флайбі Ейр (Великобританія)" }, { "mcc": "3351", "shortDescription": "Оренда автомобілів", "fullDescription": "Афілійований прокат автомобілів" }, { "mcc": "3352", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"American Intl\"" }, { "mcc": "3353", "shortDescription": "Оренда автомобілів", "fullDescription": "Брукс Прокат автомобілів" }, { "mcc": "3354", "shortDescription": "Оренда автомобілів", "fullDescription": "Екшн Автопрокат" }, { "mcc": "3355", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3356", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3357", "shortDescription": "Оренда автомобілів", "fullDescription": "Прокат автомобілів, компанія \"Hertz\"" }, { "mcc": "3358", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3359", "shortDescription": "Оренда автомобілів", "fullDescription": "Прокат автомобілів, компанія \"Payless Car\"" }, { "mcc": "3360", "shortDescription": "Оренда автомобілів", "fullDescription": "Прокат автомобілів, компанія \"Snappy\"" }, { "mcc": "3361", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів в аеропортах" }, { "mcc": "3362", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Altra\"" }, { "mcc": "3363", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3364", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентство \"Rent-a-car\"" }, { "mcc": "3365", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3366", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Бюджет\"" }, { "mcc": "3367", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3368", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Rent-a-wreck\" (для свят)" }, { "mcc": "3369", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3370", "shortDescription": "Оренда автомобілів", "fullDescription": "Компанія \"Rent-a-wreck\"" }, { "mcc": "3371", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3372", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3373", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3374", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3375", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3376", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Ajax\"" }, { "mcc": "3377", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3378", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3379", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3380", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3381", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Europ Car\"" }, { "mcc": "3382", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3383", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3384", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3385", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Tropical Rent-a-car\"" }, { "mcc": "3386", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Showcase Rental Cars\"" }, { "mcc": "3387", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Alamo Rent-a-car\"" }, { "mcc": "3388", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3389", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Avis\"" }, { "mcc": "3390", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Dollar\"" }, { "mcc": "3391", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Europe By Car\"" }, { "mcc": "3392", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3393", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"National Car Rental\"" }, { "mcc": "3394", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Kemwell Group\"" }, { "mcc": "3395", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Thrifty\"" }, { "mcc": "3396", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Tilden\"" }, { "mcc": "3397", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3398", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Econo-car\"" }, { "mcc": "3399", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Amerex\"" }, { "mcc": "3400", "shortDescription": "Оренда автомобілів", "fullDescription": "Auto Host Cost Car Rentals" }, { "mcc": "3401", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3402", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3403", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3404", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3405", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Enterprise\"" }, { "mcc": "3406", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3407", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3408", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3409", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"General Rent-a-car\"" }, { "mcc": "3410", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3411", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3412", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3413", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3414", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Godfrey Natl\"" }, { "mcc": "3415", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3416", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3417", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3418", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3419", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Alpha\"" }, { "mcc": "3420", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Ansa\"" }, { "mcc": "3421", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Allstae\"" }, { "mcc": "3422", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3423", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Avcar\"" }, { "mcc": "3424", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3425", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Automate\"" }, { "mcc": "3426", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3427", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Avon\"" }, { "mcc": "3428", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Carey\"" }, { "mcc": "3429", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Insurance\"" }, { "mcc": "3430", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Major\"" }, { "mcc": "3431", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Replacement\"" }, { "mcc": "3432", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Reserve\"" }, { "mcc": "3433", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Ugly Duckling\"" }, { "mcc": "3434", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"USA Rent-a-car\"" }, { "mcc": "3435", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Value Rent-a-car\"" }, { "mcc": "3436", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Autohansa\"" }, { "mcc": "3437", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Cite Rent-a-car\"" }, { "mcc": "3438", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Interent\"" }, { "mcc": "3439", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Milleville\"" }, { "mcc": "3440", "shortDescription": "Оренда автомобілів", "fullDescription": "Оренда автомобілів, компанія \"Via Route Rent-a-Car\"" }, { "mcc": "3441", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "3501", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Holiday\"" }, { "mcc": "3502", "shortDescription": "Готелі та курорти", "fullDescription": "Best Western Hotels & Resorts" }, { "mcc": "3503", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Шератон\"" }, { "mcc": "3504", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Hilton\"" }, { "mcc": "3505", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Forte\"" }, { "mcc": "3506", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Golden Tulip\"" }, { "mcc": "3507", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Friendship\"" }, { "mcc": "3508", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Quality\"" }, { "mcc": "3509", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Marriott\"" }, { "mcc": "3510", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Days\"" }, { "mcc": "3511", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Arabella\"" }, { "mcc": "3512", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Inter-continental\"" }, { "mcc": "3513", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Westin\"" }, { "mcc": "3514", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"AmeriSuites\"" }, { "mcc": "3515", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Rodeway\"" }, { "mcc": "3516", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"La Quinta Motor\"" }, { "mcc": "3517", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Americana\"" }, { "mcc": "3518", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Sol\"" }, { "mcc": "3519", "shortDescription": "Готелі та курорти", "fullDescription": "Міжнародні готелі Пульмана" }, { "mcc": "3520", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Meridien\"" }, { "mcc": "3521", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Forte Crest\"" }, { "mcc": "3522", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Tokyo\"" }, { "mcc": "3523", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Peninsula\"" }, { "mcc": "3524", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Welcomgroup\"" }, { "mcc": "3525", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Dunfey\"" }, { "mcc": "3526", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Prince\"" }, { "mcc": "3527", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Downtowner-passport\"" }, { "mcc": "3528", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Red Lion\"" }, { "mcc": "3529", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Canadian Pacific\"" }, { "mcc": "3530", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Renaissance\"" }, { "mcc": "3531", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Astir\"" }, { "mcc": "3532", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Sun Route\"" }, { "mcc": "3533", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Ibis\"" }, { "mcc": "3534", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Southern Pacific\"" }, { "mcc": "3535", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Hilton International\"" }, { "mcc": "3536", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Amfac\"" }, { "mcc": "3537", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"ANA\"" }, { "mcc": "3538", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Concorde\"" }, { "mcc": "3539", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Summerfield Suites\"" }, { "mcc": "3540", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Iberotel\"" }, { "mcc": "3541", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Okura\"" }, { "mcc": "3542", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Royal\"" }, { "mcc": "3543", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Four Seasons\"" }, { "mcc": "3544", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Ciga\"" }, { "mcc": "3545", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Shangri-La\"" }, { "mcc": "3546", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Sierra\"" }, { "mcc": "3547", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Breakers Resort\"" }, { "mcc": "3548", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Melia International\"" }, { "mcc": "3549", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Auberge Des Governeurs\"" }, { "mcc": "3550", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Regal 8\"" }, { "mcc": "3551", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Міраж\" і казино" }, { "mcc": "3552", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Coast\"" }, { "mcc": "3553", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Park International\"" }, { "mcc": "3554", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Pinehurst\"" }, { "mcc": "3555", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Острів скарбів\" і казино" }, { "mcc": "3556", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Barton Creek\"" }, { "mcc": "3557", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Manhattan East Suite\"" }, { "mcc": "3558", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Jolly\"" }, { "mcc": "3559", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Candleood Suites\"" }, { "mcc": "3560", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Алладін\" і казино" }, { "mcc": "3561", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Золотий самородок\" і казино" }, { "mcc": "3562", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Comfort\"" }, { "mcc": "3563", "shortDescription": "Готелі та курорти", "fullDescription": "Мотелі \"Journey’s End\"" }, { "mcc": "3564", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Сем Таун\" і казино" }, { "mcc": "3565", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Relax\"" }, { "mcc": "3566", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Garden Place\"" }, { "mcc": "3567", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Soho Grand\"" }, { "mcc": "3568", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Ladbroke\"" }, { "mcc": "3569", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Tribeca Grand\"" }, { "mcc": "3570", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Grand Met Forum\"" }, { "mcc": "3571", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Grand Wailea\"" }, { "mcc": "3572", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Miyako\"" }, { "mcc": "3573", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Sandman\"" }, { "mcc": "3574", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Venture\"" }, { "mcc": "3575", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Vagabond\"" }, { "mcc": "3576", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"La Quinta\"" }, { "mcc": "3577", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Mandarin Oriental\"" }, { "mcc": "3578", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Frankenmuth Bavarian\"" }, { "mcc": "3579", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Меркурій\"" }, { "mcc": "3580", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Del Coronado\"" }, { "mcc": "3581", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Delta\"" }, { "mcc": "3582", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Каліфорнія\" і казино" }, { "mcc": "3583", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Radisson Blue\"" }, { "mcc": "3584", "shortDescription": "Готелі та курорти", "fullDescription": "Міжнародний готель \"Принцеса\"" }, { "mcc": "3585", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі Угорщини" }, { "mcc": "3586", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Sokos\"" }, { "mcc": "3587", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі міста Дорал" }, { "mcc": "3588", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі Гельмслі" }, { "mcc": "3589", "shortDescription": "Готелі та курорти", "fullDescription": "Гольф-курорт Дорал" }, { "mcc": "3590", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Fairmont\"" }, { "mcc": "3591", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Sonesta\"" }, { "mcc": "3592", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Omni\"" }, { "mcc": "3593", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Cunard\"" }, { "mcc": "3594", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Arizona Biltmore\"" }, { "mcc": "3595", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Hospitality International\"" }, { "mcc": "3596", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Wynn Las Vegas\"" }, { "mcc": "3597", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Ріверсайд\" і казино" }, { "mcc": "3598", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Regent\"" }, { "mcc": "3599", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі Паннонії" }, { "mcc": "3600", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Saddlebrook\"" }, { "mcc": "3601", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"TradeWinds Island\"" }, { "mcc": "3602", "shortDescription": "Готелі та курорти", "fullDescription": "Нью-Йоркський готель \"Хадсон\"" }, { "mcc": "3603", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Noah's Ark\"" }, { "mcc": "3604", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Hilton Garden\"" }, { "mcc": "3605", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Jurys\"" }, { "mcc": "3606", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Джефферсон\"" }, { "mcc": "3607", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Fontainebleau\"" }, { "mcc": "3608", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Gaylord Opryland\"" }, { "mcc": "3609", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Gaylord Palms\"" }, { "mcc": "3610", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Gaylord Texan\"" }, { "mcc": "3611", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"C'mon\"" }, { "mcc": "3612", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Movenpick\"" }, { "mcc": "3613", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Microtel\"" }, { "mcc": "3614", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"AmericInn\"" }, { "mcc": "3615", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Travelodge Hotels\"" }, { "mcc": "3616", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Hermitage\"" }, { "mcc": "3617", "shortDescription": "Готелі та курорти", "fullDescription": "America’s Best Value Inn" }, { "mcc": "3618", "shortDescription": "Готелі та курорти", "fullDescription": "Курорти \"Великий вовк\"" }, { "mcc": "3619", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Aloft\"" }, { "mcc": "3620", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Binions Horseshoe Club\" і казино" }, { "mcc": "3621", "shortDescription": "Готелі та курорти", "fullDescription": "Extended Stay" }, { "mcc": "3622", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Merlin\" (Перт)" }, { "mcc": "3623", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Dorint\"" }, { "mcc": "3624", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Леді Удача\" і казино" }, { "mcc": "3625", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Universal\"" }, { "mcc": "3626", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Принц\" / Готелі \"Studio Plus\"" }, { "mcc": "3627", "shortDescription": "Готелі та курорти", "fullDescription": "Extended Stay America" }, { "mcc": "3628", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Екскалібур\" і казино" }, { "mcc": "3629", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Dan\"" }, { "mcc": "3630", "shortDescription": "Готелі та курорти", "fullDescription": "Extended Stay Deluxe" }, { "mcc": "3631", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Sleep\"" }, { "mcc": "3632", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Фінікійський\"" }, { "mcc": "3633", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Rank\"" }, { "mcc": "3634", "shortDescription": "Готелі та курорти", "fullDescription": "Курорти \"Swissôtel\"" }, { "mcc": "3635", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Reso\"" }, { "mcc": "3636", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Sarova\"" }, { "mcc": "3637", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Ramada\"" }, { "mcc": "3638", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Говард Джонсон\"" }, { "mcc": "3639", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Mount Charlotte\"" }, { "mcc": "3640", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Hyatt\" (Міжнародні)" }, { "mcc": "3641", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Sofitel\"" }, { "mcc": "3642", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Novotel Sieh (Accor)\"" }, { "mcc": "3643", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Steigenberger\"" }, { "mcc": "3644", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Econo-Travel Motor\"" }, { "mcc": "3645", "shortDescription": "Готелі та курорти", "fullDescription": "Queens Moat Houses" }, { "mcc": "3646", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Swallow\"" }, { "mcc": "3647", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"HUSA\"" }, { "mcc": "3648", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"De Vere\"" }, { "mcc": "3649", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Radisson\"" }, { "mcc": "3650", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Red Roof\"" }, { "mcc": "3651", "shortDescription": "Готелі та курорти", "fullDescription": "Лондонський готель \"Імперський\"" }, { "mcc": "3652", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Embassy\" від \"Hilton\"" }, { "mcc": "3653", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Penta\"" }, { "mcc": "3654", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Loews\"" }, { "mcc": "3655", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Scandic\"" }, { "mcc": "3656", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Сара\"" }, { "mcc": "3657", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Oberoi\"" }, { "mcc": "3658", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"New Otani\"" }, { "mcc": "3659", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Taj\"" }, { "mcc": "3660", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Knights\"" }, { "mcc": "3661", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Metropole\" і СПА" }, { "mcc": "3662", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Circus Circus\" і казино" }, { "mcc": "3663", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"El Presidente\"" }, { "mcc": "3664", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Flag\"" }, { "mcc": "3665", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Hampton\" від \"Hilton\"" }, { "mcc": "3666", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Stakis\"" }, { "mcc": "3667", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Luxor\" і казино" }, { "mcc": "3668", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі, курорти \"Maritim\" і казино" }, { "mcc": "3669", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Ельдорадо\" і казино" }, { "mcc": "3670", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Аркада\"" }, { "mcc": "3671", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Arctia\"" }, { "mcc": "3672", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Campanile\"" }, { "mcc": "3673", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Ibusz\"" }, { "mcc": "3674", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Rantasipi\"" }, { "mcc": "3675", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Cedok\"" }, { "mcc": "3676", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Monte Carlo\" і казино" }, { "mcc": "3677", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Climat De France\"" }, { "mcc": "3678", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Cumulus\"" }, { "mcc": "3679", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Срібна спадщина\" і казино" }, { "mcc": "3680", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Othan\"" }, { "mcc": "3681", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Adams Mark\"" }, { "mcc": "3682", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Сахара\" і казино" }, { "mcc": "3683", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Бредбері\"" }, { "mcc": "3684", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Budget Host\"" }, { "mcc": "3685", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Budgetel\"" }, { "mcc": "3686", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Suisse Chalet\"" }, { "mcc": "3687", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Clarion\"" }, { "mcc": "3688", "shortDescription": "Готелі та курорти", "fullDescription": "Compri Hotel Bucks County" }, { "mcc": "3689", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Консорт\"" }, { "mcc": "3690", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Courtyard\" від \"Marriott\"" }, { "mcc": "3691", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Dillon\"" }, { "mcc": "3692", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"DoubleTree\" від \"Hilton\"" }, { "mcc": "3693", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Drury Hotels\"" }, { "mcc": "3694", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Economy Inns Of America\"" }, { "mcc": "3695", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Embassy\" від \"Hilton\"" }, { "mcc": "3696", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Excel Inn\"" }, { "mcc": "3697", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Fairfield\" від \"Marriott\"" }, { "mcc": "3698", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Хартлі\"" }, { "mcc": "3699", "shortDescription": "Готелі та курорти", "fullDescription": "Мотелі \"Midway Motor Lodge\"" }, { "mcc": "3700", "shortDescription": "Готелі та курорти", "fullDescription": "Мотелі \"6\"" }, { "mcc": "3701", "shortDescription": "Готелі та курорти", "fullDescription": "La Mansion Del Rio" }, { "mcc": "3702", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Реєстр\"" }, { "mcc": "3703", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Residence Inn\" від \"Marriott\"" }, { "mcc": "3704", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Royce\"" }, { "mcc": "3705", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Sandman\"" }, { "mcc": "3706", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Shilo\"" }, { "mcc": "3707", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Shoneys\"" }, { "mcc": "3708", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Virgin River\" і казино" }, { "mcc": "3709", "shortDescription": "Готелі та курорти", "fullDescription": "Мотелі \"Super 8\"" }, { "mcc": "3710", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Ritz-Carlton\"" }, { "mcc": "3711", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Flag\" (Австралія)" }, { "mcc": "3712", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Buffalo Bills\" і казино" }, { "mcc": "3713", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Quality Pacific\"" }, { "mcc": "3714", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Four Seasons\" (Австралія)" }, { "mcc": "3715", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Fairfield\"" }, { "mcc": "3716", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Carlton\"" }, { "mcc": "3717", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"City Lodge\"" }, { "mcc": "3718", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Karos\"" }, { "mcc": "3719", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Protea\" від \"Marriott\"" }, { "mcc": "3720", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Southern Sun\"" }, { "mcc": "3721", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Conrad\"" }, { "mcc": "3722", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Wyndham\"" }, { "mcc": "3723", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Rica\"" }, { "mcc": "3724", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Inter Nor\"" }, { "mcc": "3725", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Sea Pines\"" }, { "mcc": "3726", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Rio\"" }, { "mcc": "3727", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Broadmoor\"" }, { "mcc": "3728", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Ballys\" і казино" }, { "mcc": "3729", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Самородок\" і казино" }, { "mcc": "3730", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"MGM Grand\"" }, { "mcc": "3731", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Harrah\" і казино" }, { "mcc": "3732", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Opryland\"" }, { "mcc": "3733", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Boca Raton\" і клуб" }, { "mcc": "3734", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Harvey Bristol\"" }, { "mcc": "3735", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Masters Economy\"" }, { "mcc": "3736", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Colorado Belle\" і казино" }, { "mcc": "3737", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Рів’єра\" і казино" }, { "mcc": "3738", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Tropicana\" і казино" }, { "mcc": "3739", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Woodside\"" }, { "mcc": "3740", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Towneplace\"" }, { "mcc": "3741", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Millennium Times Square\" (Нью-Йорк)" }, { "mcc": "3742", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Club Med\"" }, { "mcc": "3743", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Biltmore\" і апартаменти \"Biltmore\" в Атланті" }, { "mcc": "3744", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Carefree\"" }, { "mcc": "3745", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"St. Regis\"" }, { "mcc": "3746", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"The Eliot\"" }, { "mcc": "3747", "shortDescription": "Готелі та курорти", "fullDescription": "Клубна корпорація / Клубні курорти" }, { "mcc": "3748", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Wellesley\"" }, { "mcc": "3749", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі міста Беверлі Хіллс" }, { "mcc": "3750", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Crowne Plaza\"" }, { "mcc": "3751", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Homewood\" від \"Hilton\"" }, { "mcc": "3752", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"The Peabody\" в місті Мемфіс (США)" }, { "mcc": "3753", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Greenbriar\"" }, { "mcc": "3754", "shortDescription": "Готелі та курорти", "fullDescription": "Плантація \"Amelia Island\"" }, { "mcc": "3755", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі міста Гомстед" }, { "mcc": "3756", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"South Seas Island\"" }, { "mcc": "3757", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Canyon Ranch\"" }, { "mcc": "3758", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"The Kahala\"" }, { "mcc": "3759", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Orchid At Mauna Lani\"" }, { "mcc": "3760", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Halekulani\" / Парк Waikiki" }, { "mcc": "3761", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Примадонна\" і казино" }, { "mcc": "3762", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Віскі Піта\" і казино" }, { "mcc": "3763", "shortDescription": "Готелі та курорти", "fullDescription": "Виноробня та курорт Шато Елан" }, { "mcc": "3764", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Beau Rivage\" і казино" }, { "mcc": "3765", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі, курорти \"Bellagio\" і казино" }, { "mcc": "3766", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Fremont\" і казино" }, { "mcc": "3767", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі, пивоварня \"Main Street Station\" і казино" }, { "mcc": "3768", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Срібна зірка\" і казино" }, { "mcc": "3769", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Стратосфера\" і казино" }, { "mcc": "3770", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Springhill\"" }, { "mcc": "3771", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Цезар\" і казино" }, { "mcc": "3772", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Nemacolin Woodlands\"" }, { "mcc": "3773", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі, курорти \"Venetian\" і казино" }, { "mcc": "3774", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"New York-New York\" і казино" }, { "mcc": "3775", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Sands\"" }, { "mcc": "3776", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Nevele Grande\" і заміський клуб" }, { "mcc": "3777", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Mandalay Bay\"" }, { "mcc": "3778", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Four Points\"" }, { "mcc": "3779", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"W\"" }, { "mcc": "3780", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Діснейленд\"" }, { "mcc": "3781", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Patricia Grand\"" }, { "mcc": "3782", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Rosen\"" }, { "mcc": "3783", "shortDescription": "Готелі та курорти", "fullDescription": "Міський та заміський курорт і конференц-центр" }, { "mcc": "3784", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"First Hospitality\"" }, { "mcc": "3785", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Outrigger\"" }, { "mcc": "3786", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Ohana\" на Гаваях" }, { "mcc": "3787", "shortDescription": "Готелі та курорти", "fullDescription": "Курортний люкс та вілли \"Caribe Royale Orlando\"" }, { "mcc": "3788", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Ala Moana\" від \"Mantra\"" }, { "mcc": "3789", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Smugglers Notch\"" }, { "mcc": "3790", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Raffles\"" }, { "mcc": "3791", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Staybridge\"" }, { "mcc": "3792", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Claridge\" і казино" }, { "mcc": "3793", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Фламінго\"" }, { "mcc": "3794", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі, курорти \"Grand\" і казино" }, { "mcc": "3795", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Paris Las Vegas\" і казино" }, { "mcc": "3796", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Peppermill\" і казино" }, { "mcc": "3797", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"The Atlantic\" і казино" }, { "mcc": "3798", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Embassy Vacation\"" }, { "mcc": "3799", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Hale Koa\"" }, { "mcc": "3800", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти міста Гомстед" }, { "mcc": "3801", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Wilderness\"" }, { "mcc": "3802", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Палац\"" }, { "mcc": "3803", "shortDescription": "Готелі та курорти", "fullDescription": "Гольф-курорт \"Вігвам\" і СПА" }, { "mcc": "3804", "shortDescription": "Готелі та курорти", "fullDescription": "Заміський клуб \"Дипломат\" і СПА" }, { "mcc": "3805", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"The Atlantic\"" }, { "mcc": "3806", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Princeville\"" }, { "mcc": "3807", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Елемент\"" }, { "mcc": "3808", "shortDescription": "Готелі та курорти", "fullDescription": "Курортні готелі \"LXR\"" }, { "mcc": "3809", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Settle\"" }, { "mcc": "3810", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"La Costa\"" }, { "mcc": "3811", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Premier Travel\"" }, { "mcc": "3812", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Hyatt\"" }, { "mcc": "3813", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Indigo\"" }, { "mcc": "3814", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Рузвельт\" (Нью-Йорк)" }, { "mcc": "3815", "shortDescription": "Готелі та курорти", "fullDescription": "Сімейні апартаменти \"Nickelodeon\" від \"Holiday\"" }, { "mcc": "3816", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Home2\" від \"Hilton\"" }, { "mcc": "3817", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Affinia\"" }, { "mcc": "3818", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Mainstay\"" }, { "mcc": "3819", "shortDescription": "Готелі та курорти", "fullDescription": "Апартаменти \"Oxford\"" }, { "mcc": "3820", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Jumeirah Essex House\"" }, { "mcc": "3821", "shortDescription": "Готелі та курорти", "fullDescription": "Курортний люкс та вілли \"Caribe Royale Orlando\"" }, { "mcc": "3822", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Crossland\"" }, { "mcc": "3823", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Grand Sierra\"" }, { "mcc": "3824", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Aria\"" }, { "mcc": "3825", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Vdara\" і СПА" }, { "mcc": "3826", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Steinplatz\"" }, { "mcc": "3827", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Будинок Гальта\" від Wyndham" }, { "mcc": "3828", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Космополітен Лас-Вегаса\" і казино" }, { "mcc": "3829", "shortDescription": "Готелі та курорти", "fullDescription": "Заміський готель від \"Carlson\"" }, { "mcc": "3830", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Park Plaza\"" }, { "mcc": "3831", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Waldorf Astoria\"" }, { "mcc": "3832", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Curio\" від \"Hilton\"" }, { "mcc": "3833", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Canopy\" від \"Hilton\"" }, { "mcc": "3834", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Baymont\"" }, { "mcc": "3835", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі і курорти \"Dolce\"" }, { "mcc": "3836", "shortDescription": "Готелі та курорти", "fullDescription": "Готель \"Hawthorn\" від Wyndham" }, { "mcc": "3837", "shortDescription": "Готелі та курорти", "fullDescription": "Курорт \"Hoshino\"" }, { "mcc": "3838", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі \"Kimpton\"" }, { "mcc": "3882", "shortDescription": "Переведення в готівку", "fullDescription": "Інкасація чека (переведення в готівку)" }, { "mcc": "4011", "shortDescription": "Залізниця", "fullDescription": "Залізниці - перевезення вантажів" }, { "mcc": "4111", "shortDescription": "Пасажирські перевезення", "fullDescription": "Пасажирські перевезення - приміські та місцеві приміські рейси, включаючи пороми" }, { "mcc": "4112", "shortDescription": "Пасажирські залізничні перевезення", "fullDescription": "Пасажирські залізничні перевезення" }, { "mcc": "4119", "shortDescription": "Швидка допомога", "fullDescription": "Послуги швидкої допомоги" }, { "mcc": "4121", "shortDescription": "Таксі", "fullDescription": "Лімузини і таксі" }, { "mcc": "4131", "shortDescription": "Перевезення. Автобус", "fullDescription": "Автобусні лінії" }, { "mcc": "4214", "shortDescription": "Транспортування. Доставка", "fullDescription": "Агентства з автотранспортних перевезень, місцеві / віддалені автовантажоперевезення, компанії по переїзду і зберіганню, місцева доставка" }, { "mcc": "4215", "shortDescription": "Кур'єрська служба", "fullDescription": "Послуги кур'єра - по повітрю і на землі, агентство по відправці вантажів" }, { "mcc": "4225", "shortDescription": "Сховище", "fullDescription": "Складське зберігання громадського користування - сільськогосподарські продукти, продукти що охолоджуються, зберігання предметів домашнього вжитку" }, { "mcc": "4304", "shortDescription": "Різне", "fullDescription": "Різне" }, { "mcc": "4411", "shortDescription": "Круїзні лінії", "fullDescription": "Круїзні лінії" }, { "mcc": "4457", "shortDescription": "Оренда суден", "fullDescription": "Оренда та лізинг суден" }, { "mcc": "4468", "shortDescription": "Яхтинговий сервіс", "fullDescription": "Пристані для яхт, їх обслуговування та постачання витратних матеріалів" }, { "mcc": "4511", "shortDescription": "Авіалінії", "fullDescription": "Авіалінії, авіакомпанії" }, { "mcc": "4582", "shortDescription": "Аеропорти", "fullDescription": "Аеропорти, термінали аеропортів, льотні поля" }, { "mcc": "4722", "shortDescription": "Туризм", "fullDescription": "Туристичні агентства та організатори екскурсій" }, { "mcc": "4723", "shortDescription": "Туроператори", "fullDescription": "Пакетні туроператори - тільки Німеччина" }, { "mcc": "4729", "shortDescription": "Транспортні послуги", "fullDescription": "Послуги пасажирських перевезень" }, { "mcc": "4761", "shortDescription": "Телемаркетинг", "fullDescription": "Телемаркетинг туристичних послуг та вітамінів" }, { "mcc": "4784", "shortDescription": "Платні дороги", "fullDescription": "Платні дороги і мости" }, { "mcc": "4785", "shortDescription": "Різне", "fullDescription": "Різне" }, { "mcc": "4789", "shortDescription": "Залізниця", "fullDescription": "Послуги залізничих перевезень" }, { "mcc": "4812", "shortDescription": "Телекомунікаційне обладнання", "fullDescription": "Телекомунікаційне обладнання, включаючи продаж телефонів" }, { "mcc": "4813", "shortDescription": "Торгові точки з телефонією", "fullDescription": "Торгові точки телеком клавішного введення, що пропонують поодинокі локальні і далекі телефонні дзвінки, використовуючи центральний номер доступу без розмови з оператором і використовуючи код доступу" }, { "mcc": "4814", "shortDescription": "Мобільний зв'язок", "fullDescription": "Телекомунікаційні послуги" }, { "mcc": "4815", "shortDescription": "Телефонні послуги", "fullDescription": "Телефонні послуги" }, { "mcc": "4816", "shortDescription": "Інформаційні послуги", "fullDescription": "Комп'ютерні мережі, інформаційні послуги" }, { "mcc": "4821", "shortDescription": "Телеграф", "fullDescription": "Послуги телеграфу" }, { "mcc": "4829", "shortDescription": "Переказ коштів", "fullDescription": "Банківський переказ грошових доручень / Грошові перекази" }, { "mcc": "4899", "shortDescription": "Телебачення", "fullDescription": "Кабельні та інші платні телевізійні послуги" }, { "mcc": "4900", "shortDescription": "Комунальні послуги", "fullDescription": "Комунальні послуги - електрика, газ, мазут, санітарія, вода" }, { "mcc": "5013", "shortDescription": "Автозапчастини", "fullDescription": "Постачання автотранспортних засобів та нові запчастини" }, { "mcc": "5021", "shortDescription": "Меблі", "fullDescription": "Офісні та комерційні меблі" }, { "mcc": "5039", "shortDescription": "Будматеріали", "fullDescription": "Будівельні матеріали" }, { "mcc": "5044", "shortDescription": "Офісне приладдя", "fullDescription": "Офісне фотографічне, фотокопіювальне, і мікрофільмуюче обладнання" }, { "mcc": "5045", "shortDescription": "Комп'ютери та програмне забезпечення", "fullDescription": "Комп'ютери, комп'ютерна периферія, програмне забезпечення" }, { "mcc": "5046", "shortDescription": "Обладнання", "fullDescription": "Комерційне обладнання" }, { "mcc": "5047", "shortDescription": "Медичне обладнання", "fullDescription": "Стоматологічне / лабораторне / медичне / офтальмологічне обладнання та матеріали для лікарень" }, { "mcc": "5051", "shortDescription": "Обробка металу", "fullDescription": "Центри і офіси робіт по металу" }, { "mcc": "5065", "shortDescription": "Електроніка", "fullDescription": "Електричні частини та обладнання" }, { "mcc": "5072", "shortDescription": "Апаратура", "fullDescription": "Устаткування і супутні матеріали для технічного забезпечення" }, { "mcc": "5074", "shortDescription": "Сантехніка", "fullDescription": "Устаткування для водопроводу і опалювальної системи" }, { "mcc": "5085", "shortDescription": "Промисловість", "fullDescription": "Промислове обладнання" }, { "mcc": "5094", "shortDescription": "Дорогоцінності", "fullDescription": "Коштовне каміння та метали, годинники і ювелірні вироби" }, { "mcc": "5099", "shortDescription": "Товари", "fullDescription": "Товари довготривалого користування" }, { "mcc": "5111", "shortDescription": "Канцелярія", "fullDescription": "Канцелярія, офісні супутні товари, папір для друкування і листування" }, { "mcc": "5122", "shortDescription": "Ліки", "fullDescription": "Ліки, їх розповсюджувачі, аптеки" }, { "mcc": "5131", "shortDescription": "Галантерея", "fullDescription": "Штучні товари, галантерея та інші текстильні товари" }, { "mcc": "5137", "shortDescription": "Одяг", "fullDescription": "Чоловічий, жіночий і дитячий спецодяг" }, { "mcc": "5139", "shortDescription": "Взуття", "fullDescription": "Комерційне взуття" }, { "mcc": "5169", "shortDescription": "Хімія", "fullDescription": "Хімікалії і суміжні речовини" }, { "mcc": "5172", "shortDescription": "Бензин", "fullDescription": "Нафта і нафтопродукти" }, { "mcc": "5192", "shortDescription": "Книги. Преса", "fullDescription": "Книги, періодичні видання та газети" }, { "mcc": "5193", "shortDescription": "Квіти", "fullDescription": "Приналежності для флористів, розсадники і квіти" }, { "mcc": "5198", "shortDescription": "Фарби", "fullDescription": "Лакофарбова продукція та супутні товари" }, { "mcc": "5199", "shortDescription": "Товари", "fullDescription": "Товари нетривалого користування" }, { "mcc": "5200", "shortDescription": "Товари для дому", "fullDescription": "Магазини товарів для дому" }, { "mcc": "5211", "shortDescription": "Будматеріали", "fullDescription": "Будівельні матеріали, магазини пиломатеріалів" }, { "mcc": "5231", "shortDescription": "Ремонт", "fullDescription": "Магазини скла, фарби, шпалер" }, { "mcc": "5251", "shortDescription": "Господарських товари", "fullDescription": "Магазини господарських товарів" }, { "mcc": "5261", "shortDescription": "Садове приладдя", "fullDescription": "Магазини товарів для саду та городу" }, { "mcc": "5262", "shortDescription": "Маркетплейси", "fullDescription": "Маркетплейси" }, { "mcc": "5271", "shortDescription": "Будинки на колесах", "fullDescription": "Дилери мобільних будинків" }, { "mcc": "5292", "shortDescription": "Різне", "fullDescription": "Різне" }, { "mcc": "5295", "shortDescription": "Різне", "fullDescription": "Різне" }, { "mcc": "5297", "shortDescription": "Роздрібні магазини", "fullDescription": "Онлайн магазини роздрібної торгівлі" }, { "mcc": "5298", "shortDescription": "Роздрібні магазини", "fullDescription": "Продуктові інтернет магазини" }, { "mcc": "5299", "shortDescription": "Продаж газу", "fullDescription": "Продаж газу" }, { "mcc": "5300", "shortDescription": "Оптовики", "fullDescription": "Оптові магазини" }, { "mcc": "5309", "shortDescription": "Duty Free", "fullDescription": "Безмитні магазини" }, { "mcc": "5310", "shortDescription": "Дискаунтери", "fullDescription": "Дисконтні магазини" }, { "mcc": "5311", "shortDescription": "Універмаги", "fullDescription": "Універмаги" }, { "mcc": "5331", "shortDescription": "Універсальні магазини", "fullDescription": "Універсальний магазин" }, { "mcc": "5399", "shortDescription": "Універсальні магазини", "fullDescription": "Інші магазини загальних товарів" }, { "mcc": "5411", "shortDescription": "Продукти", "fullDescription": "Продуктові магазини, супермаркети" }, { "mcc": "5415", "shortDescription": "Різне", "fullDescription": "Різне" }, { "mcc": "5422", "shortDescription": "М'ясо", "fullDescription": "Продаж свіжого та замороженого м'яса" }, { "mcc": "5441", "shortDescription": "Солодощі", "fullDescription": "Магазини цукерок, горіхів та кондитерських виробів" }, { "mcc": "5451", "shortDescription": "Фермерські товари", "fullDescription": "Магазини молочних продуктів" }, { "mcc": "5462", "shortDescription": "Пекарні", "fullDescription": "Пекарні" }, { "mcc": "5499", "shortDescription": "Продукти", "fullDescription": "Інші продовольчі магазини - цілодобові магазини, ринки, спеціалізовані магазини та торгові автомати" }, { "mcc": "5511", "shortDescription": "Автосалони", "fullDescription": "Легковий і вантажний транспорт - продаж, сервіс, ремонт, запчастини та лізинг" }, { "mcc": "5521", "shortDescription": "Автосалони", "fullDescription": "Продавці автомобілів та вантажівок (тільки вживані)" }, { "mcc": "5531", "shortDescription": "Автозапчастини", "fullDescription": "Автомагазини і товари для дому" }, { "mcc": "5532", "shortDescription": "Шини", "fullDescription": "Магазини автомобільних шин" }, { "mcc": "5533", "shortDescription": "Автомагазини", "fullDescription": "Магазини автозапчастин та аксесуарів" }, { "mcc": "5541", "shortDescription": "СТО", "fullDescription": "Станції технічного обслуговування (з або без допоміжних послуг)" }, { "mcc": "5542", "shortDescription": "АЗС", "fullDescription": "Автоматичні заправні станції" }, { "mcc": "5551", "shortDescription": "Човни", "fullDescription": "Продавці човнів" }, { "mcc": "5552", "shortDescription": "Зарядка електромобілів", "fullDescription": "Станції зарядки електромобілів" }, { "mcc": "5561", "shortDescription": "Автосалони", "fullDescription": "Будинки-автопричепи, житлові нерозбірні і вантажні причепи" }, { "mcc": "5571", "shortDescription": "Автосалони", "fullDescription": "Магазини мотоциклів та дилери" }, { "mcc": "5592", "shortDescription": "Автосалони", "fullDescription": "Дилери будинків на колесах" }, { "mcc": "5598", "shortDescription": "Автосалони", "fullDescription": "Дилери снігоходів" }, { "mcc": "5599", "shortDescription": "Автосалони", "fullDescription": "Продавці різного автомобільного, авіаційного та сільськогосподарського обладнання" }, { "mcc": "5611", "shortDescription": "Чоловічий одяг", "fullDescription": "Магазини одягу та аксесуарів для чоловіків та хлопців" }, { "mcc": "5621", "shortDescription": "Жіночий одяг", "fullDescription": "Магазини жіночого одягу" }, { "mcc": "5631", "shortDescription": "Жіночий одяг", "fullDescription": "Жіночі аксесуари та спеціалізовані магазини" }, { "mcc": "5641", "shortDescription": "Дитячий одяг", "fullDescription": "Магазини одягу для дітей та немовлят" }, { "mcc": "5651", "shortDescription": "Одяг", "fullDescription": "Магазини сімейного одягу" }, { "mcc": "5655", "shortDescription": "Спортивний одяг", "fullDescription": "Магазини спортивного одягу та одягу для верхової їзди" }, { "mcc": "5661", "shortDescription": "Взуття", "fullDescription": "Взуттєві магазини" }, { "mcc": "5681", "shortDescription": "Хутро", "fullDescription": "Хутряні магазини" }, { "mcc": "5691", "shortDescription": "Одяг", "fullDescription": "Магазини чоловічого та жіночого одягу" }, { "mcc": "5697", "shortDescription": "Ательє", "fullDescription": "Переробки, ремонт, швачки, кравці" }, { "mcc": "5698", "shortDescription": "Перуки", "fullDescription": "Перуки і накладки з штучного волосся" }, { "mcc": "5699", "shortDescription": "Аксесуари", "fullDescription": "Магазини аксесуарів та одягу - Різне" }, { "mcc": "5712", "shortDescription": "Фурнітура", "fullDescription": "Магазини обладнання, меблів та побутових предметів (крім побутової техніки)" }, { "mcc": "5713", "shortDescription": "Покриття для підлоги", "fullDescription": "Магазини підлогових покриттів" }, { "mcc": "5714", "shortDescription": "Штори. Фіранки", "fullDescription": "Тканини, оббивний матеріал, гардини і портьєри, жалюзі" }, { "mcc": "5715", "shortDescription": "Спиртні напої", "fullDescription": "Оптові продавці алкоголю" }, { "mcc": "5718", "shortDescription": "Каміни", "fullDescription": "Магазини камінів, камінних екранів і аксесуарів" }, { "mcc": "5719", "shortDescription": "Фурнітура", "fullDescription": "Різні спеціалізовані магазини меблів для дому" }, { "mcc": "5722", "shortDescription": "Побутова техніка", "fullDescription": "Магазини побутової техніки" }, { "mcc": "5732", "shortDescription": "Побутова техніка", "fullDescription": "Продаж електроніки" }, { "mcc": "5733", "shortDescription": "Музичні інструменти", "fullDescription": "Музичні магазини - музичні інструменти, фортепіано та ноти" }, { "mcc": "5734", "shortDescription": "Комп'ютерне ПЗ", "fullDescription": "Магазини комп'ютерного програмного забезпечення" }, { "mcc": "5735", "shortDescription": "Магазини звукозапису", "fullDescription": "Магазини звукозапису" }, { "mcc": "5811", "shortDescription": "Доставка їжі", "fullDescription": "Доставка їжі" }, { "mcc": "5812", "shortDescription": "Кафе. Ресторани", "fullDescription": "Місця харчування і ресторани" }, { "mcc": "5813", "shortDescription": "Бари", "fullDescription": "Бари, коктейль-бари, дискотеки, нічні клуби і таверни - місця продажу алкогольних напоїв" }, { "mcc": "5814", "shortDescription": "Фаст-фуд", "fullDescription": "Ресторани швидкого харчування" }, { "mcc": "5815", "shortDescription": "Цифрові товари", "fullDescription": "Цифрові товари: книги, фільми, музика" }, { "mcc": "5816", "shortDescription": "Ігри", "fullDescription": "Цифрові товари: Ігри" }, { "mcc": "5817", "shortDescription": "Програмне забезпечення", "fullDescription": "Цифрові товари: додатки (крім ігор)" }, { "mcc": "5818", "shortDescription": "Цифрові товари", "fullDescription": "Цифрові товари: мультикатегорія" }, { "mcc": "5832", "shortDescription": "Антикваріат", "fullDescription": "Антикварні магазини - послуги з продажу, ремонту та реставрації" }, { "mcc": "5912", "shortDescription": "Аптеки", "fullDescription": "Аптеки" }, { "mcc": "5921", "shortDescription": "Спиртні напої", "fullDescription": "Магазини з продажем спиртних напоїв на винос" }, { "mcc": "5931", "shortDescription": "Секонд-хенд", "fullDescription": "Секонд-хенди, магазини б/в товарів, комісійні магазини" }, { "mcc": "5932", "shortDescription": "Антикваріат", "fullDescription": "Антикварні магазини - послуги з продажу, ремонту та реставрації" }, { "mcc": "5933", "shortDescription": "Ломбарди", "fullDescription": "Ломбарди" }, { "mcc": "5935", "shortDescription": "Автозвалище", "fullDescription": "Знищення і збір залишків" }, { "mcc": "5937", "shortDescription": "Магазини репродукцій", "fullDescription": "Магазини антикварних репродукцій" }, { "mcc": "5940", "shortDescription": "Велосипеди", "fullDescription": "Магазини велосипедів - Продажі та обслуговування" }, { "mcc": "5941", "shortDescription": "Товари для спорту", "fullDescription": "Магазини спортивних товарів" }, { "mcc": "5942", "shortDescription": "Книгарні", "fullDescription": "Книгарні" }, { "mcc": "5943", "shortDescription": "Канцтовари", "fullDescription": "Магазини офісного, шкільного та канцелярського призначення" }, { "mcc": "5944", "shortDescription": "Годинники", "fullDescription": "Годинники, ювелірні та срібні вироби" }, { "mcc": "5945", "shortDescription": "Іграшки", "fullDescription": "Магазини ігор, іграшок та хобі" }, { "mcc": "5946", "shortDescription": "Фототовари", "fullDescription": "Магазини фотокамер та фотографій" }, { "mcc": "5947", "shortDescription": "Сувеніри", "fullDescription": "Магазини карт, подарунків, новинок і сувенірів" }, { "mcc": "5948", "shortDescription": "Шкіряні вироби", "fullDescription": "Магазини шкіряних виробів, дорожніх речей" }, { "mcc": "5949", "shortDescription": "Товари для шиття", "fullDescription": "Тканина, рукоділля, штучні вироби та швейні магазини" }, { "mcc": "5950", "shortDescription": "Кришталь / посуд", "fullDescription": "Магазини кришталю та скляного посуду" }, { "mcc": "5960", "shortDescription": "Страхування", "fullDescription": "Прямий маркетинг - страхові послуги" }, { "mcc": "5961", "shortDescription": "Товари поштою", "fullDescription": "Замовлення поштою, включаючи замовлення по каталогу" }, { "mcc": "5962", "shortDescription": "Подорожі", "fullDescription": "Прямий маркетинг - послуги, що пов'язані з туризмом" }, { "mcc": "5963", "shortDescription": "Комівояжери", "fullDescription": "Продаж \"від дверей до дверей\"" }, { "mcc": "5964", "shortDescription": "Товари поштою", "fullDescription": "Прямий маркетинг - торгівля за каталогами" }, { "mcc": "5965", "shortDescription": "Товари поштою", "fullDescription": "Прямий маркетинг - комбінований каталог та роздрібна торгівля" }, { "mcc": "5966", "shortDescription": "Товари поштою", "fullDescription": "маркетинг - вихідний телемаркетинг" }, { "mcc": "5967", "shortDescription": "Інформаційні послуги", "fullDescription": "Прямий маркетинг - вхідний телемаркетинг" }, { "mcc": "5968", "shortDescription": "Підписки", "fullDescription": "Прямий маркетинг - Продаж по підписці" }, { "mcc": "5969", "shortDescription": "Товари поштою", "fullDescription": "Прямий маркетинг - інші торгові точки прямого маркетингу" }, { "mcc": "5970", "shortDescription": "Художні товари", "fullDescription": "Магазини товарів для художників, ремісничі магазини" }, { "mcc": "5971", "shortDescription": "Галереї", "fullDescription": "Дилери та галереї мистецтв" }, { "mcc": "5972", "shortDescription": "Філателістика", "fullDescription": "Магазини марок та монет - Філателія та нумізматичні приладдя" }, { "mcc": "5973", "shortDescription": "Церковні лавки", "fullDescription": "Магазини релігійних товарів" }, { "mcc": "5974", "shortDescription": "Штампи", "fullDescription": "Магазини гумових штампів" }, { "mcc": "5975", "shortDescription": "Слухові апарати", "fullDescription": "Слухові апарати - продаж, сервіс, постачання" }, { "mcc": "5976", "shortDescription": "Протези", "fullDescription": "Ортопедичні товари - магазини протезів" }, { "mcc": "5977", "shortDescription": "Косметика", "fullDescription": "Магазини косметики" }, { "mcc": "5978", "shortDescription": "Друкарські машини", "fullDescription": "Магазини друкуючих пристроїв - оренда, продаж, послуги" }, { "mcc": "5983", "shortDescription": "Паливо", "fullDescription": "Постачальники палива - вугілля, мазут, зріджена нафта, деревина" }, { "mcc": "5992", "shortDescription": "Флористика", "fullDescription": "Флористика" }, { "mcc": "5993", "shortDescription": "Тютюнові вироби", "fullDescription": "Магазини та стенди для сигар" }, { "mcc": "5994", "shortDescription": "Газети. Журнали", "fullDescription": "Дилери з продажу друкованої продукції" }, { "mcc": "5995", "shortDescription": "Зоотовари", "fullDescription": "Зоомагазини, корм і товари для домашніх тварин" }, { "mcc": "5996", "shortDescription": "Басейни", "fullDescription": "Басейни - продаж та постачання" }, { "mcc": "5997", "shortDescription": "Бритви", "fullDescription": "Магазини електричних бритв - продаж та обслуговування" }, { "mcc": "5998", "shortDescription": "Тенти", "fullDescription": "Наметові та тентові магазини" }, { "mcc": "5999", "shortDescription": "Різне", "fullDescription": "Різні та спеціалізовані роздрібні магазини" }, { "mcc": "6010", "shortDescription": "Каси", "fullDescription": "Фінансові установи - видача готівки в касі" }, { "mcc": "6011", "shortDescription": "Каси", "fullDescription": "Фінансові установи - зняття готівки автоматично" }, { "mcc": "6012", "shortDescription": "Фінансові послуги", "fullDescription": "Фінансові установи - торгівля та послуги" }, { "mcc": "6022", "shortDescription": "Банки", "fullDescription": "Фінансова установа (внутрішня відновлювана кредитна лінія)" }, { "mcc": "6023", "shortDescription": "Банки", "fullDescription": "Державні банки (внутрішня відновлювана кредитна лінія)" }, { "mcc": "6025", "shortDescription": "Банки", "fullDescription": "Національні банки (внутрішня відновлювана кредитна лінія)" }, { "mcc": "6026", "shortDescription": "Банки", "fullDescription": "Національні банки, не федеральні (внутрішня відновлювана кредитна лінія)" }, { "mcc": "6028", "shortDescription": "Банки", "fullDescription": "Некорпоративні приватні банки (внутрішня відновлювана кредитна лінія)" }, { "mcc": "6050", "shortDescription": "Квазі-кеш", "fullDescription": "Квазі-кеш - Фінансові установи" }, { "mcc": "6051", "shortDescription": "Квазі-кеш", "fullDescription": "Квазі-Кеш - Нефінансові установи" }, { "mcc": "6211", "shortDescription": "Цінні папери", "fullDescription": "Послуги брокерів на ринку цінних паперів" }, { "mcc": "6236", "shortDescription": "Цінні папери", "fullDescription": "Aserca Airlines / Aero Servicio Carabobo (Венесуела)" }, { "mcc": "6300", "shortDescription": "Страхування", "fullDescription": "Послуги страхових компаній" }, { "mcc": "6381", "shortDescription": "Страхування", "fullDescription": "Страхування - премії" }, { "mcc": "6399", "shortDescription": "Страхування", "fullDescription": "Страхування" }, { "mcc": "6513", "shortDescription": "Оренда нерухомості", "fullDescription": "Агенти та менеджери з нерухомості - оренда" }, { "mcc": "6529", "shortDescription": "Поповнення картки", "fullDescription": "Віддалене поповнення передплаченої карти - Фінансові організації" }, { "mcc": "6530", "shortDescription": "Поповнення картки", "fullDescription": "Віддалене поповнення передоплаченої карти - Торгова точка" }, { "mcc": "6531", "shortDescription": "Переказ коштів", "fullDescription": "Оплата послуг - грошові перекази" }, { "mcc": "6532", "shortDescription": "Переказ коштів", "fullDescription": "Платіжна операція - фінансова установа" }, { "mcc": "6533", "shortDescription": "Переказ коштів", "fullDescription": "Платіжна операція - продавець" }, { "mcc": "6534", "shortDescription": "Переказ коштів", "fullDescription": "Грошовий переказ - фінансова установа" }, { "mcc": "6535", "shortDescription": "Переказ коштів", "fullDescription": "Права вимоги на цінності - Фінансові організації" }, { "mcc": "6536", "shortDescription": "Переказ коштів", "fullDescription": "Грошові перекази з картки на картку - зарахування (всередині країни)" }, { "mcc": "6537", "shortDescription": "Переказ коштів", "fullDescription": "Грошові перекази з картки на картку - зарахування (між країнами)" }, { "mcc": "6538", "shortDescription": "Переказ коштів", "fullDescription": "Грошові перекази з картки на картку - списання" }, { "mcc": "6539", "shortDescription": "Переказ коштів", "fullDescription": "Транзакція по фінансуванню (виключаючи MoneySend)" }, { "mcc": "6540", "shortDescription": "Переказ коштів", "fullDescription": "Поповнення небанківських передплачених карт та рахунків" }, { "mcc": "6611", "shortDescription": "Переказ коштів", "fullDescription": "Переплата (авансові платежі)" }, { "mcc": "6760", "shortDescription": "Облігації", "fullDescription": "Ощадні облігації" }, { "mcc": "7011", "shortDescription": "Готелі та курорти", "fullDescription": "Готелі та курорти" }, { "mcc": "7012", "shortDescription": "Тайм-шери", "fullDescription": "Тайм-шери" }, { "mcc": "7032", "shortDescription": "Рекреація", "fullDescription": "Спортивно-оздоровчі табори" }, { "mcc": "7033", "shortDescription": "Кемпінг", "fullDescription": "Наметові табори та причіпні парки" }, { "mcc": "7210", "shortDescription": "Прання й прибирання", "fullDescription": "Послуги з прибирання та пральні" }, { "mcc": "7211", "shortDescription": "Прання", "fullDescription": "Послуги пральні - сімейні та комерційні" }, { "mcc": "7216", "shortDescription": "Хімчистка", "fullDescription": "Хімчистка" }, { "mcc": "7217", "shortDescription": "Чистка", "fullDescription": "Чистка килимів та оббивки" }, { "mcc": "7221", "shortDescription": "Фотостудія", "fullDescription": "Фотостудія" }, { "mcc": "7230", "shortDescription": "Краса", "fullDescription": "Перукарні та салони краси" }, { "mcc": "7251", "shortDescription": "Ремонт одягу", "fullDescription": "Чистка капелюхів, ремонт і полірування взуття" }, { "mcc": "7261", "shortDescription": "Ритуальні послуги", "fullDescription": "Похоронні служби та крематорії" }, { "mcc": "7272", "shortDescription": "Ескорт", "fullDescription": "Послуги ескорту" }, { "mcc": "7273", "shortDescription": "Знайомства. Ескорт", "fullDescription": "Послуги знайомств" }, { "mcc": "7276", "shortDescription": "Податки", "fullDescription": "Служба підготовки податків" }, { "mcc": "7277", "shortDescription": "Консультація", "fullDescription": "Борги, шлюб, особисті питання - консультування" }, { "mcc": "7278", "shortDescription": "Покупки", "fullDescription": "Послуги покупок / шопінгу" }, { "mcc": "7280", "shortDescription": "Лікарні", "fullDescription": "Пацієнт лікарні - виведення особистих коштів" }, { "mcc": "7295", "shortDescription": "Няні", "fullDescription": "Послуги няні" }, { "mcc": "7296", "shortDescription": "Прокат одягу", "fullDescription": "Здача в оренду костюмів, уніформи, простий одягу" }, { "mcc": "7297", "shortDescription": "Масаж", "fullDescription": "Салони масажу" }, { "mcc": "7298", "shortDescription": "Здоров'я й краса", "fullDescription": "Салони краси та здоров'я" }, { "mcc": "7299", "shortDescription": "Різне", "fullDescription": "Інші послуги" }, { "mcc": "7311", "shortDescription": "Реклама", "fullDescription": "Рекламні послуги" }, { "mcc": "7321", "shortDescription": "БКІ", "fullDescription": "Бюро кредитних історій" }, { "mcc": "7322", "shortDescription": "Колектори", "fullDescription": "Агентства стягнення боргів" }, { "mcc": "7332", "shortDescription": "Копі-центри", "fullDescription": "Креслярські і копіювальні послуги" }, { "mcc": "7333", "shortDescription": "Фотографія й мистецтво", "fullDescription": "Комерційне мистецтво, графіка, фотографія" }, { "mcc": "7338", "shortDescription": "Копі-центри", "fullDescription": "Послуги швидкого копіювання, відтворення та друку" }, { "mcc": "7339", "shortDescription": "Стенографія", "fullDescription": "Служби стенографічної та секретарської підтримки" }, { "mcc": "7342", "shortDescription": "Дезінфекція", "fullDescription": "Дезінсекція, дезінфекція та дератизація" }, { "mcc": "7349", "shortDescription": "Чистка й обслуговування", "fullDescription": "Прибирання і технічне обслуговування будівель і приміщень" }, { "mcc": "7361", "shortDescription": "Працевлаштування", "fullDescription": "Агенції зайнятості та служби тимчасової допомоги" }, { "mcc": "7372", "shortDescription": "Програмування", "fullDescription": "Комп'ютерне програмування, обробка даних і послуги з проектування інтегрованих систем" }, { "mcc": "7375", "shortDescription": "Інформаційні послуги", "fullDescription": "Служби пошуку інформації" }, { "mcc": "7379", "shortDescription": "Ремонт комп'ютерів", "fullDescription": "Комп'ютерне обслуговування, ремонт і послуги" }, { "mcc": "7389", "shortDescription": "Бізнес послуги", "fullDescription": "Бізнес послуги" }, { "mcc": "7392", "shortDescription": "Консультації, PR", "fullDescription": "Послуги з консалтингу, управління та зв’язків з громадськістю" }, { "mcc": "7393", "shortDescription": "Детективні агентства", "fullDescription": "Детективні агентства, охоронні агентства, служби безпеки, включаючи броньовані автомобілі і сторожових собак" }, { "mcc": "7394", "shortDescription": "Оренда спорядження", "fullDescription": "Оренда обладнання та лізингові послуги, оренда меблів, прокат інструментів" }, { "mcc": "7395", "shortDescription": "Фотодрук", "fullDescription": "Фотостудії, фотолабораторії" }, { "mcc": "7399", "shortDescription": "Бізнес послуги", "fullDescription": "Бізнес послуги" }, { "mcc": "7511", "shortDescription": "Паркування", "fullDescription": "Стоянка вантажного транспорту" }, { "mcc": "7512", "shortDescription": "Оренда автомобілів", "fullDescription": "Агентства по оренді автомобілів" }, { "mcc": "7513", "shortDescription": "Оренда вантажівок", "fullDescription": "Оренда вантажівок" }, { "mcc": "7519", "shortDescription": "Оренда автомобілів", "fullDescription": "Прокат будинків на колесах та автомобілів для відпочинку" }, { "mcc": "7523", "shortDescription": "Паркування", "fullDescription": "Автомобільні стоянки і гаражі" }, { "mcc": "7524", "shortDescription": "Паркування", "fullDescription": "Постачальники послуг експрес-оплати автостоянок і гаражів" }, { "mcc": "7531", "shortDescription": "Ремонт авто", "fullDescription": "Майстерні з кузовного ремонту автомобілів" }, { "mcc": "7534", "shortDescription": "Шиномонтаж", "fullDescription": "Шиномонтаж та вулканізація" }, { "mcc": "7535", "shortDescription": "Автомобільні фарби", "fullDescription": "Магазини фарб для автомобілів" }, { "mcc": "7538", "shortDescription": "СТО", "fullDescription": "Автосервіси" }, { "mcc": "7542", "shortDescription": "Автомийки", "fullDescription": "Автомийки" }, { "mcc": "7549", "shortDescription": "Евакуатор", "fullDescription": "Послуги буксирування та евакуації" }, { "mcc": "7622", "shortDescription": "Ремонт техніки", "fullDescription": "Майстерні по ремонту електроніки" }, { "mcc": "7623", "shortDescription": "Ремонт кліматичної техніки", "fullDescription": "Майстерні по ремонту систем кондиціонування та охолодження" }, { "mcc": "7629", "shortDescription": "Ремонт техніки", "fullDescription": "Ремонт електрообладнання та малої побутової техніки" }, { "mcc": "7631", "shortDescription": "Ремонт годинників й ювелірних виробів", "fullDescription": "Центри ремонту годинників та чищення ювелірних виробів" }, { "mcc": "7641", "shortDescription": "Ремонт меблів", "fullDescription": "Оббивка, ремонт та оздоблення меблів" }, { "mcc": "7692", "shortDescription": "Зравювальні роботи", "fullDescription": "Зварювання та ремонт" }, { "mcc": "7699", "shortDescription": "Ремонт", "fullDescription": "Різні ремонтні магазини та супутні послуги" }, { "mcc": "7800", "shortDescription": "Державна лотерея", "fullDescription": "Державні лотереї (тільки США)" }, { "mcc": "7801", "shortDescription": "Онлайн-казино", "fullDescription": "Азартні ігри в інтернеті (тільки США)" }, { "mcc": "7802", "shortDescription": "Скачки", "fullDescription": "Кінські / собачі перегони (тільки США)" }, { "mcc": "7829", "shortDescription": "Прокат відео", "fullDescription": "Виробництво та розповсюдження кінофільмів та відеокасет" }, { "mcc": "7832", "shortDescription": "Кінотеатри", "fullDescription": "Кінотеатри" }, { "mcc": "7833", "shortDescription": "Кінотеатри", "fullDescription": "Експрес-оплата - Кінотеатр" }, { "mcc": "7841", "shortDescription": "Прокат відео", "fullDescription": "Прокат DVD / Відео касет" }, { "mcc": "7911", "shortDescription": "Танцювальні студії. Школи танцю", "fullDescription": "Танцювальні зали, школи та студії" }, { "mcc": "7922", "shortDescription": "Квитки", "fullDescription": "Театральні продюсери (крім кінофільмів), квиткові агентства" }, { "mcc": "7929", "shortDescription": "Музичні групи. Оркестри", "fullDescription": "Групи, оркестри та різноманітні артисти" }, { "mcc": "7932", "shortDescription": "Більярд", "fullDescription": "Більярд-клуби" }, { "mcc": "7933", "shortDescription": "Боулінг-клуби", "fullDescription": "Боулінг-клуби" }, { "mcc": "7941", "shortDescription": "Спортклуби", "fullDescription": "Атлетичні поля, комерційні види спорту, професійні спортивні клуби, промоутери спорту" }, { "mcc": "7991", "shortDescription": "Туризм", "fullDescription": "Туристичні пам'ятки та експонати" }, { "mcc": "7992", "shortDescription": "Гольф", "fullDescription": "Публічні поля для гольфу" }, { "mcc": "7993", "shortDescription": "Відеоігри", "fullDescription": "Аксесуари для відеоігор" }, { "mcc": "7994", "shortDescription": "Відеоігри", "fullDescription": "Клуби відеоігор" }, { "mcc": "7995", "shortDescription": "Азартні ігри", "fullDescription": "Азартні ігри, ставки" }, { "mcc": "7996", "shortDescription": "Розваги", "fullDescription": "Парки атракціонів, карнавали, цирки, ворожки" }, { "mcc": "7997", "shortDescription": "Розваги та спорт", "fullDescription": "Клуби - заміські клуби, членство (відпочинок, спорт), приватні поля для гольфу" }, { "mcc": "7998", "shortDescription": "Акваріуми. Дельфінарії", "fullDescription": "Акваріуми, дельфінарії, зоопарки і морські парки" }, { "mcc": "7999", "shortDescription": "Розваги та спорт", "fullDescription": "Послуги з відпочинку" }, { "mcc": "8011", "shortDescription": "Медецина", "fullDescription": "Лікарі" }, { "mcc": "8021", "shortDescription": "Стоматологія", "fullDescription": "Стоматологи та ортодонти" }, { "mcc": "8031", "shortDescription": "Медецина", "fullDescription": "Лікарі-остеопати" }, { "mcc": "8041", "shortDescription": "Хіропрактики", "fullDescription": "Хіропрактики" }, { "mcc": "8042", "shortDescription": "Оптика", "fullDescription": "Оптометристи та офтальмологи" }, { "mcc": "8043", "shortDescription": "Оптика", "fullDescription": "Оптики, оптичні товари та окуляри" }, { "mcc": "8044", "shortDescription": "Оптика", "fullDescription": "Оптичні товари та окуляри" }, { "mcc": "8049", "shortDescription": "Ортопеди", "fullDescription": "Ортопеди" }, { "mcc": "8050", "shortDescription": "Доглядальниці", "fullDescription": "Послуги по догляду та особистої гігієни" }, { "mcc": "8062", "shortDescription": "Лікарні", "fullDescription": "Лікарні" }, { "mcc": "8071", "shortDescription": "Медицина та стоматологія", "fullDescription": "Стоматологічна та медична лабораторії" }, { "mcc": "8099", "shortDescription": "Медичні послуги", "fullDescription": "Медичні працівники, медичні послуги" }, { "mcc": "8110", "shortDescription": "Юристи. Адвокати", "fullDescription": "Адвокати, юридичні послуги" }, { "mcc": "8111", "shortDescription": "Юристи. Адвокати", "fullDescription": "Адвокати, юридичні послуги" }, { "mcc": "8211", "shortDescription": "Школа", "fullDescription": "Початкові та середні школи" }, { "mcc": "8220", "shortDescription": "Освіта. Університет", "fullDescription": "Коледжі, університети, професійні училища та технікуми" }, { "mcc": "8241", "shortDescription": "Дистанційна освіта", "fullDescription": "Школи, заочна / дистанційна освіта" }, { "mcc": "8244", "shortDescription": "Освіта. Бізнес", "fullDescription": "Бізнес / секретарські школи" }, { "mcc": "8249", "shortDescription": "Освіта", "fullDescription": "Професійні школи і училища" }, { "mcc": "8299", "shortDescription": "Освіта", "fullDescription": "Школи та освітні послуги" }, { "mcc": "8351", "shortDescription": "Дитячий садок", "fullDescription": "Послуги з догляду за дітьми" }, { "mcc": "8398", "shortDescription": "Благодійність", "fullDescription": "Організації, благодійні та соціальні служби" }, { "mcc": "8641", "shortDescription": "Громадські організації", "fullDescription": "Цивільні, соціальні та братські асоціації" }, { "mcc": "8651", "shortDescription": "Політичні організації", "fullDescription": "Політичні організації" }, { "mcc": "8661", "shortDescription": "Релігійні організації", "fullDescription": "Релігійні організації" }, { "mcc": "8664", "shortDescription": "Різне", "fullDescription": "Різне" }, { "mcc": "8675", "shortDescription": "Автоклуб", "fullDescription": "Автомобільні асоціації" }, { "mcc": "8699", "shortDescription": "Членські організації", "fullDescription": "Членські організації" }, { "mcc": "8734", "shortDescription": "Випробувальні лабораторії", "fullDescription": "Випробувальні лабораторії (немедичні)" }, { "mcc": "8743", "shortDescription": "Випробувальні лабораторії", "fullDescription": "Випробувальні лабораторії (немедичні)" }, { "mcc": "8911", "shortDescription": "Архітектори", "fullDescription": "Архітектурні, інженерні та геодезичні послуги" }, { "mcc": "8931", "shortDescription": "Бухгалтерія. Аудит", "fullDescription": "Аудит і бухгалтерський облік" }, { "mcc": "8999", "shortDescription": "Професійні послуги", "fullDescription": "Професійні послуги" }, { "mcc": "9034", "shortDescription": "I-Purchasing Pilot", "fullDescription": "I-Purchasing Pilot" }, { "mcc": "9211", "shortDescription": "Суд", "fullDescription": "Судові виплати, включаючи аліменти і дитячу підтримку" }, { "mcc": "9222", "shortDescription": "Штрафи", "fullDescription": "Штрафи" }, { "mcc": "9223", "shortDescription": "Виплати. Облігації", "fullDescription": "Сплата застави та облігацій" }, { "mcc": "9311", "shortDescription": "Податки", "fullDescription": "Податкові платежі" }, { "mcc": "9399", "shortDescription": "Державні послуги", "fullDescription": "Державні послуги" }, { "mcc": "9401", "shortDescription": "I-Purchasing Pilot", "fullDescription": "I-Purchasing Pilot" }, { "mcc": "9402", "shortDescription": "Пошта", "fullDescription": "Поштові послуги - тільки уряд" }, { "mcc": "9405", "shortDescription": "Урядові закупівлі", "fullDescription": "Внутрішньодержавні закупівлі - тільки уряд" }, { "mcc": "9406", "shortDescription": "Державна лотерея", "fullDescription": "Державні лотереї (крім США)" }, { "mcc": "9411", "shortDescription": "Державні послуги", "fullDescription": "Платежі по державному займу" }, { "mcc": "9700", "shortDescription": "Кешбек", "fullDescription": "Автоматизована реферальна служба" }, { "mcc": "9701", "shortDescription": "VISA", "fullDescription": "Служба перевірки облікових даних Visa (тільки VISA)" }, { "mcc": "9702", "shortDescription": "Аварійні служби", "fullDescription": "Аварійні служби GCAS (тільки VISA)" }, { "mcc": "9751", "shortDescription": "Документообіг", "fullDescription": "Супермаркети (Великобританія)" }, { "mcc": "9752", "shortDescription": "Документообіг", "fullDescription": "Автозаправні станції (Великобританія)" }, { "mcc": "9754", "shortDescription": "Скачки", "fullDescription": "Кінські / собачі перегони" }, { "mcc": "9950", "shortDescription": "Купівлі всередині компанії", "fullDescription": "Покупки всередині компанії" }, { "mcc": "9999", "shortDescription": "Різне", "fullDescription": "Різне" }];

    const ShowInfo = (message, duration = 2000) => {
        infoMSG.set([message]);
        setTimeout(() => infoMSG.set([]), duration);
    };




    const GetDescriptionMCC = (code, short = true, lg = "en") => {

        var desc = [];

        if (lg == "en")
            desc = mccDataEN.find(el => el.mcc == code);
        if (lg == "uk")
            desc = mccDataUK.find(el => el.mcc == code);


        if (desc == null || desc == undefined || desc.length == 0) desc = code;
        else {
            desc = short ? desc.shortDescription : desc.fullDescription;
        }
        return desc;
    };

    /* src\components\transaction\TransactionList.svelte generated by Svelte v3.48.0 */

    const { Object: Object_1 } = globals;
    const file$d = "src\\components\\transaction\\TransactionList.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    // (246:0) {:else}
    function create_else_block_2(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "No transactions";
    			attr_dev(h1, "class", "text-center");
    			add_location(h1, file$d, 246, 4, 12048);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(246:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (86:20) <Dialog                          ModalID="modal_remove_t_{transaction.id}"                          ConfirmFunction={ActionToRemove}                          ConfirmFunctionParams={{ id: transaction.id }}                      >
    function create_default_slot$2(ctx) {
    	let h1;
    	let t1;
    	let br;
    	let t2;
    	let div4;
    	let div0;
    	let p0;
    	let t3_value = /*transaction*/ ctx[9].transactionDescriptionCategory?.name + "";
    	let t3;
    	let t4;
    	let p1;
    	let t5_value = new Date(/*transaction*/ ctx[9].date).toLocaleString().split(",")[1] + "";
    	let t5;
    	let t6;
    	let div1;
    	let t7;
    	let div3;

    	let t8_value = ((/*transaction*/ ctx[9].transactionDescriptionCategory?.income)
    	? "+"
    	: "-") + "";

    	let t8;
    	let t9;
    	let t10_value = /*transaction*/ ctx[9].balance.amount + "";
    	let t10;
    	let t11;
    	let div2;
    	let t12_value = /*transaction*/ ctx[9].balance.currency + "";
    	let t12;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "You really want to remove transaction?";
    			t1 = space();
    			br = element("br");
    			t2 = space();
    			div4 = element("div");
    			div0 = element("div");
    			p0 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			p1 = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			div1 = element("div");
    			t7 = space();
    			div3 = element("div");
    			t8 = text(t8_value);
    			t9 = space();
    			t10 = text(t10_value);
    			t11 = space();
    			div2 = element("div");
    			t12 = text(t12_value);
    			add_location(h1, file$d, 90, 24, 3456);
    			add_location(br, file$d, 91, 24, 3529);
    			attr_dev(p0, "class", "text-sm font-medium text-gray-900 truncate");
    			set_style(p0, "color", /*transaction*/ ctx[9].transactionDescriptionCategory?.color);
    			add_location(p0, file$d, 94, 32, 3671);
    			attr_dev(p1, "class", "text-sm text-gray-500 truncate");
    			add_location(p1, file$d, 102, 32, 4143);
    			attr_dev(div0, "class", "flex-0 min-w-0");
    			add_location(div0, file$d, 93, 28, 3609);
    			attr_dev(div1, "class", "flex-1");
    			add_location(div1, file$d, 108, 28, 4470);
    			attr_dev(div2, "class", "badge badge-outline ml-1");
    			add_location(div2, file$d, 122, 32, 5230);
    			attr_dev(div3, "class", "inline-flex text-xl items-center text-base font-semibold");

    			set_style(div3, "color", (/*transaction*/ ctx[9].transactionDescriptionCategory?.income)
    			? 'green'
    			: 'red');

    			add_location(div3, file$d, 109, 28, 4526);
    			attr_dev(div4, "class", "flex");
    			add_location(div4, file$d, 92, 24, 3561);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, br, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, p0);
    			append_dev(p0, t3);
    			append_dev(div0, t4);
    			append_dev(div0, p1);
    			append_dev(p1, t5);
    			append_dev(div4, t6);
    			append_dev(div4, div1);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div3, t8);
    			append_dev(div3, t9);
    			append_dev(div3, t10);
    			append_dev(div3, t11);
    			append_dev(div3, div2);
    			append_dev(div2, t12);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*groupedTransactions*/ 1 && t3_value !== (t3_value = /*transaction*/ ctx[9].transactionDescriptionCategory?.name + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*groupedTransactions*/ 1) {
    				set_style(p0, "color", /*transaction*/ ctx[9].transactionDescriptionCategory?.color);
    			}

    			if (dirty & /*groupedTransactions*/ 1 && t5_value !== (t5_value = new Date(/*transaction*/ ctx[9].date).toLocaleString().split(",")[1] + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*groupedTransactions*/ 1 && t8_value !== (t8_value = ((/*transaction*/ ctx[9].transactionDescriptionCategory?.income)
    			? "+"
    			: "-") + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*groupedTransactions*/ 1 && t10_value !== (t10_value = /*transaction*/ ctx[9].balance.amount + "")) set_data_dev(t10, t10_value);
    			if (dirty & /*groupedTransactions*/ 1 && t12_value !== (t12_value = /*transaction*/ ctx[9].balance.currency + "")) set_data_dev(t12, t12_value);

    			if (dirty & /*groupedTransactions*/ 1) {
    				set_style(div3, "color", (/*transaction*/ ctx[9].transactionDescriptionCategory?.income)
    				? 'green'
    				: 'red');
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(br);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(86:20) <Dialog                          ModalID=\\\"modal_remove_t_{transaction.id}\\\"                          ConfirmFunction={ActionToRemove}                          ConfirmFunctionParams={{ id: transaction.id }}                      >",
    		ctx
    	});

    	return block;
    }

    // (140:32) {#if transaction.transactionDescriptionCategory.mmc != null && transaction.transactionDescriptionCategory.mmc != 0}
    function create_if_block_3(ctx) {
    	let div;
    	let p;
    	let t_value = GetDescriptionMCC(/*transaction*/ ctx[9].transactionDescriptionCategory.mmc, true, "uk") + "";
    	let t;
    	let div_data_tip_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "text-sm text-gray-500 truncate");
    			set_style(p, "color", /*transaction*/ ctx[9].transactionDescriptionCategory?.color);
    			add_location(p, file$d, 150, 40, 6871);
    			attr_dev(div, "class", "tooltip tooltip-left");
    			attr_dev(div, "data-tip", div_data_tip_value = GetDescriptionMCC(/*transaction*/ ctx[9].transactionDescriptionCategory.mmc, false, "uk"));
    			add_location(div, file$d, 140, 36, 6306);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*groupedTransactions*/ 1 && t_value !== (t_value = GetDescriptionMCC(/*transaction*/ ctx[9].transactionDescriptionCategory.mmc, true, "uk") + "")) set_data_dev(t, t_value);

    			if (dirty & /*groupedTransactions*/ 1) {
    				set_style(p, "color", /*transaction*/ ctx[9].transactionDescriptionCategory?.color);
    			}

    			if (dirty & /*groupedTransactions*/ 1 && div_data_tip_value !== (div_data_tip_value = GetDescriptionMCC(/*transaction*/ ctx[9].transactionDescriptionCategory.mmc, false, "uk"))) {
    				attr_dev(div, "data-tip", div_data_tip_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(140:32) {#if transaction.transactionDescriptionCategory.mmc != null && transaction.transactionDescriptionCategory.mmc != 0}",
    		ctx
    	});

    	return block;
    }

    // (174:32) {#if transaction.notes}
    function create_if_block_1$2(ctx) {
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*transaction*/ ctx[9].notes.length > 20) return create_if_block_2;
    		return create_else_block_1$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(174:32) {#if transaction.notes}",
    		ctx
    	});

    	return block;
    }

    // (196:36) {:else}
    function create_else_block_1$1(ctx) {
    	let div;
    	let p;
    	let t_value = /*transaction*/ ctx[9].notes + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "text-sm text-gray-600 truncate");
    			add_location(p, file$d, 197, 44, 9707);
    			attr_dev(div, "class", "collapse-title");
    			add_location(div, file$d, 196, 40, 9633);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*groupedTransactions*/ 1 && t_value !== (t_value = /*transaction*/ ctx[9].notes + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(196:36) {:else}",
    		ctx
    	});

    	return block;
    }

    // (175:36) {#if transaction.notes.length > 20}
    function create_if_block_2(ctx) {
    	let div2;
    	let div0;
    	let p0;
    	let t0_value = /*transaction*/ ctx[9].notes.substring(0, 20) + "";
    	let t0;
    	let t1;
    	let t2;
    	let div1;
    	let p1;
    	let t3_value = /*transaction*/ ctx[9].notes + "";
    	let t3;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			p0 = element("p");
    			t0 = text(t0_value);
    			t1 = text("\r\n                                                    ...");
    			t2 = space();
    			div1 = element("div");
    			p1 = element("p");
    			t3 = text(t3_value);
    			attr_dev(p0, "class", "text-sm text-gray-600 truncate");
    			add_location(p0, file$d, 177, 48, 8480);
    			attr_dev(div0, "class", "collapse-title");
    			add_location(div0, file$d, 176, 44, 8402);
    			attr_dev(p1, "class", "text-sm text-gray-600 truncate");
    			add_location(p1, file$d, 188, 48, 9174);
    			attr_dev(div1, "class", "collapse-content");
    			add_location(div1, file$d, 187, 44, 9094);
    			attr_dev(div2, "tabindex", "0");
    			attr_dev(div2, "class", "collapse");
    			add_location(div2, file$d, 175, 40, 8321);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, p0);
    			append_dev(p0, t0);
    			append_dev(p0, t1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, p1);
    			append_dev(p1, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*groupedTransactions*/ 1 && t0_value !== (t0_value = /*transaction*/ ctx[9].notes.substring(0, 20) + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*groupedTransactions*/ 1 && t3_value !== (t3_value = /*transaction*/ ctx[9].notes + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(175:36) {#if transaction.notes.length > 20}",
    		ctx
    	});

    	return block;
    }

    // (229:32) {:else}
    function create_else_block$3(ctx) {
    	let label;
    	let span;
    	let label_for_value;

    	const block = {
    		c: function create() {
    			label = element("label");
    			span = element("span");
    			span.textContent = "remove";
    			attr_dev(span, "class", "btn btn-sm btn-outline");
    			add_location(span, file$d, 233, 40, 11643);
    			attr_dev(label, "for", label_for_value = "modal_remove_t_" + /*transaction*/ ctx[9].id);
    			attr_dev(label, "class", "label");
    			add_location(label, file$d, 229, 36, 11422);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, span);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*groupedTransactions*/ 1 && label_for_value !== (label_for_value = "modal_remove_t_" + /*transaction*/ ctx[9].id)) {
    				attr_dev(label, "for", label_for_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(229:32) {:else}",
    		ctx
    	});

    	return block;
    }

    // (224:32) {#if transaction.autoGen}
    function create_if_block$4(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "remove";
    			attr_dev(span, "class", "btn btn-sm btn-outline");
    			attr_dev(span, "disabled", "");
    			add_location(span, file$d, 224, 36, 11164);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(224:32) {#if transaction.autoGen}",
    		ctx
    	});

    	return block;
    }

    // (85:16) {#each groupedTransaction.transactions as transaction}
    function create_each_block_1$4(ctx) {
    	let dialog;
    	let t0;
    	let li;
    	let div6;
    	let div0;
    	let p0;
    	let t1_value = /*transaction*/ ctx[9].transactionDescriptionCategory?.name + "";
    	let t1;
    	let t2;
    	let t3;
    	let p1;
    	let t4_value = new Date(/*transaction*/ ctx[9].date).toLocaleString().split(",")[1] + "";
    	let t4;
    	let t5;
    	let div1;
    	let t6;
    	let div2;
    	let t7;
    	let div4;

    	let t8_value = ((/*transaction*/ ctx[9].transactionDescriptionCategory?.income)
    	? "+"
    	: "-") + "";

    	let t8;
    	let t9_value = /*transaction*/ ctx[9].balance.amount + "";
    	let t9;
    	let t10;
    	let div3;
    	let t11_value = /*transaction*/ ctx[9].balance.currency + "";
    	let t11;
    	let t12;
    	let div5;
    	let t13;
    	let current;

    	dialog = new Dialog({
    			props: {
    				ModalID: "modal_remove_t_" + /*transaction*/ ctx[9].id,
    				ConfirmFunction: /*ActionToRemove*/ ctx[1],
    				ConfirmFunctionParams: { id: /*transaction*/ ctx[9].id },
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let if_block0 = /*transaction*/ ctx[9].transactionDescriptionCategory.mmc != null && /*transaction*/ ctx[9].transactionDescriptionCategory.mmc != 0 && create_if_block_3(ctx);
    	let if_block1 = /*transaction*/ ctx[9].notes && create_if_block_1$2(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*transaction*/ ctx[9].autoGen) return create_if_block$4;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block2 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			create_component(dialog.$$.fragment);
    			t0 = space();
    			li = element("li");
    			div6 = element("div");
    			div0 = element("div");
    			p0 = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			if (if_block0) if_block0.c();
    			t3 = space();
    			p1 = element("p");
    			t4 = text(t4_value);
    			t5 = space();
    			div1 = element("div");
    			if (if_block1) if_block1.c();
    			t6 = space();
    			div2 = element("div");
    			t7 = space();
    			div4 = element("div");
    			t8 = text(t8_value);
    			t9 = text(t9_value);
    			t10 = space();
    			div3 = element("div");
    			t11 = text(t11_value);
    			t12 = space();
    			div5 = element("div");
    			if_block2.c();
    			t13 = space();
    			attr_dev(p0, "class", "text-sm font-medium text-gray-900 truncate");
    			set_style(p0, "color", /*transaction*/ ctx[9].transactionDescriptionCategory?.color);
    			add_location(p0, file$d, 131, 32, 5681);
    			attr_dev(p1, "class", "text-sm text-gray-500 truncate");
    			add_location(p1, file$d, 166, 32, 7802);
    			attr_dev(div0, "class", "flex-0 min-w-0");
    			add_location(div0, file$d, 130, 28, 5619);
    			attr_dev(div1, "class", "flex-1");
    			add_location(div1, file$d, 172, 28, 8129);
    			attr_dev(div2, "class", "flex-0");
    			add_location(div2, file$d, 206, 28, 10159);
    			attr_dev(div3, "class", "badge badge-outline ml-1");
    			add_location(div3, file$d, 218, 32, 10850);
    			attr_dev(div4, "class", "inline-flex text-xl items-center text-base font-semibold");

    			set_style(div4, "color", (/*transaction*/ ctx[9].transactionDescriptionCategory?.income)
    			? 'green'
    			: 'red');

    			add_location(div4, file$d, 207, 28, 10215);
    			add_location(div5, file$d, 222, 28, 11062);
    			attr_dev(div6, "class", "flex items-center space-x-4");
    			add_location(div6, file$d, 129, 24, 5548);
    			attr_dev(li, "class", "py-3 sm:py-4");
    			add_location(li, file$d, 128, 20, 5497);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dialog, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, li, anchor);
    			append_dev(li, div6);
    			append_dev(div6, div0);
    			append_dev(div0, p0);
    			append_dev(p0, t1);
    			append_dev(div0, t2);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t3);
    			append_dev(div0, p1);
    			append_dev(p1, t4);
    			append_dev(div6, t5);
    			append_dev(div6, div1);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div6, t6);
    			append_dev(div6, div2);
    			append_dev(div6, t7);
    			append_dev(div6, div4);
    			append_dev(div4, t8);
    			append_dev(div4, t9);
    			append_dev(div4, t10);
    			append_dev(div4, div3);
    			append_dev(div3, t11);
    			append_dev(div6, t12);
    			append_dev(div6, div5);
    			if_block2.m(div5, null);
    			append_dev(li, t13);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const dialog_changes = {};
    			if (dirty & /*groupedTransactions*/ 1) dialog_changes.ModalID = "modal_remove_t_" + /*transaction*/ ctx[9].id;
    			if (dirty & /*groupedTransactions*/ 1) dialog_changes.ConfirmFunctionParams = { id: /*transaction*/ ctx[9].id };

    			if (dirty & /*$$scope, groupedTransactions*/ 4097) {
    				dialog_changes.$$scope = { dirty, ctx };
    			}

    			dialog.$set(dialog_changes);
    			if ((!current || dirty & /*groupedTransactions*/ 1) && t1_value !== (t1_value = /*transaction*/ ctx[9].transactionDescriptionCategory?.name + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty & /*groupedTransactions*/ 1) {
    				set_style(p0, "color", /*transaction*/ ctx[9].transactionDescriptionCategory?.color);
    			}

    			if (/*transaction*/ ctx[9].transactionDescriptionCategory.mmc != null && /*transaction*/ ctx[9].transactionDescriptionCategory.mmc != 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3(ctx);
    					if_block0.c();
    					if_block0.m(div0, t3);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if ((!current || dirty & /*groupedTransactions*/ 1) && t4_value !== (t4_value = new Date(/*transaction*/ ctx[9].date).toLocaleString().split(",")[1] + "")) set_data_dev(t4, t4_value);

    			if (/*transaction*/ ctx[9].notes) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$2(ctx);
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if ((!current || dirty & /*groupedTransactions*/ 1) && t8_value !== (t8_value = ((/*transaction*/ ctx[9].transactionDescriptionCategory?.income)
    			? "+"
    			: "-") + "")) set_data_dev(t8, t8_value);

    			if ((!current || dirty & /*groupedTransactions*/ 1) && t9_value !== (t9_value = /*transaction*/ ctx[9].balance.amount + "")) set_data_dev(t9, t9_value);
    			if ((!current || dirty & /*groupedTransactions*/ 1) && t11_value !== (t11_value = /*transaction*/ ctx[9].balance.currency + "")) set_data_dev(t11, t11_value);

    			if (!current || dirty & /*groupedTransactions*/ 1) {
    				set_style(div4, "color", (/*transaction*/ ctx[9].transactionDescriptionCategory?.income)
    				? 'green'
    				: 'red');
    			}

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div5, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dialog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dialog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dialog, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(li);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$4.name,
    		type: "each",
    		source: "(85:16) {#each groupedTransaction.transactions as transaction}",
    		ctx
    	});

    	return block;
    }

    // (61:0) {#each groupedTransactions as groupedTransaction}
    function create_each_block$6(ctx) {
    	let div4;
    	let div2;
    	let h5;
    	let t0_value = new Date(/*groupedTransaction*/ ctx[6].date).toDateString() + "";
    	let t0;
    	let t1;
    	let div1;

    	let t2_value = (/*groupedTransaction*/ ctx[6].income - /*groupedTransaction*/ ctx[6].outcome > 0
    	? "+"
    	: "") + "";

    	let t2;
    	let t3;
    	let t4_value = /*groupedTransaction*/ ctx[6].income - /*groupedTransaction*/ ctx[6].outcome + "";
    	let t4;
    	let t5;
    	let div0;
    	let t6_value = /*groupedTransaction*/ ctx[6].currency + "";
    	let t6;
    	let t7;
    	let div3;
    	let ul;
    	let t8;
    	let current;
    	let each_value_1 = /*groupedTransaction*/ ctx[6].transactions;
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div2 = element("div");
    			h5 = element("h5");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			t4 = text(t4_value);
    			t5 = space();
    			div0 = element("div");
    			t6 = text(t6_value);
    			t7 = space();
    			div3 = element("div");
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t8 = space();
    			attr_dev(h5, "class", "text-xl font-bold leading-none text-gray-900");
    			add_location(h5, file$d, 63, 12, 2224);
    			attr_dev(div0, "class", "badge badge-outline ml-1");
    			add_location(div0, file$d, 77, 16, 2876);
    			attr_dev(div1, "class", "inline-flex text-xl items-center text-base font-semibold");

    			set_style(div1, "color", /*groupedTransaction*/ ctx[6].income - /*groupedTransaction*/ ctx[6].outcome > 0
    			? 'green'
    			: 'red');

    			add_location(div1, file$d, 66, 12, 2382);
    			attr_dev(div2, "class", "flex justify-between items-center mb-4");
    			add_location(div2, file$d, 62, 8, 2158);
    			attr_dev(ul, "class", "divide-y divide-gray-200");
    			add_location(ul, file$d, 83, 12, 3072);
    			attr_dev(div3, "class", "flow-root");
    			add_location(div3, file$d, 82, 8, 3035);
    			attr_dev(div4, "class", "pr-4 mb-5 w-1/2 bg-white rounded-lg border shadow-md sm:p-8");
    			add_location(div4, file$d, 61, 4, 2075);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div2);
    			append_dev(div2, h5);
    			append_dev(h5, t0);
    			append_dev(div2, t1);
    			append_dev(div2, div1);
    			append_dev(div1, t2);
    			append_dev(div1, t3);
    			append_dev(div1, t4);
    			append_dev(div1, t5);
    			append_dev(div1, div0);
    			append_dev(div0, t6);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div3, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_dev(div4, t8);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*groupedTransactions*/ 1) && t0_value !== (t0_value = new Date(/*groupedTransaction*/ ctx[6].date).toDateString() + "")) set_data_dev(t0, t0_value);

    			if ((!current || dirty & /*groupedTransactions*/ 1) && t2_value !== (t2_value = (/*groupedTransaction*/ ctx[6].income - /*groupedTransaction*/ ctx[6].outcome > 0
    			? "+"
    			: "") + "")) set_data_dev(t2, t2_value);

    			if ((!current || dirty & /*groupedTransactions*/ 1) && t4_value !== (t4_value = /*groupedTransaction*/ ctx[6].income - /*groupedTransaction*/ ctx[6].outcome + "")) set_data_dev(t4, t4_value);
    			if ((!current || dirty & /*groupedTransactions*/ 1) && t6_value !== (t6_value = /*groupedTransaction*/ ctx[6].currency + "")) set_data_dev(t6, t6_value);

    			if (!current || dirty & /*groupedTransactions*/ 1) {
    				set_style(div1, "color", /*groupedTransaction*/ ctx[6].income - /*groupedTransaction*/ ctx[6].outcome > 0
    				? 'green'
    				: 'red');
    			}

    			if (dirty & /*groupedTransactions, Date, GetDescriptionMCC, ActionToRemove*/ 3) {
    				each_value_1 = /*groupedTransaction*/ ctx[6].transactions;
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block_1$4(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(ul, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(61:0) {#each groupedTransactions as groupedTransaction}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let each_1_anchor;
    	let current;
    	let each_value = /*groupedTransactions*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block_2(ctx);
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();

    			if (each_1_else) {
    				each_1_else.c();
    			}
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(target, anchor);
    			}

    			insert_dev(target, each_1_anchor, anchor);

    			if (each_1_else) {
    				each_1_else.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*groupedTransactions, Date, GetDescriptionMCC, ActionToRemove*/ 3) {
    				each_value = /*groupedTransactions*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block_2(ctx);
    					each_1_else.c();
    					each_1_else.m(each_1_anchor.parentNode, each_1_anchor);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    			if (each_1_else) each_1_else.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let groupedTransactions;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TransactionList', slots, []);

    	const ActionToRemove = async ({ id }) => {
    		try {
    			await Request$1.transaction.delete({ BudgetID: budgetID, TransactionID: id });
    			await UpdateTransactions();
    			ShowInfo("Transaction deleted.");
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	const toGroup = transactionsArray => {
    		let groups = []; // {date:transactions}[]

    		transactionsArray.forEach(t => {
    			if (groups[new Date(t.date.split("T")[0])]) {
    				groups[new Date(t.date.split("T")[0])].push(t);
    			} else {
    				groups[new Date(t.date.split("T")[0])] = [t];
    			}
    		});

    		return Object.entries(groups).map(([key, value]) => {
    			return {
    				date: key,
    				transactions: value,
    				income: value.reduce(
    					(ps, t) => ps + ((t.transactionDescriptionCategory?.income)
    					? t.balance.amount
    					: 0),
    					0
    				),
    				outcome: value.reduce(
    					(ps, t) => ps + (!t.transactionDescriptionCategory?.income
    					? t.balance.amount
    					: 0),
    					0
    				),
    				currency: value[0].balance.currency
    			};
    		});
    	};

    	let { UpdateTransactions = async () => {
    		
    	} } = $$props;

    	let { budgetID } = $$props;
    	let { transactions = [] } = $$props;
    	const writable_props = ['UpdateTransactions', 'budgetID', 'transactions'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TransactionList> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('UpdateTransactions' in $$props) $$invalidate(2, UpdateTransactions = $$props.UpdateTransactions);
    		if ('budgetID' in $$props) $$invalidate(3, budgetID = $$props.budgetID);
    		if ('transactions' in $$props) $$invalidate(4, transactions = $$props.transactions);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		ShowInfo,
    		GetDescriptionMCC,
    		Dialog,
    		ActionToRemove,
    		toGroup,
    		UpdateTransactions,
    		budgetID,
    		transactions,
    		groupedTransactions
    	});

    	$$self.$inject_state = $$props => {
    		if ('UpdateTransactions' in $$props) $$invalidate(2, UpdateTransactions = $$props.UpdateTransactions);
    		if ('budgetID' in $$props) $$invalidate(3, budgetID = $$props.budgetID);
    		if ('transactions' in $$props) $$invalidate(4, transactions = $$props.transactions);
    		if ('groupedTransactions' in $$props) $$invalidate(0, groupedTransactions = $$props.groupedTransactions);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*transactions*/ 16) {
    			$$invalidate(0, groupedTransactions = toGroup(transactions));
    		}
    	};

    	return [
    		groupedTransactions,
    		ActionToRemove,
    		UpdateTransactions,
    		budgetID,
    		transactions
    	];
    }

    class TransactionList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			UpdateTransactions: 2,
    			budgetID: 3,
    			transactions: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TransactionList",
    			options,
    			id: create_fragment$d.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*budgetID*/ ctx[3] === undefined && !('budgetID' in props)) {
    			console.warn("<TransactionList> was created without expected prop 'budgetID'");
    		}
    	}

    	get UpdateTransactions() {
    		throw new Error("<TransactionList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set UpdateTransactions(value) {
    		throw new Error("<TransactionList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get budgetID() {
    		throw new Error("<TransactionList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budgetID(value) {
    		throw new Error("<TransactionList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get transactions() {
    		throw new Error("<TransactionList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set transactions(value) {
    		throw new Error("<TransactionList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\transaction\ModalCreateTransaction.svelte generated by Svelte v3.48.0 */

    const file$c = "src\\components\\transaction\\ModalCreateTransaction.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[14] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[17] = list[i];
    	return child_ctx;
    }

    // (47:20) {#each $avaliableCategories as category}
    function create_each_block_1$3(ctx) {
    	let option;
    	let t_value = /*category*/ ctx[17].name + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*category*/ ctx[17].id;
    			option.value = option.__value;
    			add_location(option, file$c, 47, 24, 1804);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$avaliableCategories*/ 4 && t_value !== (t_value = /*category*/ ctx[17].name + "")) set_data_dev(t, t_value);

    			if (dirty & /*$avaliableCategories*/ 4 && option_value_value !== (option_value_value = /*category*/ ctx[17].id)) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$3.name,
    		type: "each",
    		source: "(47:20) {#each $avaliableCategories as category}",
    		ctx
    	});

    	return block;
    }

    // (69:28) {#each $avaliableCurrency as currency}
    function create_each_block$5(ctx) {
    	let option;
    	let t_value = /*currency*/ ctx[14] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*currency*/ ctx[14];
    			option.value = option.__value;
    			add_location(option, file$c, 69, 32, 2878);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$avaliableCurrency*/ 8 && t_value !== (t_value = /*currency*/ ctx[14] + "")) set_data_dev(t, t_value);

    			if (dirty & /*$avaliableCurrency*/ 8 && option_value_value !== (option_value_value = /*currency*/ ctx[14])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(69:28) {#each $avaliableCurrency as currency}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let input0;
    	let t0;
    	let div9;
    	let div8;
    	let label0;
    	let t1;
    	let t2;
    	let form;
    	let div0;
    	let label1;
    	let span0;
    	let t4;
    	let select0;
    	let option;
    	let t6;
    	let div1;
    	let textarea;
    	let t7;
    	let div6;
    	let label2;
    	let span1;
    	let t9;
    	let div5;
    	let div2;
    	let input1;
    	let t10;
    	let div3;
    	let select1;
    	let t11;
    	let div4;
    	let input2;
    	let t12;
    	let br;
    	let t13;
    	let div7;
    	let button;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*$avaliableCategories*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$3(get_each_context_1$3(ctx, each_value_1, i));
    	}

    	let each_value = /*$avaliableCurrency*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t0 = space();
    			div9 = element("div");
    			div8 = element("div");
    			label0 = element("label");
    			t1 = text("✕");
    			t2 = space();
    			form = element("form");
    			div0 = element("div");
    			label1 = element("label");
    			span0 = element("span");
    			span0.textContent = "Select category";
    			t4 = space();
    			select0 = element("select");
    			option = element("option");
    			option.textContent = "Select category";

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t6 = space();
    			div1 = element("div");
    			textarea = element("textarea");
    			t7 = space();
    			div6 = element("div");
    			label2 = element("label");
    			span1 = element("span");
    			span1.textContent = "Enter transaction balance";
    			t9 = space();
    			div5 = element("div");
    			div2 = element("div");
    			input1 = element("input");
    			t10 = space();
    			div3 = element("div");
    			select1 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t11 = space();
    			div4 = element("div");
    			input2 = element("input");
    			t12 = space();
    			br = element("br");
    			t13 = space();
    			div7 = element("div");
    			button = element("button");
    			button.textContent = "Create";
    			attr_dev(input0, "type", "checkbox");
    			attr_dev(input0, "id", /*ID*/ ctx[0]);
    			attr_dev(input0, "class", "modal-toggle");
    			add_location(input0, file$c, 35, 0, 1124);
    			attr_dev(label0, "for", /*ID*/ ctx[0]);
    			attr_dev(label0, "class", "btn btn-sm btn-circle absolute right-2 top-2");
    			add_location(label0, file$c, 38, 8, 1246);
    			attr_dev(span0, "class", "label-text");
    			add_location(span0, file$c, 42, 20, 1475);
    			attr_dev(label1, "class", "label");
    			add_location(label1, file$c, 41, 16, 1432);
    			option.selected = true;
    			option.disabled = true;
    			option.__value = "Select category";
    			option.value = option.__value;
    			add_location(option, file$c, 45, 20, 1666);
    			attr_dev(select0, "class", "select select-bordered");
    			if (/*modelToRequest*/ ctx[1].CategoryID === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[7].call(select0));
    			add_location(select0, file$c, 44, 16, 1566);
    			attr_dev(div0, "class", "form-control");
    			add_location(div0, file$c, 40, 12, 1388);
    			attr_dev(textarea, "class", "textarea textarea-bordered");
    			attr_dev(textarea, "placeholder", "Type notes...");
    			add_location(textarea, file$c, 53, 16, 1997);
    			attr_dev(div1, "class", "form-control my-4");
    			add_location(div1, file$c, 52, 12, 1948);
    			attr_dev(span1, "class", "label-text");
    			add_location(span1, file$c, 59, 20, 2265);
    			attr_dev(label2, "class", "label");
    			add_location(label2, file$c, 58, 16, 2222);
    			attr_dev(input1, "type", "number");
    			attr_dev(input1, "placeholder", "amount");
    			attr_dev(input1, "class", "input input-bordered w-32");
    			add_location(input1, file$c, 63, 24, 2457);
    			attr_dev(div2, "class", "pr-1");
    			add_location(div2, file$c, 62, 20, 2413);
    			attr_dev(select1, "class", "select select-bordered");
    			if (/*modelToRequest*/ ctx[1].Currency === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[10].call(select1));
    			add_location(select1, file$c, 67, 24, 2700);
    			attr_dev(div3, "class", "flex-grow");
    			add_location(div3, file$c, 66, 20, 2651);
    			attr_dev(input2, "type", "datetime-local");
    			attr_dev(input2, "class", "input select-bordered");
    			add_location(input2, file$c, 74, 24, 3058);
    			add_location(div4, file$c, 73, 20, 3027);
    			attr_dev(div5, "class", "flex w-full");
    			add_location(div5, file$c, 61, 16, 2366);
    			attr_dev(div6, "class", "form-control");
    			add_location(div6, file$c, 57, 12, 2178);
    			add_location(br, file$c, 79, 12, 3239);
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$c, 81, 16, 3302);
    			attr_dev(div7, "class", "form-control");
    			add_location(div7, file$c, 80, 12, 3258);
    			add_location(form, file$c, 39, 8, 1334);
    			attr_dev(div8, "class", "modal-box relative");
    			add_location(div8, file$c, 37, 4, 1204);
    			attr_dev(div9, "class", "modal");
    			add_location(div9, file$c, 36, 0, 1179);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div9, anchor);
    			append_dev(div9, div8);
    			append_dev(div8, label0);
    			append_dev(label0, t1);
    			append_dev(div8, t2);
    			append_dev(div8, form);
    			append_dev(form, div0);
    			append_dev(div0, label1);
    			append_dev(label1, span0);
    			append_dev(div0, t4);
    			append_dev(div0, select0);
    			append_dev(select0, option);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select0, null);
    			}

    			select_option(select0, /*modelToRequest*/ ctx[1].CategoryID);
    			append_dev(form, t6);
    			append_dev(form, div1);
    			append_dev(div1, textarea);
    			set_input_value(textarea, /*modelToRequest*/ ctx[1].Notes);
    			append_dev(form, t7);
    			append_dev(form, div6);
    			append_dev(div6, label2);
    			append_dev(label2, span1);
    			append_dev(div6, t9);
    			append_dev(div6, div5);
    			append_dev(div5, div2);
    			append_dev(div2, input1);
    			set_input_value(input1, /*modelToRequest*/ ctx[1].Amount);
    			append_dev(div5, t10);
    			append_dev(div5, div3);
    			append_dev(div3, select1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select1, null);
    			}

    			select_option(select1, /*modelToRequest*/ ctx[1].Currency);
    			append_dev(div5, t11);
    			append_dev(div5, div4);
    			append_dev(div4, input2);
    			set_input_value(input2, /*modelToRequest*/ ctx[1].Date);
    			append_dev(form, t12);
    			append_dev(form, br);
    			append_dev(form, t13);
    			append_dev(form, div7);
    			append_dev(div7, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select0, "change", /*select0_change_handler*/ ctx[7]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[8]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
    					listen_dev(select1, "change", /*select1_change_handler*/ ctx[10]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[11]),
    					listen_dev(form, "submit", prevent_default(/*create*/ ctx[4]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ID*/ 1) {
    				attr_dev(input0, "id", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*ID*/ 1) {
    				attr_dev(label0, "for", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*$avaliableCategories*/ 4) {
    				each_value_1 = /*$avaliableCategories*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$3(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$3(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*modelToRequest, $avaliableCategories*/ 6) {
    				select_option(select0, /*modelToRequest*/ ctx[1].CategoryID);
    			}

    			if (dirty & /*modelToRequest, $avaliableCategories*/ 6) {
    				set_input_value(textarea, /*modelToRequest*/ ctx[1].Notes);
    			}

    			if (dirty & /*modelToRequest, $avaliableCategories*/ 6 && to_number(input1.value) !== /*modelToRequest*/ ctx[1].Amount) {
    				set_input_value(input1, /*modelToRequest*/ ctx[1].Amount);
    			}

    			if (dirty & /*$avaliableCurrency*/ 8) {
    				each_value = /*$avaliableCurrency*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*modelToRequest, $avaliableCategories*/ 6) {
    				select_option(select1, /*modelToRequest*/ ctx[1].Currency);
    			}

    			if (dirty & /*modelToRequest, $avaliableCategories*/ 6) {
    				set_input_value(input2, /*modelToRequest*/ ctx[1].Date);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div9);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let $selectedBudget;
    	let $avaliableCategories;
    	let $avaliableCurrency;
    	validate_store(selectedBudget, 'selectedBudget');
    	component_subscribe($$self, selectedBudget, $$value => $$invalidate(12, $selectedBudget = $$value));
    	validate_store(avaliableCategories, 'avaliableCategories');
    	component_subscribe($$self, avaliableCategories, $$value => $$invalidate(2, $avaliableCategories = $$value));
    	validate_store(avaliableCurrency, 'avaliableCurrency');
    	component_subscribe($$self, avaliableCurrency, $$value => $$invalidate(3, $avaliableCurrency = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalCreateTransaction', slots, []);

    	const create = async () => {
    		try {
    			$$invalidate(1, modelToRequest.BudgetID = budgetID, modelToRequest);
    			await Request$1.transaction.create(modelToRequest);
    			await SuccessAction();

    			try {
    				document.getElementById(ID).click(); //to close.
    			} catch {
    				
    			}

    			$$invalidate(1, modelToRequest = initialRequestModel);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	let { ID = "transaction-create-modal" } = $$props;
    	let { budgetID } = $$props;

    	let { SuccessAction = () => {
    		
    	} } = $$props;

    	const initialRequestModel = {
    		BudgetID: "",
    		Notes: "",
    		Date: new Date().toISOString().slice(0, 16),
    		Amount: 100,
    		Currency: $selectedBudget?.balance?.currency || "UAH",
    		CategoryID: "Select category"
    	};

    	let modelToRequest = initialRequestModel;
    	const writable_props = ['ID', 'budgetID', 'SuccessAction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalCreateTransaction> was created with unknown prop '${key}'`);
    	});

    	function select0_change_handler() {
    		modelToRequest.CategoryID = select_value(this);
    		$$invalidate(1, modelToRequest);
    	}

    	function textarea_input_handler() {
    		modelToRequest.Notes = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input1_input_handler() {
    		modelToRequest.Amount = to_number(this.value);
    		$$invalidate(1, modelToRequest);
    	}

    	function select1_change_handler() {
    		modelToRequest.Currency = select_value(this);
    		$$invalidate(1, modelToRequest);
    	}

    	function input2_input_handler() {
    		modelToRequest.Date = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	$$self.$$set = $$props => {
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('budgetID' in $$props) $$invalidate(5, budgetID = $$props.budgetID);
    		if ('SuccessAction' in $$props) $$invalidate(6, SuccessAction = $$props.SuccessAction);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		avaliableCategories,
    		avaliableCurrency,
    		selectedBudget,
    		create,
    		ID,
    		budgetID,
    		SuccessAction,
    		initialRequestModel,
    		modelToRequest,
    		$selectedBudget,
    		$avaliableCategories,
    		$avaliableCurrency
    	});

    	$$self.$inject_state = $$props => {
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('budgetID' in $$props) $$invalidate(5, budgetID = $$props.budgetID);
    		if ('SuccessAction' in $$props) $$invalidate(6, SuccessAction = $$props.SuccessAction);
    		if ('modelToRequest' in $$props) $$invalidate(1, modelToRequest = $$props.modelToRequest);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		ID,
    		modelToRequest,
    		$avaliableCategories,
    		$avaliableCurrency,
    		create,
    		budgetID,
    		SuccessAction,
    		select0_change_handler,
    		textarea_input_handler,
    		input1_input_handler,
    		select1_change_handler,
    		input2_input_handler
    	];
    }

    class ModalCreateTransaction extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { ID: 0, budgetID: 5, SuccessAction: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalCreateTransaction",
    			options,
    			id: create_fragment$c.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*budgetID*/ ctx[5] === undefined && !('budgetID' in props)) {
    			console.warn("<ModalCreateTransaction> was created without expected prop 'budgetID'");
    		}
    	}

    	get ID() {
    		throw new Error("<ModalCreateTransaction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ID(value) {
    		throw new Error("<ModalCreateTransaction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get budgetID() {
    		throw new Error("<ModalCreateTransaction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budgetID(value) {
    		throw new Error("<ModalCreateTransaction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get SuccessAction() {
    		throw new Error("<ModalCreateTransaction>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set SuccessAction(value) {
    		throw new Error("<ModalCreateTransaction>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\transaction\PeriodSelector.svelte generated by Svelte v3.48.0 */
    const file$b = "src\\components\\transaction\\PeriodSelector.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[13] = list[i];
    	child_ctx[12] = i;
    	return child_ctx;
    }

    // (61:12) {:else}
    function create_else_block_1(ctx) {
    	let option;
    	let t_value = /*months*/ ctx[13] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*index*/ ctx[12] + 1;
    			option.value = option.__value;
    			add_location(option, file$b, 61, 16, 1599);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(61:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (57:12) {#if index == new Date().getMonth()}
    function create_if_block_1$1(ctx) {
    	let option;
    	let t_value = /*months*/ ctx[13] + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			set_style(option, "font-weight", "700");
    			option.__value = /*index*/ ctx[12] + 1;
    			option.value = option.__value;
    			add_location(option, file$b, 57, 16, 1451);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(57:12) {#if index == new Date().getMonth()}",
    		ctx
    	});

    	return block;
    }

    // (56:8) {#each avaliableMonths as months, index (index)}
    function create_each_block_1$2(key_1, ctx) {
    	let first;
    	let if_block_anchor;

    	function select_block_type(ctx, dirty) {
    		if (/*index*/ ctx[12] == new Date().getMonth()) return create_if_block_1$1;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			if_block.c();
    			if_block_anchor = empty();
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(56:8) {#each avaliableMonths as months, index (index)}",
    		ctx
    	});

    	return block;
    }

    // (76:12) {:else}
    function create_else_block$2(ctx) {
    	let option;
    	let t_value = /*index*/ ctx[12] + avaliableSelectYear + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = /*index*/ ctx[12] + avaliableSelectYear;
    			option.value = option.__value;
    			add_location(option, file$b, 76, 16, 2126);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(76:12) {:else}",
    		ctx
    	});

    	return block;
    }

    // (72:12) {#if index + avaliableSelectYear == new Date().getFullYear()}
    function create_if_block$3(ctx) {
    	let option;
    	let t_value = /*index*/ ctx[12] + avaliableSelectYear + "";
    	let t;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			set_style(option, "font-weight", "700");
    			option.__value = /*index*/ ctx[12] + avaliableSelectYear;
    			option.value = option.__value;
    			add_location(option, file$b, 72, 16, 1975);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(72:12) {#if index + avaliableSelectYear == new Date().getFullYear()}",
    		ctx
    	});

    	return block;
    }

    // (71:8) {#each Array(avaliableYears) as _, index (index)}
    function create_each_block$4(key_1, ctx) {
    	let first;
    	let if_block_anchor;

    	function select_block_type_1(ctx, dirty) {
    		if (/*index*/ ctx[12] + avaliableSelectYear == new Date().getFullYear()) return create_if_block$3;
    		return create_else_block$2;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			first = empty();
    			if_block.c();
    			if_block_anchor = empty();
    			this.first = first;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, first, anchor);
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if_block.p(ctx, dirty);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(first);
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(71:8) {#each Array(avaliableYears) as _, index (index)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let div;
    	let select0;
    	let each_blocks_1 = [];
    	let each0_lookup = new Map();
    	let t;
    	let select1;
    	let each_blocks = [];
    	let each1_lookup = new Map();
    	let mounted;
    	let dispose;
    	let each_value_1 = /*avaliableMonths*/ ctx[3];
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*index*/ ctx[12];
    	validate_each_keys(ctx, each_value_1, get_each_context_1$2, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1$2(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each0_lookup.set(key, each_blocks_1[i] = create_each_block_1$2(key, child_ctx));
    	}

    	let each_value = Array(avaliableYears);
    	validate_each_argument(each_value);
    	const get_key_1 = ctx => /*index*/ ctx[12];
    	validate_each_keys(ctx, each_value, get_each_context$4, get_key_1);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$4(ctx, each_value, i);
    		let key = get_key_1(child_ctx);
    		each1_lookup.set(key, each_blocks[i] = create_each_block$4(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t = space();
    			select1 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(select0, "class", "select select-ghost max-w-xs");
    			if (/*selectedMonth*/ ctx[0] === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[7].call(select0));
    			add_location(select0, file$b, 50, 4, 1200);
    			attr_dev(select1, "class", "select select-ghost max-w-xs");
    			if (/*selectedYear*/ ctx[1] === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[8].call(select1));
    			add_location(select1, file$b, 65, 4, 1699);
    			attr_dev(div, "class", "mb-2 w-1/7 bg-white rounded-lg border shadow-md sm:p-2");
    			add_location(div, file$b, 46, 0, 1073);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, select0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select0, null);
    			}

    			select_option(select0, /*selectedMonth*/ ctx[0]);
    			append_dev(div, t);
    			append_dev(div, select1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select1, null);
    			}

    			select_option(select1, /*selectedYear*/ ctx[1]);
    			/*div_binding*/ ctx[9](div);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select0, "change", /*select0_change_handler*/ ctx[7]),
    					listen_dev(select0, "change", /*unFocus*/ ctx[4], false, false, false),
    					listen_dev(select1, "change", /*select1_change_handler*/ ctx[8]),
    					listen_dev(select1, "change", /*unFocus*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*avaliableMonths, Date*/ 8) {
    				each_value_1 = /*avaliableMonths*/ ctx[3];
    				validate_each_argument(each_value_1);
    				validate_each_keys(ctx, each_value_1, get_each_context_1$2, get_key);
    				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx, each_value_1, each0_lookup, select0, destroy_block, create_each_block_1$2, null, get_each_context_1$2);
    			}

    			if (dirty & /*selectedMonth, avaliableMonths*/ 9) {
    				select_option(select0, /*selectedMonth*/ ctx[0]);
    			}

    			if (dirty & /*Array, avaliableYears, avaliableSelectYear, Date*/ 0) {
    				each_value = Array(avaliableYears);
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$4, get_key_1);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key_1, 1, ctx, each_value, each1_lookup, select1, destroy_block, create_each_block$4, null, get_each_context$4);
    			}

    			if (dirty & /*selectedYear, Array, avaliableYears, avaliableSelectYear*/ 2) {
    				select_option(select1, /*selectedYear*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].d();
    			}

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}

    			/*div_binding*/ ctx[9](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const avaliableSelectYear = 2022;
    const avaliableYears = 3;

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PeriodSelector', slots, []);

    	const avaliableMonths = [
    		"January",
    		"February",
    		"March",
    		"April",
    		"May",
    		"June",
    		"July",
    		"August",
    		"September",
    		"October",
    		"November",
    		"December"
    	];

    	onMount(() => {
    		
    	});

    	let firstLoad = true;

    	const unFocus = () => {
    		periodSelectorBaseComponent.focus();
    	};

    	let periodSelectorBaseComponent;
    	let selectedMonth = Period.GetMonth();
    	let selectedYear = Period.GetYear();

    	let { UpdatePeriod = needUpdate => {
    		
    	} } = $$props;

    	const writable_props = ['UpdatePeriod'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PeriodSelector> was created with unknown prop '${key}'`);
    	});

    	function select0_change_handler() {
    		selectedMonth = select_value(this);
    		$$invalidate(0, selectedMonth);
    		$$invalidate(3, avaliableMonths);
    	}

    	function select1_change_handler() {
    		selectedYear = select_value(this);
    		$$invalidate(1, selectedYear);
    	}

    	function div_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			periodSelectorBaseComponent = $$value;
    			$$invalidate(2, periodSelectorBaseComponent);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('UpdatePeriod' in $$props) $$invalidate(5, UpdatePeriod = $$props.UpdatePeriod);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		LS: LocalStorage,
    		Period,
    		avaliableMonths,
    		avaliableSelectYear,
    		avaliableYears,
    		firstLoad,
    		unFocus,
    		periodSelectorBaseComponent,
    		selectedMonth,
    		selectedYear,
    		UpdatePeriod
    	});

    	$$self.$inject_state = $$props => {
    		if ('firstLoad' in $$props) $$invalidate(6, firstLoad = $$props.firstLoad);
    		if ('periodSelectorBaseComponent' in $$props) $$invalidate(2, periodSelectorBaseComponent = $$props.periodSelectorBaseComponent);
    		if ('selectedMonth' in $$props) $$invalidate(0, selectedMonth = $$props.selectedMonth);
    		if ('selectedYear' in $$props) $$invalidate(1, selectedYear = $$props.selectedYear);
    		if ('UpdatePeriod' in $$props) $$invalidate(5, UpdatePeriod = $$props.UpdatePeriod);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*selectedMonth, selectedYear, UpdatePeriod, firstLoad*/ 99) {
    			{
    				LocalStorage.Set(Period.MonthKeyStoreConst, selectedMonth);
    				LocalStorage.Set(Period.YearKeyStoreConst, selectedYear);
    				UpdatePeriod(!firstLoad);

    				if (firstLoad) {
    					//except first UpdatePeriod Invoke
    					$$invalidate(6, firstLoad = false);
    				}
    			}
    		}
    	};

    	return [
    		selectedMonth,
    		selectedYear,
    		periodSelectorBaseComponent,
    		avaliableMonths,
    		unFocus,
    		UpdatePeriod,
    		firstLoad,
    		select0_change_handler,
    		select1_change_handler,
    		div_binding
    	];
    }

    class PeriodSelector extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { UpdatePeriod: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PeriodSelector",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get UpdatePeriod() {
    		throw new Error("<PeriodSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set UpdatePeriod(value) {
    		throw new Error("<PeriodSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\BudgetTransactions.svelte generated by Svelte v3.48.0 */
    const file$a = "src\\views\\BudgetTransactions.svelte";

    function create_fragment$a(ctx) {
    	let modalcreatetransaction;
    	let t0;
    	let div;
    	let label;
    	let t1;
    	let t2;
    	let periodselector;
    	let t3;
    	let transactionlist;
    	let current;

    	modalcreatetransaction = new ModalCreateTransaction({
    			props: {
    				ID: CreateTransactionModalID,
    				SuccessAction: /*UpdateTransactions*/ ctx[2],
    				budgetID: /*params*/ ctx[0].budgetID
    			},
    			$$inline: true
    		});

    	periodselector = new PeriodSelector({
    			props: { UpdatePeriod: /*UpdatePeriod*/ ctx[3] },
    			$$inline: true
    		});

    	transactionlist = new TransactionList({
    			props: {
    				transactions: /*transactions*/ ctx[1],
    				budgetID: /*params*/ ctx[0].budgetID,
    				UpdateTransactions: /*UpdateTransactions*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modalcreatetransaction.$$.fragment);
    			t0 = space();
    			div = element("div");
    			label = element("label");
    			t1 = text("Add transaction");
    			t2 = space();
    			create_component(periodselector.$$.fragment);
    			t3 = space();
    			create_component(transactionlist.$$.fragment);
    			attr_dev(label, "class", "btn btn-wide btn-outline mb-5 rounded-full");
    			attr_dev(label, "for", CreateTransactionModalID);
    			add_location(label, file$a, 58, 4, 1939);
    			attr_dev(div, "class", "center_content");
    			add_location(div, file$a, 57, 0, 1905);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalcreatetransaction, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(label, t1);
    			append_dev(div, t2);
    			mount_component(periodselector, div, null);
    			append_dev(div, t3);
    			mount_component(transactionlist, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const modalcreatetransaction_changes = {};
    			if (dirty & /*params*/ 1) modalcreatetransaction_changes.budgetID = /*params*/ ctx[0].budgetID;
    			modalcreatetransaction.$set(modalcreatetransaction_changes);
    			const transactionlist_changes = {};
    			if (dirty & /*transactions*/ 2) transactionlist_changes.transactions = /*transactions*/ ctx[1];
    			if (dirty & /*params*/ 1) transactionlist_changes.budgetID = /*params*/ ctx[0].budgetID;
    			transactionlist.$set(transactionlist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalcreatetransaction.$$.fragment, local);
    			transition_in(periodselector.$$.fragment, local);
    			transition_in(transactionlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalcreatetransaction.$$.fragment, local);
    			transition_out(periodselector.$$.fragment, local);
    			transition_out(transactionlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalcreatetransaction, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			destroy_component(periodselector);
    			destroy_component(transactionlist);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const CreateTransactionModalID = "transaction-create-modal";

    function instance$a($$self, $$props, $$invalidate) {
    	let $selectedBudget;
    	let $avaliableCategories;
    	validate_store(selectedBudget, 'selectedBudget');
    	component_subscribe($$self, selectedBudget, $$value => $$invalidate(6, $selectedBudget = $$value));
    	validate_store(avaliableCategories, 'avaliableCategories');
    	component_subscribe($$self, avaliableCategories, $$value => $$invalidate(7, $avaliableCategories = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BudgetTransactions', slots, []);
    	let selectedMonth;
    	let selectedYear;

    	onMount(async () => {
    		UpdatePeriod(false);
    		UpdateTransactions();

    		try {
    			set_store_value(avaliableCategories, $avaliableCategories = (await Request$1.category.getList({ BudgetID: params.budgetID })).data, $avaliableCategories);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	});

    	const UpdateTransactions = async () => {
    		try {
    			$$invalidate(1, transactions = (await Request$1.transaction.getListPeriod({
    				BudgetID: params.budgetID,
    				Year: selectedYear,
    				Month: selectedMonth
    			})).data);

    			set_store_value(selectedBudget, $selectedBudget = (await Request$1.budget.get({ BudgetID: params.budgetID })).data, $selectedBudget);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	const UpdatePeriod = async needUpdate => {
    		selectedMonth = Period.GetMonth();
    		selectedYear = Period.GetYear();
    		if (needUpdate) await UpdateTransactions();
    	};

    	let { params = {} } = $$props;
    	let transactions = [];
    	const writable_props = ['params'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BudgetTransactions> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(0, params = $$props.params);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		writable,
    		Request: Request$1,
    		TransactionList,
    		ErrorWrapper,
    		ModalCreateTransaction,
    		avaliableCategories,
    		selectedBudget,
    		LS: LocalStorage,
    		Period,
    		PeriodSelector,
    		selectedMonth,
    		selectedYear,
    		UpdateTransactions,
    		UpdatePeriod,
    		params,
    		transactions,
    		CreateTransactionModalID,
    		$selectedBudget,
    		$avaliableCategories
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedMonth' in $$props) selectedMonth = $$props.selectedMonth;
    		if ('selectedYear' in $$props) selectedYear = $$props.selectedYear;
    		if ('params' in $$props) $$invalidate(0, params = $$props.params);
    		if ('transactions' in $$props) $$invalidate(1, transactions = $$props.transactions);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [params, transactions, UpdateTransactions, UpdatePeriod];
    }

    class BudgetTransactions extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, { params: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BudgetTransactions",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get params() {
    		throw new Error("<BudgetTransactions>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<BudgetTransactions>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\category\CategoryList.svelte generated by Svelte v3.48.0 */
    const file$9 = "src\\components\\category\\CategoryList.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[4] = list[i];
    	return child_ctx;
    }

    // (54:4) {:else}
    function create_else_block$1(ctx) {
    	let h1;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			h1.textContent = "No categories";
    			attr_dev(h1, "class", "text-center");
    			add_location(h1, file$9, 54, 8, 1959);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(54:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (29:8) <Dialog ModalID="modal_remove_{category.id}" ConfirmFunction={ActionToRemove}                  ConfirmFunctionParams={{id:category.id}}>
    function create_default_slot$1(ctx) {
    	let h1;
    	let t0;
    	let br;
    	let b;
    	let t1_value = /*category*/ ctx[4].name + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text("You really want to remove ");
    			br = element("br");
    			b = element("b");
    			t1 = text(t1_value);
    			t2 = text(" category?");
    			add_location(br, file$9, 30, 42, 967);
    			add_location(b, file$9, 30, 47, 972);
    			add_location(h1, file$9, 30, 12, 937);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			append_dev(h1, br);
    			append_dev(h1, b);
    			append_dev(b, t1);
    			append_dev(h1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*categories*/ 1 && t1_value !== (t1_value = /*category*/ ctx[4].name + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(29:8) <Dialog ModalID=\\\"modal_remove_{category.id}\\\" ConfirmFunction={ActionToRemove}                  ConfirmFunctionParams={{id:category.id}}>",
    		ctx
    	});

    	return block;
    }

    // (46:16) {:catch err}
    function create_catch_block(ctx) {
    	const block = { c: noop, m: noop, p: noop, d: noop };

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_catch_block.name,
    		type: "catch",
    		source: "(46:16) {:catch err}",
    		ctx
    	});

    	return block;
    }

    // (44:16) {:then photoURL}
    function create_then_block(ctx) {
    	let img;
    	let img_src_value;
    	let img_alt_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*photoURL*/ ctx[7])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", img_alt_value = /*category*/ ctx[4].name);
    			attr_dev(img, "class", "rounded-xl");
    			add_location(img, file$9, 44, 20, 1599);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*categories*/ 1 && !src_url_equal(img.src, img_src_value = /*photoURL*/ ctx[7])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*categories*/ 1 && img_alt_value !== (img_alt_value = /*category*/ ctx[4].name)) {
    				attr_dev(img, "alt", img_alt_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_then_block.name,
    		type: "then",
    		source: "(44:16) {:then photoURL}",
    		ctx
    	});

    	return block;
    }

    // (42:57)                       <p>Loading...</p>                  {:then photoURL}
    function create_pending_block(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Loading...";
    			add_location(p, file$9, 42, 20, 1526);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_pending_block.name,
    		type: "pending",
    		source: "(42:57)                       <p>Loading...</p>                  {:then photoURL}",
    		ctx
    	});

    	return block;
    }

    // (28:4) {#each categories as category}
    function create_each_block$3(ctx) {
    	let dialog;
    	let t0;
    	let div;
    	let label;
    	let t1;
    	let label_for_value;
    	let t2;
    	let h4;
    	let t3_value = /*category*/ ctx[4].name + "";
    	let t3;
    	let t4;
    	let figure;
    	let promise;
    	let t5;
    	let h3;
    	let t6_value = (/*category*/ ctx[4].income ? "income" : "outcome") + "";
    	let t6;
    	let t7;
    	let br;
    	let current;

    	dialog = new Dialog({
    			props: {
    				ModalID: "modal_remove_" + /*category*/ ctx[4].id,
    				ConfirmFunction: /*ActionToRemove*/ ctx[1],
    				ConfirmFunctionParams: { id: /*category*/ ctx[4].id },
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	let info = {
    		ctx,
    		current: null,
    		token: null,
    		hasCatch: true,
    		pending: create_pending_block,
    		then: create_then_block,
    		catch: create_catch_block,
    		value: 7,
    		error: 8
    	};

    	handle_promise(promise = Request$1.photo.get(/*category*/ ctx[4].name), info);

    	const block = {
    		c: function create() {
    			create_component(dialog.$$.fragment);
    			t0 = space();
    			div = element("div");
    			label = element("label");
    			t1 = text("✕");
    			t2 = space();
    			h4 = element("h4");
    			t3 = text(t3_value);
    			t4 = space();
    			figure = element("figure");
    			info.block.c();
    			t5 = space();
    			h3 = element("h3");
    			t6 = text(t6_value);
    			t7 = space();
    			br = element("br");
    			attr_dev(label, "for", label_for_value = "modal_remove_" + /*category*/ ctx[4].id);
    			attr_dev(label, "class", "btn btn-outline btn-sm btn-circle absolute right-2 top-2");
    			add_location(label, file$9, 33, 12, 1108);
    			attr_dev(h4, "class", "text-center px-2 pt-2");
    			set_style(h4, "color", /*category*/ ctx[4].color);
    			add_location(h4, file$9, 37, 12, 1288);
    			attr_dev(figure, "class", "px-2 pt-2");
    			add_location(figure, file$9, 40, 12, 1419);
    			attr_dev(h3, "class", "text-center");
    			set_style(h3, "color", /*category*/ ctx[4].income ? 'green' : 'red');
    			add_location(h3, file$9, 48, 12, 1756);
    			attr_dev(div, "class", "card card-bordered w-96 bg-base-100 shadow");
    			add_location(div, file$9, 32, 8, 1038);
    			add_location(br, file$9, 52, 8, 1931);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dialog, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, label);
    			append_dev(label, t1);
    			append_dev(div, t2);
    			append_dev(div, h4);
    			append_dev(h4, t3);
    			append_dev(div, t4);
    			append_dev(div, figure);
    			info.block.m(figure, info.anchor = null);
    			info.mount = () => figure;
    			info.anchor = null;
    			append_dev(div, t5);
    			append_dev(div, h3);
    			append_dev(h3, t6);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, br, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const dialog_changes = {};
    			if (dirty & /*categories*/ 1) dialog_changes.ModalID = "modal_remove_" + /*category*/ ctx[4].id;
    			if (dirty & /*categories*/ 1) dialog_changes.ConfirmFunctionParams = { id: /*category*/ ctx[4].id };

    			if (dirty & /*$$scope, categories*/ 513) {
    				dialog_changes.$$scope = { dirty, ctx };
    			}

    			dialog.$set(dialog_changes);

    			if (!current || dirty & /*categories*/ 1 && label_for_value !== (label_for_value = "modal_remove_" + /*category*/ ctx[4].id)) {
    				attr_dev(label, "for", label_for_value);
    			}

    			if ((!current || dirty & /*categories*/ 1) && t3_value !== (t3_value = /*category*/ ctx[4].name + "")) set_data_dev(t3, t3_value);

    			if (!current || dirty & /*categories*/ 1) {
    				set_style(h4, "color", /*category*/ ctx[4].color);
    			}

    			info.ctx = ctx;

    			if (dirty & /*categories*/ 1 && promise !== (promise = Request$1.photo.get(/*category*/ ctx[4].name)) && handle_promise(promise, info)) ; else {
    				update_await_block_branch(info, ctx, dirty);
    			}

    			if ((!current || dirty & /*categories*/ 1) && t6_value !== (t6_value = (/*category*/ ctx[4].income ? "income" : "outcome") + "")) set_data_dev(t6, t6_value);

    			if (!current || dirty & /*categories*/ 1) {
    				set_style(h3, "color", /*category*/ ctx[4].income ? 'green' : 'red');
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dialog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dialog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dialog, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			info.block.d();
    			info.token = null;
    			info = null;
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(br);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(28:4) {#each categories as category}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let div;
    	let current;
    	let each_value = /*categories*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	let each_1_else = null;

    	if (!each_value.length) {
    		each_1_else = create_else_block$1(ctx);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			if (each_1_else) {
    				each_1_else.c();
    			}

    			add_location(div, file$9, 26, 0, 736);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			if (each_1_else) {
    				each_1_else.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*categories, Request, ActionToRemove*/ 3) {
    				each_value = /*categories*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();

    				if (!each_value.length && each_1_else) {
    					each_1_else.p(ctx, dirty);
    				} else if (!each_value.length) {
    					each_1_else = create_else_block$1(ctx);
    					each_1_else.c();
    					each_1_else.m(div, null);
    				} else if (each_1_else) {
    					each_1_else.d(1);
    					each_1_else = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    			if (each_1_else) each_1_else.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CategoryList', slots, []);

    	const ActionToRemove = async ({ id }) => {
    		try {
    			await Request$1.category.delete({ BudgetID: budgetID, CategoryID: id });
    			await UpdateCategories();
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	const UpdateCategories = async () => {
    		try {
    			$$invalidate(0, categories = (await Request$1.category.getList({ BudgetID: budgetID })).data);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	let { categories = [] } = $$props;
    	let { budgetID } = $$props;
    	const writable_props = ['categories', 'budgetID'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CategoryList> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('categories' in $$props) $$invalidate(0, categories = $$props.categories);
    		if ('budgetID' in $$props) $$invalidate(2, budgetID = $$props.budgetID);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		Dialog,
    		ActionToRemove,
    		UpdateCategories,
    		categories,
    		budgetID
    	});

    	$$self.$inject_state = $$props => {
    		if ('categories' in $$props) $$invalidate(0, categories = $$props.categories);
    		if ('budgetID' in $$props) $$invalidate(2, budgetID = $$props.budgetID);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [categories, ActionToRemove, budgetID];
    }

    class CategoryList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { categories: 0, budgetID: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CategoryList",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*budgetID*/ ctx[2] === undefined && !('budgetID' in props)) {
    			console.warn("<CategoryList> was created without expected prop 'budgetID'");
    		}
    	}

    	get categories() {
    		throw new Error("<CategoryList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set categories(value) {
    		throw new Error("<CategoryList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get budgetID() {
    		throw new Error("<CategoryList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budgetID(value) {
    		throw new Error("<CategoryList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\category\ModalCreateCategory.svelte generated by Svelte v3.48.0 */
    const file$8 = "src\\components\\category\\ModalCreateCategory.svelte";

    function create_fragment$8(ctx) {
    	let input0;
    	let t0;
    	let div7;
    	let div6;
    	let label0;
    	let t1;
    	let t2;
    	let form;
    	let div0;
    	let label1;
    	let span0;
    	let t4;
    	let input1;
    	let t5;
    	let div4;
    	let label2;
    	let span1;
    	let t7;
    	let div3;
    	let div1;
    	let input2;
    	let t8;
    	let input3;
    	let t9;
    	let div2;
    	let label3;
    	let span2;

    	let t10_value = (/*modelToRequest*/ ctx[1].Income
    	? 'income '
    	: 'outcome ') + "";

    	let t10;
    	let t11;
    	let input4;
    	let t12;
    	let br;
    	let t13;
    	let div5;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t0 = space();
    			div7 = element("div");
    			div6 = element("div");
    			label0 = element("label");
    			t1 = text("✕");
    			t2 = space();
    			form = element("form");
    			div0 = element("div");
    			label1 = element("label");
    			span0 = element("span");
    			span0.textContent = "Category name";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			div4 = element("div");
    			label2 = element("label");
    			span1 = element("span");
    			span1.textContent = "Input color (hex):";
    			t7 = space();
    			div3 = element("div");
    			div1 = element("div");
    			input2 = element("input");
    			t8 = space();
    			input3 = element("input");
    			t9 = space();
    			div2 = element("div");
    			label3 = element("label");
    			span2 = element("span");
    			t10 = text(t10_value);
    			t11 = space();
    			input4 = element("input");
    			t12 = space();
    			br = element("br");
    			t13 = space();
    			div5 = element("div");
    			button = element("button");
    			button.textContent = "Create";
    			attr_dev(input0, "type", "checkbox");
    			attr_dev(input0, "id", /*ID*/ ctx[0]);
    			attr_dev(input0, "class", "modal-toggle");
    			add_location(input0, file$8, 29, 0, 790);
    			attr_dev(label0, "for", /*ID*/ ctx[0]);
    			attr_dev(label0, "class", "btn btn-sm btn-circle absolute right-2 top-2");
    			add_location(label0, file$8, 32, 8, 912);
    			attr_dev(span0, "class", "label-text");
    			add_location(span0, file$8, 36, 20, 1141);
    			attr_dev(label1, "class", "label");
    			add_location(label1, file$8, 35, 16, 1098);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "Category name");
    			attr_dev(input1, "class", "input input-bordered");
    			add_location(input1, file$8, 38, 16, 1230);
    			attr_dev(div0, "class", "form-control");
    			add_location(div0, file$8, 34, 12, 1054);
    			attr_dev(span1, "class", "label-text");
    			add_location(span1, file$8, 43, 20, 1485);
    			attr_dev(label2, "class", "label");
    			add_location(label2, file$8, 42, 16, 1442);
    			attr_dev(input2, "type", "color");
    			set_style(input2, "height", "50px");
    			add_location(input2, file$8, 47, 24, 1687);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "placeholder", "#FFFFFF");
    			attr_dev(input3, "class", "input input-bordered");
    			add_location(input3, file$8, 48, 24, 1789);
    			attr_dev(div1, "class", "input-group flex-grow");
    			add_location(div1, file$8, 46, 20, 1626);
    			attr_dev(span2, "class", "label-text text-lg");
    			set_style(span2, "color", /*modelToRequest*/ ctx[1].Income ? 'green' : 'red');
    			add_location(span2, file$8, 53, 28, 2095);
    			attr_dev(input4, "type", "checkbox");
    			attr_dev(input4, "class", "toggle p-2");
    			add_location(input4, file$8, 56, 28, 2330);
    			attr_dev(label3, "class", "label cursor-pointer p-2");
    			add_location(label3, file$8, 52, 24, 2025);
    			attr_dev(div2, "class", "flex-grow");
    			add_location(div2, file$8, 51, 20, 1976);
    			attr_dev(div3, "class", "flex w-full");
    			add_location(div3, file$8, 45, 16, 1579);
    			attr_dev(div4, "class", "form-control");
    			add_location(div4, file$8, 41, 12, 1398);
    			add_location(br, file$8, 61, 12, 2530);
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$8, 63, 16, 2593);
    			attr_dev(div5, "class", "form-control");
    			add_location(div5, file$8, 62, 12, 2549);
    			add_location(form, file$8, 33, 8, 1000);
    			attr_dev(div6, "class", "modal-box relative");
    			add_location(div6, file$8, 31, 4, 870);
    			attr_dev(div7, "class", "modal");
    			add_location(div7, file$8, 30, 0, 845);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div7, anchor);
    			append_dev(div7, div6);
    			append_dev(div6, label0);
    			append_dev(label0, t1);
    			append_dev(div6, t2);
    			append_dev(div6, form);
    			append_dev(form, div0);
    			append_dev(div0, label1);
    			append_dev(label1, span0);
    			append_dev(div0, t4);
    			append_dev(div0, input1);
    			set_input_value(input1, /*modelToRequest*/ ctx[1].Name);
    			append_dev(form, t5);
    			append_dev(form, div4);
    			append_dev(div4, label2);
    			append_dev(label2, span1);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, input2);
    			set_input_value(input2, /*modelToRequest*/ ctx[1].Color);
    			append_dev(div1, t8);
    			append_dev(div1, input3);
    			set_input_value(input3, /*modelToRequest*/ ctx[1].Color);
    			append_dev(div3, t9);
    			append_dev(div3, div2);
    			append_dev(div2, label3);
    			append_dev(label3, span2);
    			append_dev(span2, t10);
    			append_dev(label3, t11);
    			append_dev(label3, input4);
    			input4.checked = /*modelToRequest*/ ctx[1].Income;
    			append_dev(form, t12);
    			append_dev(form, br);
    			append_dev(form, t13);
    			append_dev(form, div5);
    			append_dev(div5, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[5]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[6]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[7]),
    					listen_dev(input4, "change", /*input4_change_handler*/ ctx[8]),
    					listen_dev(form, "submit", prevent_default(/*create*/ ctx[2]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ID*/ 1) {
    				attr_dev(input0, "id", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*ID*/ 1) {
    				attr_dev(label0, "for", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*modelToRequest*/ 2 && input1.value !== /*modelToRequest*/ ctx[1].Name) {
    				set_input_value(input1, /*modelToRequest*/ ctx[1].Name);
    			}

    			if (dirty & /*modelToRequest*/ 2) {
    				set_input_value(input2, /*modelToRequest*/ ctx[1].Color);
    			}

    			if (dirty & /*modelToRequest*/ 2 && input3.value !== /*modelToRequest*/ ctx[1].Color) {
    				set_input_value(input3, /*modelToRequest*/ ctx[1].Color);
    			}

    			if (dirty & /*modelToRequest*/ 2 && t10_value !== (t10_value = (/*modelToRequest*/ ctx[1].Income
    			? 'income '
    			: 'outcome ') + "")) set_data_dev(t10, t10_value);

    			if (dirty & /*modelToRequest*/ 2) {
    				set_style(span2, "color", /*modelToRequest*/ ctx[1].Income ? 'green' : 'red');
    			}

    			if (dirty & /*modelToRequest*/ 2) {
    				input4.checked = /*modelToRequest*/ ctx[1].Income;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div7);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalCreateCategory', slots, []);

    	const create = async () => {
    		try {
    			$$invalidate(1, modelToRequest.BudgetID = budgetID, modelToRequest);
    			await Request$1.category.create(modelToRequest);
    			await SuccessAction();

    			try {
    				document.getElementById(ID).click(); //to close.
    			} catch {
    				
    			}
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	let { ID = "budget-create-modal" } = $$props;
    	let { budgetID } = $$props;

    	let { SuccessAction = () => {
    		
    	} } = $$props;

    	let modelToRequest = {
    		BudgetID: "",
    		Name: "",
    		Income: false,
    		Color: "#000000"
    	};

    	const writable_props = ['ID', 'budgetID', 'SuccessAction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalCreateCategory> was created with unknown prop '${key}'`);
    	});

    	function input1_input_handler() {
    		modelToRequest.Name = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input2_input_handler() {
    		modelToRequest.Color = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input3_input_handler() {
    		modelToRequest.Color = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input4_change_handler() {
    		modelToRequest.Income = this.checked;
    		$$invalidate(1, modelToRequest);
    	}

    	$$self.$$set = $$props => {
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('budgetID' in $$props) $$invalidate(3, budgetID = $$props.budgetID);
    		if ('SuccessAction' in $$props) $$invalidate(4, SuccessAction = $$props.SuccessAction);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		create,
    		ID,
    		budgetID,
    		SuccessAction,
    		modelToRequest
    	});

    	$$self.$inject_state = $$props => {
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('budgetID' in $$props) $$invalidate(3, budgetID = $$props.budgetID);
    		if ('SuccessAction' in $$props) $$invalidate(4, SuccessAction = $$props.SuccessAction);
    		if ('modelToRequest' in $$props) $$invalidate(1, modelToRequest = $$props.modelToRequest);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		ID,
    		modelToRequest,
    		create,
    		budgetID,
    		SuccessAction,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_change_handler
    	];
    }

    class ModalCreateCategory extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { ID: 0, budgetID: 3, SuccessAction: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalCreateCategory",
    			options,
    			id: create_fragment$8.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*budgetID*/ ctx[3] === undefined && !('budgetID' in props)) {
    			console.warn("<ModalCreateCategory> was created without expected prop 'budgetID'");
    		}
    	}

    	get ID() {
    		throw new Error("<ModalCreateCategory>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ID(value) {
    		throw new Error("<ModalCreateCategory>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get budgetID() {
    		throw new Error("<ModalCreateCategory>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budgetID(value) {
    		throw new Error("<ModalCreateCategory>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get SuccessAction() {
    		throw new Error("<ModalCreateCategory>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set SuccessAction(value) {
    		throw new Error("<ModalCreateCategory>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var css_248z$2 = ".fixed-btn.svelte-zv83we{position:fixed;bottom:20px;right:30px}";
    styleInject(css_248z$2);

    /* src\views\BudgetCategories.svelte generated by Svelte v3.48.0 */
    const file$7 = "src\\views\\BudgetCategories.svelte";

    function create_fragment$7(ctx) {
    	let modalcreatecategory;
    	let t0;
    	let div;
    	let categorylist;
    	let t1;
    	let label;
    	let svg;
    	let path;
    	let current;

    	modalcreatecategory = new ModalCreateCategory({
    			props: {
    				ID: CreateCategoryModalID,
    				budgetID: /*params*/ ctx[0].budgetID,
    				SuccessAction: /*UpdateCategories*/ ctx[2]
    			},
    			$$inline: true
    		});

    	categorylist = new CategoryList({
    			props: {
    				categories: /*categories*/ ctx[1],
    				budgetID: /*params*/ ctx[0].budgetID
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(modalcreatecategory.$$.fragment);
    			t0 = space();
    			div = element("div");
    			create_component(categorylist.$$.fragment);
    			t1 = space();
    			label = element("label");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(div, "class", "center_content");
    			add_location(div, file$7, 28, 0, 895);
    			attr_dev(path, "d", "M24 10h-10v-10h-4v10h-10v4h10v10h4v-10h10z");
    			add_location(path, file$7, 34, 8, 1180);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "46");
    			attr_dev(svg, "height", "46");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			add_location(svg, file$7, 33, 4, 1087);
    			attr_dev(label, "class", "fixed-btn btn-ghost btn-circle svelte-zv83we");
    			attr_dev(label, "for", CreateCategoryModalID);
    			add_location(label, file$7, 32, 0, 1007);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalcreatecategory, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(categorylist, div, null);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, label, anchor);
    			append_dev(label, svg);
    			append_dev(svg, path);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const modalcreatecategory_changes = {};
    			if (dirty & /*params*/ 1) modalcreatecategory_changes.budgetID = /*params*/ ctx[0].budgetID;
    			modalcreatecategory.$set(modalcreatecategory_changes);
    			const categorylist_changes = {};
    			if (dirty & /*categories*/ 2) categorylist_changes.categories = /*categories*/ ctx[1];
    			if (dirty & /*params*/ 1) categorylist_changes.budgetID = /*params*/ ctx[0].budgetID;
    			categorylist.$set(categorylist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalcreatecategory.$$.fragment, local);
    			transition_in(categorylist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalcreatecategory.$$.fragment, local);
    			transition_out(categorylist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalcreatecategory, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			destroy_component(categorylist);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(label);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const CreateCategoryModalID = "category-create-modal";

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BudgetCategories', slots, []);

    	const UpdateCategories = async () => {
    		try {
    			$$invalidate(1, categories = (await Request$1.category.getList({ BudgetID: params.budgetID })).data);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	onMount(async () => {
    		await UpdateCategories();
    	});

    	let { params = {} } = $$props;
    	let categories = [];
    	const writable_props = ['params'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BudgetCategories> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(0, params = $$props.params);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		Request: Request$1,
    		CategoryList,
    		ErrorWrapper,
    		ModalCreateCategory,
    		UpdateCategories,
    		params,
    		categories,
    		CreateCategoryModalID
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(0, params = $$props.params);
    		if ('categories' in $$props) $$invalidate(1, categories = $$props.categories);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [params, categories, UpdateCategories];
    }

    class BudgetCategories extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { params: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BudgetCategories",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get params() {
    		throw new Error("<BudgetCategories>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<BudgetCategories>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\plannedBudget\ModalCreatePlannedBudget.svelte generated by Svelte v3.48.0 */

    const file$6 = "src\\components\\plannedBudget\\ModalCreatePlannedBudget.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[22] = list[i];
    	return child_ctx;
    }

    // (85:28) {#each $avaliableCurrency as currency}
    function create_each_block_1$1(ctx) {
    	let option;
    	let t_value = /*currency*/ ctx[22] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*currency*/ ctx[22];
    			option.value = option.__value;
    			add_location(option, file$6, 85, 32, 3603);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$avaliableCurrency*/ 8 && t_value !== (t_value = /*currency*/ ctx[22] + "")) set_data_dev(t, t_value);

    			if (dirty & /*$avaliableCurrency*/ 8 && option_value_value !== (option_value_value = /*currency*/ ctx[22])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(85:28) {#each $avaliableCurrency as currency}",
    		ctx
    	});

    	return block;
    }

    // (100:24) {#each $avaliableCategories as category}
    function create_each_block$2(ctx) {
    	let option;
    	let t_value = /*category*/ ctx[19].name + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*category*/ ctx[19].id;
    			option.value = option.__value;
    			add_location(option, file$6, 100, 28, 4253);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$avaliableCategories*/ 16 && t_value !== (t_value = /*category*/ ctx[19].name + "")) set_data_dev(t, t_value);

    			if (dirty & /*$avaliableCategories*/ 16 && option_value_value !== (option_value_value = /*category*/ ctx[19].id)) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(100:24) {#each $avaliableCategories as category}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let input0;
    	let t0;
    	let div13;
    	let div12;
    	let label0;
    	let t1;
    	let t2;
    	let form;
    	let div0;
    	let label1;
    	let span0;
    	let t4;
    	let input1;
    	let t5;
    	let div1;
    	let textarea;
    	let t6;
    	let div5;
    	let div4;
    	let div2;
    	let label2;
    	let span1;
    	let t8;
    	let input2;
    	let t9;
    	let div3;
    	let label3;
    	let span2;
    	let t11;
    	let input3;
    	let t12;
    	let div9;
    	let label4;
    	let span3;
    	let t14;
    	let div8;
    	let div6;
    	let input4;
    	let t15;
    	let div7;
    	let select0;
    	let t16;
    	let div10;
    	let label5;
    	let span4;
    	let t18;
    	let label6;
    	let select1;
    	let t19;
    	let span5;
    	let input5;
    	let t20;
    	let br;
    	let t21;
    	let div11;
    	let button;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*$avaliableCurrency*/ ctx[3];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	let each_value = /*$avaliableCategories*/ ctx[4];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			input0 = element("input");
    			t0 = space();
    			div13 = element("div");
    			div12 = element("div");
    			label0 = element("label");
    			t1 = text("✕");
    			t2 = space();
    			form = element("form");
    			div0 = element("div");
    			label1 = element("label");
    			span0 = element("span");
    			span0.textContent = "Planned budget title:";
    			t4 = space();
    			input1 = element("input");
    			t5 = space();
    			div1 = element("div");
    			textarea = element("textarea");
    			t6 = space();
    			div5 = element("div");
    			div4 = element("div");
    			div2 = element("div");
    			label2 = element("label");
    			span1 = element("span");
    			span1.textContent = "Start:";
    			t8 = space();
    			input2 = element("input");
    			t9 = space();
    			div3 = element("div");
    			label3 = element("label");
    			span2 = element("span");
    			span2.textContent = "Close:";
    			t11 = space();
    			input3 = element("input");
    			t12 = space();
    			div9 = element("div");
    			label4 = element("label");
    			span3 = element("span");
    			span3.textContent = "Enter planned balance:";
    			t14 = space();
    			div8 = element("div");
    			div6 = element("div");
    			input4 = element("input");
    			t15 = space();
    			div7 = element("div");
    			select0 = element("select");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t16 = space();
    			div10 = element("div");
    			label5 = element("label");
    			span4 = element("span");
    			span4.textContent = "Select category";
    			t18 = space();
    			label6 = element("label");
    			select1 = element("select");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t19 = space();
    			span5 = element("span");
    			input5 = element("input");
    			t20 = space();
    			br = element("br");
    			t21 = space();
    			div11 = element("div");
    			button = element("button");
    			button.textContent = "Create";
    			attr_dev(input0, "type", "checkbox");
    			attr_dev(input0, "id", /*ID*/ ctx[0]);
    			attr_dev(input0, "class", "modal-toggle");
    			add_location(input0, file$6, 38, 0, 1279);
    			attr_dev(label0, "for", /*ID*/ ctx[0]);
    			attr_dev(label0, "class", "btn btn-sm btn-circle absolute right-2 top-2");
    			add_location(label0, file$6, 41, 8, 1401);
    			attr_dev(span0, "class", "label-text");
    			add_location(span0, file$6, 45, 20, 1630);
    			attr_dev(label1, "class", "label");
    			add_location(label1, file$6, 44, 16, 1587);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "placeholder", "Title");
    			attr_dev(input1, "class", "input input-bordered");
    			add_location(input1, file$6, 47, 16, 1727);
    			attr_dev(div0, "class", "form-control");
    			add_location(div0, file$6, 43, 12, 1543);
    			attr_dev(textarea, "class", "textarea textarea-bordered");
    			attr_dev(textarea, "placeholder", "Descriptions");
    			add_location(textarea, file$6, 52, 16, 1939);
    			attr_dev(div1, "class", "form-control my-4");
    			add_location(div1, file$6, 51, 12, 1890);
    			attr_dev(span1, "class", "label-text");
    			add_location(span1, file$6, 60, 28, 2322);
    			attr_dev(label2, "class", "label");
    			add_location(label2, file$6, 59, 24, 2271);
    			attr_dev(input2, "type", "date");
    			attr_dev(input2, "class", "input");
    			add_location(input2, file$6, 62, 24, 2420);
    			attr_dev(div2, "class", "flex w-full p-2");
    			add_location(div2, file$6, 58, 20, 2216);
    			attr_dev(span2, "class", "label-text");
    			add_location(span2, file$6, 66, 28, 2648);
    			attr_dev(label3, "class", "label");
    			add_location(label3, file$6, 65, 24, 2597);
    			attr_dev(input3, "type", "date");
    			attr_dev(input3, "class", "input");
    			add_location(input3, file$6, 68, 24, 2746);
    			attr_dev(div3, "class", "flex w-full p-2");
    			add_location(div3, file$6, 64, 20, 2542);
    			attr_dev(div4, "class", "flex w-full");
    			add_location(div4, file$6, 57, 16, 2169);
    			attr_dev(div5, "class", "form-control");
    			add_location(div5, file$6, 56, 12, 2125);
    			attr_dev(span3, "class", "label-text");
    			add_location(span3, file$6, 75, 20, 2991);
    			attr_dev(label4, "class", "label");
    			add_location(label4, file$6, 74, 16, 2948);
    			attr_dev(input4, "type", "number");
    			attr_dev(input4, "placeholder", "amount");
    			attr_dev(input4, "class", "input input-bordered");
    			add_location(input4, file$6, 79, 24, 3180);
    			attr_dev(div6, "class", "pr-5");
    			add_location(div6, file$6, 78, 20, 3136);
    			attr_dev(select0, "class", "select select-bordered");
    			if (/*modelToRequest*/ ctx[1].Currency === void 0) add_render_callback(() => /*select0_change_handler*/ ctx[13].call(select0));
    			add_location(select0, file$6, 83, 24, 3425);
    			attr_dev(div7, "class", "flex-grow");
    			add_location(div7, file$6, 82, 20, 3376);
    			attr_dev(div8, "class", "flex w-full");
    			add_location(div8, file$6, 77, 16, 3089);
    			attr_dev(div9, "class", "form-control");
    			add_location(div9, file$6, 73, 12, 2904);
    			attr_dev(span4, "class", "label-text");
    			add_location(span4, file$6, 94, 20, 3877);
    			attr_dev(label5, "class", "label");
    			add_location(label5, file$6, 93, 16, 3834);
    			attr_dev(select1, "class", "select select-bordered btn-wide");
    			select1.disabled = /*CategoryNull*/ ctx[2];
    			if (/*modelToRequest*/ ctx[1].CategoryID === void 0) add_render_callback(() => /*select1_change_handler*/ ctx[14].call(select1));
    			add_location(select1, file$6, 97, 20, 4017);
    			attr_dev(input5, "type", "checkbox");
    			attr_dev(input5, "class", "toggle toggle-md");
    			add_location(input5, file$6, 104, 24, 4423);
    			add_location(span5, file$6, 103, 20, 4391);
    			attr_dev(label6, "class", "input-group");
    			add_location(label6, file$6, 96, 16, 3968);
    			attr_dev(div10, "class", "form-control");
    			add_location(div10, file$6, 92, 12, 3790);
    			add_location(br, file$6, 111, 12, 4690);
    			attr_dev(button, "class", "btn btn-primary");
    			add_location(button, file$6, 114, 16, 4755);
    			attr_dev(div11, "class", "form-control");
    			add_location(div11, file$6, 113, 12, 4711);
    			add_location(form, file$6, 42, 8, 1489);
    			attr_dev(div12, "class", "modal-box relative");
    			add_location(div12, file$6, 40, 4, 1359);
    			attr_dev(div13, "class", "modal");
    			add_location(div13, file$6, 39, 0, 1334);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input0, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div13, anchor);
    			append_dev(div13, div12);
    			append_dev(div12, label0);
    			append_dev(label0, t1);
    			append_dev(div12, t2);
    			append_dev(div12, form);
    			append_dev(form, div0);
    			append_dev(div0, label1);
    			append_dev(label1, span0);
    			append_dev(div0, t4);
    			append_dev(div0, input1);
    			set_input_value(input1, /*modelToRequest*/ ctx[1].Title);
    			append_dev(form, t5);
    			append_dev(form, div1);
    			append_dev(div1, textarea);
    			set_input_value(textarea, /*modelToRequest*/ ctx[1].Desctiption);
    			append_dev(form, t6);
    			append_dev(form, div5);
    			append_dev(div5, div4);
    			append_dev(div4, div2);
    			append_dev(div2, label2);
    			append_dev(label2, span1);
    			append_dev(div2, t8);
    			append_dev(div2, input2);
    			set_input_value(input2, /*modelToRequest*/ ctx[1].DateStart);
    			append_dev(div4, t9);
    			append_dev(div4, div3);
    			append_dev(div3, label3);
    			append_dev(label3, span2);
    			append_dev(div3, t11);
    			append_dev(div3, input3);
    			set_input_value(input3, /*modelToRequest*/ ctx[1].DateEnd);
    			append_dev(form, t12);
    			append_dev(form, div9);
    			append_dev(div9, label4);
    			append_dev(label4, span3);
    			append_dev(div9, t14);
    			append_dev(div9, div8);
    			append_dev(div8, div6);
    			append_dev(div6, input4);
    			set_input_value(input4, /*modelToRequest*/ ctx[1].PlannedAmount);
    			append_dev(div8, t15);
    			append_dev(div8, div7);
    			append_dev(div7, select0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(select0, null);
    			}

    			select_option(select0, /*modelToRequest*/ ctx[1].Currency);
    			append_dev(form, t16);
    			append_dev(form, div10);
    			append_dev(div10, label5);
    			append_dev(label5, span4);
    			append_dev(div10, t18);
    			append_dev(div10, label6);
    			append_dev(label6, select1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select1, null);
    			}

    			select_option(select1, /*modelToRequest*/ ctx[1].CategoryID);
    			append_dev(label6, t19);
    			append_dev(label6, span5);
    			append_dev(span5, input5);
    			input5.checked = /*CategoryNull*/ ctx[2];
    			append_dev(form, t20);
    			append_dev(form, br);
    			append_dev(form, t21);
    			append_dev(form, div11);
    			append_dev(div11, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[8]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[9]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[10]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[11]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[12]),
    					listen_dev(select0, "change", /*select0_change_handler*/ ctx[13]),
    					listen_dev(select1, "change", /*select1_change_handler*/ ctx[14]),
    					listen_dev(input5, "change", /*input5_change_handler*/ ctx[15]),
    					listen_dev(input5, "change", /*change_handler*/ ctx[16], false, false, false),
    					listen_dev(form, "submit", prevent_default(/*create*/ ctx[5]), false, true, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*ID*/ 1) {
    				attr_dev(input0, "id", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*ID*/ 1) {
    				attr_dev(label0, "for", /*ID*/ ctx[0]);
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 10 && input1.value !== /*modelToRequest*/ ctx[1].Title) {
    				set_input_value(input1, /*modelToRequest*/ ctx[1].Title);
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 10) {
    				set_input_value(textarea, /*modelToRequest*/ ctx[1].Desctiption);
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 10) {
    				set_input_value(input2, /*modelToRequest*/ ctx[1].DateStart);
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 10) {
    				set_input_value(input3, /*modelToRequest*/ ctx[1].DateEnd);
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 10 && to_number(input4.value) !== /*modelToRequest*/ ctx[1].PlannedAmount) {
    				set_input_value(input4, /*modelToRequest*/ ctx[1].PlannedAmount);
    			}

    			if (dirty & /*$avaliableCurrency*/ 8) {
    				each_value_1 = /*$avaliableCurrency*/ ctx[3];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_1[i] = create_each_block_1$1(child_ctx);
    						each_blocks_1[i].c();
    						each_blocks_1[i].m(select0, null);
    					}
    				}

    				for (; i < each_blocks_1.length; i += 1) {
    					each_blocks_1[i].d(1);
    				}

    				each_blocks_1.length = each_value_1.length;
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 10) {
    				select_option(select0, /*modelToRequest*/ ctx[1].Currency);
    			}

    			if (dirty & /*$avaliableCategories*/ 16) {
    				each_value = /*$avaliableCategories*/ ctx[4];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select1, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*CategoryNull*/ 4) {
    				prop_dev(select1, "disabled", /*CategoryNull*/ ctx[2]);
    			}

    			if (dirty & /*modelToRequest, $avaliableCurrency*/ 10) {
    				select_option(select1, /*modelToRequest*/ ctx[1].CategoryID);
    			}

    			if (dirty & /*CategoryNull*/ 4) {
    				input5.checked = /*CategoryNull*/ ctx[2];
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div13);
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let $selectedBudget;
    	let $avaliableCurrency;
    	let $avaliableCategories;
    	validate_store(selectedBudget, 'selectedBudget');
    	component_subscribe($$self, selectedBudget, $$value => $$invalidate(17, $selectedBudget = $$value));
    	validate_store(avaliableCurrency, 'avaliableCurrency');
    	component_subscribe($$self, avaliableCurrency, $$value => $$invalidate(3, $avaliableCurrency = $$value));
    	validate_store(avaliableCategories, 'avaliableCategories');
    	component_subscribe($$self, avaliableCategories, $$value => $$invalidate(4, $avaliableCategories = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalCreatePlannedBudget', slots, []);

    	const create = async () => {
    		try {
    			$$invalidate(1, modelToRequest.BudgetID = budgetID, modelToRequest);
    			await Request$1.plannedBudget.create(modelToRequest);
    			await SuccessAction();

    			try {
    				document.getElementById(ID).click(); //to close.
    			} catch {
    				
    			}

    			$$invalidate(1, modelToRequest = initialRequestModel);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	let { ID = "planned-budget-create-modal" } = $$props;
    	let { budgetID } = $$props;

    	let { SuccessAction = () => {
    		
    	} } = $$props;

    	const initialRequestModel = {
    		BudgetID: "",
    		DateStart: new Date().toISOString().split('T')[0],
    		DateEnd: new Date(new Date().getTime() + 86400000 * 7).toISOString().split('T')[0],
    		Title: "",
    		Desctiption: "",
    		PlannedAmount: 100,
    		Currency: $selectedBudget?.balance?.currency || "UAH",
    		CategoryID: null
    	};

    	let modelToRequest = initialRequestModel;
    	let CategoryNull = true;
    	const writable_props = ['ID', 'budgetID', 'SuccessAction'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalCreatePlannedBudget> was created with unknown prop '${key}'`);
    	});

    	function input1_input_handler() {
    		modelToRequest.Title = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function textarea_input_handler() {
    		modelToRequest.Desctiption = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input2_input_handler() {
    		modelToRequest.DateStart = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input3_input_handler() {
    		modelToRequest.DateEnd = this.value;
    		$$invalidate(1, modelToRequest);
    	}

    	function input4_input_handler() {
    		modelToRequest.PlannedAmount = to_number(this.value);
    		$$invalidate(1, modelToRequest);
    	}

    	function select0_change_handler() {
    		modelToRequest.Currency = select_value(this);
    		$$invalidate(1, modelToRequest);
    	}

    	function select1_change_handler() {
    		modelToRequest.CategoryID = select_value(this);
    		$$invalidate(1, modelToRequest);
    	}

    	function input5_change_handler() {
    		CategoryNull = this.checked;
    		$$invalidate(2, CategoryNull);
    	}

    	const change_handler = () => {
    		if (CategoryNull) $$invalidate(1, modelToRequest.CategoryID = null, modelToRequest);
    	};

    	$$self.$$set = $$props => {
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('budgetID' in $$props) $$invalidate(6, budgetID = $$props.budgetID);
    		if ('SuccessAction' in $$props) $$invalidate(7, SuccessAction = $$props.SuccessAction);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		avaliableCategories,
    		avaliableCurrency,
    		selectedBudget,
    		create,
    		ID,
    		budgetID,
    		SuccessAction,
    		initialRequestModel,
    		modelToRequest,
    		CategoryNull,
    		$selectedBudget,
    		$avaliableCurrency,
    		$avaliableCategories
    	});

    	$$self.$inject_state = $$props => {
    		if ('ID' in $$props) $$invalidate(0, ID = $$props.ID);
    		if ('budgetID' in $$props) $$invalidate(6, budgetID = $$props.budgetID);
    		if ('SuccessAction' in $$props) $$invalidate(7, SuccessAction = $$props.SuccessAction);
    		if ('modelToRequest' in $$props) $$invalidate(1, modelToRequest = $$props.modelToRequest);
    		if ('CategoryNull' in $$props) $$invalidate(2, CategoryNull = $$props.CategoryNull);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		ID,
    		modelToRequest,
    		CategoryNull,
    		$avaliableCurrency,
    		$avaliableCategories,
    		create,
    		budgetID,
    		SuccessAction,
    		input1_input_handler,
    		textarea_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		select0_change_handler,
    		select1_change_handler,
    		input5_change_handler,
    		change_handler
    	];
    }

    class ModalCreatePlannedBudget extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { ID: 0, budgetID: 6, SuccessAction: 7 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalCreatePlannedBudget",
    			options,
    			id: create_fragment$6.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*budgetID*/ ctx[6] === undefined && !('budgetID' in props)) {
    			console.warn("<ModalCreatePlannedBudget> was created without expected prop 'budgetID'");
    		}
    	}

    	get ID() {
    		throw new Error("<ModalCreatePlannedBudget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ID(value) {
    		throw new Error("<ModalCreatePlannedBudget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get budgetID() {
    		throw new Error("<ModalCreatePlannedBudget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budgetID(value) {
    		throw new Error("<ModalCreatePlannedBudget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get SuccessAction() {
    		throw new Error("<ModalCreatePlannedBudget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set SuccessAction(value) {
    		throw new Error("<ModalCreatePlannedBudget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\plannedBudget\PlannedBudgetList.svelte generated by Svelte v3.48.0 */
    const file$5 = "src\\components\\plannedBudget\\PlannedBudgetList.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[9] = list;
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (75:12) <Dialog ModalID="modal_remove_PB_{plannedBudget.id}" ConfirmFunction={ActionToRemove}                      ConfirmFunctionParams={{id:plannedBudget.id}}>
    function create_default_slot(ctx) {
    	let h1;
    	let t0;
    	let br;
    	let b;
    	let t1_value = /*plannedBudget*/ ctx[8].title + "";
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			h1 = element("h1");
    			t0 = text("You really want to delete ");
    			br = element("br");
    			b = element("b");
    			t1 = text(t1_value);
    			t2 = text(" planned budget?");
    			add_location(br, file$5, 76, 46, 3015);
    			add_location(b, file$5, 76, 51, 3020);
    			add_location(h1, file$5, 76, 16, 2985);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h1, anchor);
    			append_dev(h1, t0);
    			append_dev(h1, br);
    			append_dev(h1, b);
    			append_dev(b, t1);
    			append_dev(h1, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*plannedBudgets*/ 1 && t1_value !== (t1_value = /*plannedBudget*/ ctx[8].title + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(75:12) <Dialog ModalID=\\\"modal_remove_PB_{plannedBudget.id}\\\" ConfirmFunction={ActionToRemove}                      ConfirmFunctionParams={{id:plannedBudget.id}}>",
    		ctx
    	});

    	return block;
    }

    // (119:16) {:else}
    function create_else_block(ctx) {
    	let td0;
    	let input0;
    	let input0_class_value;
    	let td0_class_value;
    	let t0;
    	let td1;
    	let div;
    	let input1;
    	let input1_max_value;
    	let td1_class_value;
    	let t1;
    	let td2;
    	let t2_value = /*plannedBudget*/ ctx[8].plannedBalance.amount + "";
    	let t2;
    	let td2_class_value;
    	let t3;
    	let td3;
    	let t4;
    	let td3_class_value;
    	let t5;
    	let td4;
    	let label;
    	let t6;
    	let label_for_value;
    	let t7;
    	let button;
    	let td4_class_value;
    	let mounted;
    	let dispose;

    	function input0_input_handler() {
    		/*input0_input_handler*/ ctx[6].call(input0, /*each_value*/ ctx[9], /*plannedBudget_index*/ ctx[10]);
    	}

    	function input1_change_input_handler() {
    		/*input1_change_input_handler*/ ctx[7].call(input1, /*each_value*/ ctx[9], /*plannedBudget_index*/ ctx[10]);
    	}

    	const block = {
    		c: function create() {
    			td0 = element("td");
    			input0 = element("input");
    			t0 = space();
    			td1 = element("td");
    			div = element("div");
    			input1 = element("input");
    			t1 = space();
    			td2 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td3 = element("td");
    			t4 = text("Not bound");
    			t5 = space();
    			td4 = element("td");
    			label = element("label");
    			t6 = text("Delete");
    			t7 = space();
    			button = element("button");
    			button.textContent = "Save";
    			attr_dev(input0, "class", input0_class_value = "input input-sm text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(input0, file$5, 120, 24, 5440);
    			attr_dev(td0, "class", td0_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td0, file$5, 119, 20, 5359);
    			attr_dev(input1, "type", "range");
    			attr_dev(input1, "min", "0");
    			attr_dev(input1, "max", input1_max_value = /*plannedBudget*/ ctx[8].plannedBalance.amount);
    			attr_dev(input1, "class", "range range-sm range-accent");
    			add_location(input1, file$5, 125, 28, 5778);
    			attr_dev(div, "class", "ml-2 mr-2");
    			add_location(div, file$5, 124, 24, 5725);
    			attr_dev(td1, "class", td1_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td1, file$5, 123, 20, 5644);
    			attr_dev(td2, "class", td2_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td2, file$5, 130, 20, 6089);
    			attr_dev(td3, "class", td3_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td3, file$5, 133, 20, 6256);
    			attr_dev(label, "for", label_for_value = "modal_remove_PB_" + /*plannedBudget*/ ctx[8].id);
    			attr_dev(label, "class", "btn btn-ghost btn-xs");
    			add_location(label, file$5, 135, 24, 6416);
    			attr_dev(button, "class", "btn btn-ghost btn-xs");
    			add_location(button, file$5, 138, 24, 6589);
    			attr_dev(td4, "class", td4_class_value = /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td4, file$5, 134, 20, 6347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td0, anchor);
    			append_dev(td0, input0);
    			set_input_value(input0, /*plannedBudget*/ ctx[8].realizeBalance.amount);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, td1, anchor);
    			append_dev(td1, div);
    			append_dev(div, input1);
    			set_input_value(input1, /*plannedBudget*/ ctx[8].realizeBalance.amount);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, td2, anchor);
    			append_dev(td2, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, td3, anchor);
    			append_dev(td3, t4);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, td4, anchor);
    			append_dev(td4, label);
    			append_dev(label, t6);
    			append_dev(td4, t7);
    			append_dev(td4, button);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", input0_input_handler),
    					listen_dev(input1, "change", input1_change_input_handler),
    					listen_dev(input1, "input", input1_change_input_handler),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*SaveAction*/ ctx[4](/*plannedBudget*/ ctx[8].id, /*plannedBudget*/ ctx[8].realizeBalance.amount))) /*SaveAction*/ ctx[4](/*plannedBudget*/ ctx[8].id, /*plannedBudget*/ ctx[8].realizeBalance.amount).apply(this, arguments);
    						},
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (dirty & /*plannedBudgets*/ 1 && input0_class_value !== (input0_class_value = "input input-sm text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(input0, "class", input0_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && input0.value !== /*plannedBudget*/ ctx[8].realizeBalance.amount) {
    				set_input_value(input0, /*plannedBudget*/ ctx[8].realizeBalance.amount);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && td0_class_value !== (td0_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td0, "class", td0_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && input1_max_value !== (input1_max_value = /*plannedBudget*/ ctx[8].plannedBalance.amount)) {
    				attr_dev(input1, "max", input1_max_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1) {
    				set_input_value(input1, /*plannedBudget*/ ctx[8].realizeBalance.amount);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && td1_class_value !== (td1_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td1, "class", td1_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && t2_value !== (t2_value = /*plannedBudget*/ ctx[8].plannedBalance.amount + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*plannedBudgets*/ 1 && td2_class_value !== (td2_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td2, "class", td2_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && td3_class_value !== (td3_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td3, "class", td3_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && label_for_value !== (label_for_value = "modal_remove_PB_" + /*plannedBudget*/ ctx[8].id)) {
    				attr_dev(label, "for", label_for_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && td4_class_value !== (td4_class_value = /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td4, "class", td4_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td0);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(td1);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(td2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(td3);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(td4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(119:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (95:16) {#if plannedBudget.transactionDescriptionCategory}
    function create_if_block$2(ctx) {
    	let td0;
    	let t0_value = /*plannedBudget*/ ctx[8].realizeBalance.amount + "";
    	let t0;
    	let td0_class_value;
    	let t1;
    	let td1;
    	let div;
    	let input;
    	let input_max_value;
    	let input_value_value;
    	let td1_class_value;
    	let t2;
    	let td2;
    	let t3_value = /*plannedBudget*/ ctx[8].plannedBalance.amount + "";
    	let t3;
    	let td2_class_value;
    	let t4;
    	let td3;
    	let t5_value = /*plannedBudget*/ ctx[8].transactionDescriptionCategory.name + "";
    	let t5;
    	let td3_class_value;
    	let t6;
    	let td4;
    	let label;
    	let t7;
    	let label_for_value;
    	let td4_class_value;

    	const block = {
    		c: function create() {
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			div = element("div");
    			input = element("input");
    			t2 = space();
    			td2 = element("td");
    			t3 = text(t3_value);
    			t4 = space();
    			td3 = element("td");
    			t5 = text(t5_value);
    			t6 = space();
    			td4 = element("td");
    			label = element("label");
    			t7 = text("Delete");
    			attr_dev(td0, "class", td0_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td0, file$5, 95, 20, 3975);
    			attr_dev(input, "type", "range");
    			attr_dev(input, "min", "0");
    			attr_dev(input, "max", input_max_value = /*plannedBudget*/ ctx[8].plannedBalance.amount);
    			input.value = input_value_value = /*plannedBudget*/ ctx[8].realizeBalance.amount;
    			attr_dev(input, "class", "range range-sm range-accent");
    			input.disabled = true;
    			add_location(input, file$5, 100, 28, 4276);
    			attr_dev(div, "class", "ml-2 mr-2");
    			add_location(div, file$5, 99, 24, 4223);
    			attr_dev(td1, "class", td1_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td1, file$5, 98, 20, 4142);
    			attr_dev(td2, "class", td2_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td2, file$5, 106, 20, 4629);
    			attr_dev(td3, "class", td3_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			set_style(td3, "color", /*plannedBudget*/ ctx[8].transactionDescriptionCategory.color);
    			add_location(td3, file$5, 109, 20, 4796);
    			attr_dev(label, "for", label_for_value = "modal_remove_PB_" + /*plannedBudget*/ ctx[8].id);
    			attr_dev(label, "class", "btn btn-ghost btn-xs");
    			add_location(label, file$5, 114, 24, 5138);
    			attr_dev(td4, "class", td4_class_value = /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td4, file$5, 113, 20, 5069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td0, anchor);
    			append_dev(td0, t0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, td1, anchor);
    			append_dev(td1, div);
    			append_dev(div, input);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, td2, anchor);
    			append_dev(td2, t3);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, td3, anchor);
    			append_dev(td3, t5);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, td4, anchor);
    			append_dev(td4, label);
    			append_dev(label, t7);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*plannedBudgets*/ 1 && t0_value !== (t0_value = /*plannedBudget*/ ctx[8].realizeBalance.amount + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*plannedBudgets*/ 1 && td0_class_value !== (td0_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td0, "class", td0_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && input_max_value !== (input_max_value = /*plannedBudget*/ ctx[8].plannedBalance.amount)) {
    				attr_dev(input, "max", input_max_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && input_value_value !== (input_value_value = /*plannedBudget*/ ctx[8].realizeBalance.amount)) {
    				prop_dev(input, "value", input_value_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && td1_class_value !== (td1_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td1, "class", td1_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && t3_value !== (t3_value = /*plannedBudget*/ ctx[8].plannedBalance.amount + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*plannedBudgets*/ 1 && td2_class_value !== (td2_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td2, "class", td2_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && t5_value !== (t5_value = /*plannedBudget*/ ctx[8].transactionDescriptionCategory.name + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*plannedBudgets*/ 1 && td3_class_value !== (td3_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td3, "class", td3_class_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1) {
    				set_style(td3, "color", /*plannedBudget*/ ctx[8].transactionDescriptionCategory.color);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && label_for_value !== (label_for_value = "modal_remove_PB_" + /*plannedBudget*/ ctx[8].id)) {
    				attr_dev(label, "for", label_for_value);
    			}

    			if (dirty & /*plannedBudgets*/ 1 && td4_class_value !== (td4_class_value = /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td4, "class", td4_class_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(td1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(td2);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(td3);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(td4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(95:16) {#if plannedBudget.transactionDescriptionCategory}",
    		ctx
    	});

    	return block;
    }

    // (74:8) {#each plannedBudgets as plannedBudget}
    function create_each_block$1(ctx) {
    	let dialog;
    	let t0;
    	let tr;
    	let td0;
    	let label;
    	let b;
    	let t1_value = /*plannedBudget*/ ctx[8].title + "";
    	let t1;
    	let td0_class_value;
    	let t2;
    	let td1;
    	let t3_value = /*plannedBudget*/ ctx[8].desctiption + "";
    	let t3;
    	let td1_class_value;
    	let t4;
    	let td2;
    	let t5_value = /*plannedBudget*/ ctx[8].dateStart.split("T")[0] + "";
    	let t5;
    	let td2_class_value;
    	let t6;
    	let td3;
    	let t7_value = /*plannedBudget*/ ctx[8].dateEnd.split("T")[0] + "";
    	let t7;
    	let td3_class_value;
    	let t8;
    	let td4;
    	let t9_value = /*plannedBudget*/ ctx[8].plannedBalance.currency + "";
    	let t9;
    	let td4_class_value;
    	let t10;
    	let t11;
    	let current;

    	dialog = new Dialog({
    			props: {
    				ModalID: "modal_remove_PB_" + /*plannedBudget*/ ctx[8].id,
    				ConfirmFunction: /*ActionToRemove*/ ctx[3],
    				ConfirmFunctionParams: { id: /*plannedBudget*/ ctx[8].id },
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	function select_block_type(ctx, dirty) {
    		if (/*plannedBudget*/ ctx[8].transactionDescriptionCategory) return create_if_block$2;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			create_component(dialog.$$.fragment);
    			t0 = space();
    			tr = element("tr");
    			td0 = element("td");
    			label = element("label");
    			b = element("b");
    			t1 = text(t1_value);
    			t2 = space();
    			td1 = element("td");
    			t3 = text(t3_value);
    			t4 = space();
    			td2 = element("td");
    			t5 = text(t5_value);
    			t6 = space();
    			td3 = element("td");
    			t7 = text(t7_value);
    			t8 = space();
    			td4 = element("td");
    			t9 = text(t9_value);
    			t10 = space();
    			if_block.c();
    			t11 = space();
    			add_location(b, file$5, 80, 27, 3212);
    			add_location(label, file$5, 80, 20, 3205);
    			attr_dev(td0, "class", td0_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td0, file$5, 79, 16, 3128);
    			attr_dev(td1, "class", td1_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td1, file$5, 82, 16, 3289);
    			attr_dev(td2, "class", td2_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td2, file$5, 85, 16, 3434);
    			attr_dev(td3, "class", td3_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td3, file$5, 88, 16, 3591);
    			attr_dev(td4, "class", td4_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]));
    			add_location(td4, file$5, 91, 16, 3746);
    			add_location(tr, file$5, 78, 12, 3106);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dialog, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, label);
    			append_dev(label, b);
    			append_dev(b, t1);
    			append_dev(tr, t2);
    			append_dev(tr, td1);
    			append_dev(td1, t3);
    			append_dev(tr, t4);
    			append_dev(tr, td2);
    			append_dev(td2, t5);
    			append_dev(tr, t6);
    			append_dev(tr, td3);
    			append_dev(td3, t7);
    			append_dev(tr, t8);
    			append_dev(tr, td4);
    			append_dev(td4, t9);
    			append_dev(tr, t10);
    			if_block.m(tr, null);
    			append_dev(tr, t11);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const dialog_changes = {};
    			if (dirty & /*plannedBudgets*/ 1) dialog_changes.ModalID = "modal_remove_PB_" + /*plannedBudget*/ ctx[8].id;
    			if (dirty & /*plannedBudgets*/ 1) dialog_changes.ConfirmFunctionParams = { id: /*plannedBudget*/ ctx[8].id };

    			if (dirty & /*$$scope, plannedBudgets*/ 2049) {
    				dialog_changes.$$scope = { dirty, ctx };
    			}

    			dialog.$set(dialog_changes);
    			if ((!current || dirty & /*plannedBudgets*/ 1) && t1_value !== (t1_value = /*plannedBudget*/ ctx[8].title + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty & /*plannedBudgets*/ 1 && td0_class_value !== (td0_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td0, "class", td0_class_value);
    			}

    			if ((!current || dirty & /*plannedBudgets*/ 1) && t3_value !== (t3_value = /*plannedBudget*/ ctx[8].desctiption + "")) set_data_dev(t3, t3_value);

    			if (!current || dirty & /*plannedBudgets*/ 1 && td1_class_value !== (td1_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td1, "class", td1_class_value);
    			}

    			if ((!current || dirty & /*plannedBudgets*/ 1) && t5_value !== (t5_value = /*plannedBudget*/ ctx[8].dateStart.split("T")[0] + "")) set_data_dev(t5, t5_value);

    			if (!current || dirty & /*plannedBudgets*/ 1 && td2_class_value !== (td2_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td2, "class", td2_class_value);
    			}

    			if ((!current || dirty & /*plannedBudgets*/ 1) && t7_value !== (t7_value = /*plannedBudget*/ ctx[8].dateEnd.split("T")[0] + "")) set_data_dev(t7, t7_value);

    			if (!current || dirty & /*plannedBudgets*/ 1 && td3_class_value !== (td3_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td3, "class", td3_class_value);
    			}

    			if ((!current || dirty & /*plannedBudgets*/ 1) && t9_value !== (t9_value = /*plannedBudget*/ ctx[8].plannedBalance.currency + "")) set_data_dev(t9, t9_value);

    			if (!current || dirty & /*plannedBudgets*/ 1 && td4_class_value !== (td4_class_value = "text-center " + /*style*/ ctx[5].bgColor(/*plannedBudget*/ ctx[8]))) {
    				attr_dev(td4, "class", td4_class_value);
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(tr, t11);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dialog.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dialog.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dialog, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(tr);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(74:8) {#each plannedBudgets as plannedBudget}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let modalcreateplannedbudget;
    	let t0;
    	let div;
    	let table;
    	let thead;
    	let tr;
    	let th0;
    	let t2;
    	let th1;
    	let t4;
    	let th2;
    	let t6;
    	let th3;
    	let t8;
    	let th4;
    	let t10;
    	let th5;
    	let t12;
    	let th6;
    	let t14;
    	let th7;
    	let t16;
    	let th8;
    	let t18;
    	let th9;
    	let label;
    	let t19;
    	let t20;
    	let tbody;
    	let current;

    	modalcreateplannedbudget = new ModalCreatePlannedBudget({
    			props: {
    				ID: CreatePlannedBudgetModalID,
    				budgetID: /*budgetID*/ ctx[2],
    				SuccessAction: /*UpdatePlannedBudgets*/ ctx[1]
    			},
    			$$inline: true
    		});

    	let each_value = /*plannedBudgets*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			create_component(modalcreateplannedbudget.$$.fragment);
    			t0 = space();
    			div = element("div");
    			table = element("table");
    			thead = element("thead");
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "Title";
    			t2 = space();
    			th1 = element("th");
    			th1.textContent = "Description";
    			t4 = space();
    			th2 = element("th");
    			th2.textContent = "Start";
    			t6 = space();
    			th3 = element("th");
    			th3.textContent = "Close";
    			t8 = space();
    			th4 = element("th");
    			th4.textContent = "Currency";
    			t10 = space();
    			th5 = element("th");
    			th5.textContent = "Completed";
    			t12 = space();
    			th6 = element("th");
    			th6.textContent = "Progress";
    			t14 = space();
    			th7 = element("th");
    			th7.textContent = "Planned";
    			t16 = space();
    			th8 = element("th");
    			th8.textContent = "Category";
    			t18 = space();
    			th9 = element("th");
    			label = element("label");
    			t19 = text("Add");
    			t20 = space();
    			tbody = element("tbody");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(th0, "class", "text-center");
    			add_location(th0, file$5, 57, 12, 2028);
    			attr_dev(th1, "class", "text-center");
    			add_location(th1, file$5, 58, 12, 2076);
    			attr_dev(th2, "class", "text-center");
    			add_location(th2, file$5, 59, 12, 2130);
    			attr_dev(th3, "class", "text-center");
    			add_location(th3, file$5, 60, 12, 2178);
    			attr_dev(th4, "class", "text-center");
    			add_location(th4, file$5, 61, 12, 2226);
    			attr_dev(th5, "class", "text-center");
    			add_location(th5, file$5, 62, 12, 2277);
    			attr_dev(th6, "class", "text-center");
    			add_location(th6, file$5, 63, 12, 2329);
    			attr_dev(th7, "class", "text-center");
    			add_location(th7, file$5, 64, 12, 2380);
    			attr_dev(th8, "class", "text-center");
    			add_location(th8, file$5, 65, 12, 2430);
    			attr_dev(label, "for", CreatePlannedBudgetModalID);
    			attr_dev(label, "class", "btn btn-sm btn-outline");
    			add_location(label, file$5, 67, 16, 2523);
    			attr_dev(th9, "class", "text-center");
    			add_location(th9, file$5, 66, 12, 2481);
    			add_location(tr, file$5, 56, 8, 2010);
    			add_location(thead, file$5, 55, 8, 1993);
    			add_location(tbody, file$5, 71, 8, 2667);
    			attr_dev(table, "class", "table w-full");
    			add_location(table, file$5, 54, 4, 1955);
    			attr_dev(div, "class", "overflow-x-auto");
    			add_location(div, file$5, 53, 0, 1920);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(modalcreateplannedbudget, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, table);
    			append_dev(table, thead);
    			append_dev(thead, tr);
    			append_dev(tr, th0);
    			append_dev(tr, t2);
    			append_dev(tr, th1);
    			append_dev(tr, t4);
    			append_dev(tr, th2);
    			append_dev(tr, t6);
    			append_dev(tr, th3);
    			append_dev(tr, t8);
    			append_dev(tr, th4);
    			append_dev(tr, t10);
    			append_dev(tr, th5);
    			append_dev(tr, t12);
    			append_dev(tr, th6);
    			append_dev(tr, t14);
    			append_dev(tr, th7);
    			append_dev(tr, t16);
    			append_dev(tr, th8);
    			append_dev(tr, t18);
    			append_dev(tr, th9);
    			append_dev(th9, label);
    			append_dev(label, t19);
    			append_dev(table, t20);
    			append_dev(table, tbody);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(tbody, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const modalcreateplannedbudget_changes = {};
    			if (dirty & /*budgetID*/ 4) modalcreateplannedbudget_changes.budgetID = /*budgetID*/ ctx[2];
    			if (dirty & /*UpdatePlannedBudgets*/ 2) modalcreateplannedbudget_changes.SuccessAction = /*UpdatePlannedBudgets*/ ctx[1];
    			modalcreateplannedbudget.$set(modalcreateplannedbudget_changes);

    			if (dirty & /*style, plannedBudgets, SaveAction, ActionToRemove*/ 57) {
    				each_value = /*plannedBudgets*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(tbody, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(modalcreateplannedbudget.$$.fragment, local);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(modalcreateplannedbudget.$$.fragment, local);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(modalcreateplannedbudget, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const CreatePlannedBudgetModalID = "planned-budget-create-modal";

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PlannedBudgetList', slots, []);

    	const ActionToRemove = async ({ id }) => {
    		try {
    			await Request$1.plannedBudget.delete({ BudgetID: budgetID, PlannedBudgetID: id });
    			await UpdatePlannedBudgets();
    			ShowInfo("Planned budget deleted.");
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	let { UpdatePlannedBudgets = async () => {
    		try {
    			$$invalidate(0, plannedBudgets = (await Request$1.plannedBudget.getList({ BudgetID: params.budgetID })).data);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	} } = $$props;

    	const SaveAction = async (PlannedBudgetID, PlannedAmount) => {
    		try {
    			await Request$1.plannedBudget.setAmount({
    				BudgetID: budgetID,
    				PlannedBudgetID,
    				PlannedAmount
    			});

    			ShowInfo("Planned budget saved.");
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	const style = {
    		bgColor: plannedBudget => {
    			if (Date.now() > Date.parse(plannedBudget.dateEnd) && plannedBudget.realizeBalance.amount < plannedBudget.plannedBalance.amount) return 'bg-red-100'; else if (plannedBudget.realizeBalance.amount >= plannedBudget.plannedBalance.amount) {
    				return 'bg-green-100';
    			}

    			return '';
    		}
    	};

    	let { plannedBudgets = [] } = $$props;
    	let { budgetID } = $$props;
    	const writable_props = ['UpdatePlannedBudgets', 'plannedBudgets', 'budgetID'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PlannedBudgetList> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler(each_value, plannedBudget_index) {
    		each_value[plannedBudget_index].realizeBalance.amount = this.value;
    		$$invalidate(0, plannedBudgets);
    	}

    	function input1_change_input_handler(each_value, plannedBudget_index) {
    		each_value[plannedBudget_index].realizeBalance.amount = to_number(this.value);
    		$$invalidate(0, plannedBudgets);
    	}

    	$$self.$$set = $$props => {
    		if ('UpdatePlannedBudgets' in $$props) $$invalidate(1, UpdatePlannedBudgets = $$props.UpdatePlannedBudgets);
    		if ('plannedBudgets' in $$props) $$invalidate(0, plannedBudgets = $$props.plannedBudgets);
    		if ('budgetID' in $$props) $$invalidate(2, budgetID = $$props.budgetID);
    	};

    	$$self.$capture_state = () => ({
    		Request: Request$1,
    		ErrorWrapper,
    		ShowInfo,
    		Dialog,
    		ModalCreatePlannedBudget,
    		ActionToRemove,
    		UpdatePlannedBudgets,
    		SaveAction,
    		style,
    		plannedBudgets,
    		budgetID,
    		CreatePlannedBudgetModalID
    	});

    	$$self.$inject_state = $$props => {
    		if ('UpdatePlannedBudgets' in $$props) $$invalidate(1, UpdatePlannedBudgets = $$props.UpdatePlannedBudgets);
    		if ('plannedBudgets' in $$props) $$invalidate(0, plannedBudgets = $$props.plannedBudgets);
    		if ('budgetID' in $$props) $$invalidate(2, budgetID = $$props.budgetID);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		plannedBudgets,
    		UpdatePlannedBudgets,
    		budgetID,
    		ActionToRemove,
    		SaveAction,
    		style,
    		input0_input_handler,
    		input1_change_input_handler
    	];
    }

    class PlannedBudgetList extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			UpdatePlannedBudgets: 1,
    			plannedBudgets: 0,
    			budgetID: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PlannedBudgetList",
    			options,
    			id: create_fragment$5.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*budgetID*/ ctx[2] === undefined && !('budgetID' in props)) {
    			console.warn("<PlannedBudgetList> was created without expected prop 'budgetID'");
    		}
    	}

    	get UpdatePlannedBudgets() {
    		throw new Error("<PlannedBudgetList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set UpdatePlannedBudgets(value) {
    		throw new Error("<PlannedBudgetList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get plannedBudgets() {
    		throw new Error("<PlannedBudgetList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set plannedBudgets(value) {
    		throw new Error("<PlannedBudgetList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get budgetID() {
    		throw new Error("<PlannedBudgetList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set budgetID(value) {
    		throw new Error("<PlannedBudgetList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\views\PlannedBudget.svelte generated by Svelte v3.48.0 */
    const file$4 = "src\\views\\PlannedBudget.svelte";

    function create_fragment$4(ctx) {
    	let div;
    	let plannedbudgetlist;
    	let current;

    	plannedbudgetlist = new PlannedBudgetList({
    			props: {
    				plannedBudgets: /*plannedBudgets*/ ctx[1],
    				budgetID: /*params*/ ctx[0].budgetID,
    				UpdatePlannedBudgets: /*UpdatePlannedBudgets*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(plannedbudgetlist.$$.fragment);
    			attr_dev(div, "class", "center_content");
    			add_location(div, file$4, 30, 0, 974);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(plannedbudgetlist, div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const plannedbudgetlist_changes = {};
    			if (dirty & /*plannedBudgets*/ 2) plannedbudgetlist_changes.plannedBudgets = /*plannedBudgets*/ ctx[1];
    			if (dirty & /*params*/ 1) plannedbudgetlist_changes.budgetID = /*params*/ ctx[0].budgetID;
    			plannedbudgetlist.$set(plannedbudgetlist_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(plannedbudgetlist.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(plannedbudgetlist.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(plannedbudgetlist);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const CreatePlannedBudgetsModalID = "category-planned-budget-modal";

    function instance$4($$self, $$props, $$invalidate) {
    	let $avaliableCategories;
    	validate_store(avaliableCategories, 'avaliableCategories');
    	component_subscribe($$self, avaliableCategories, $$value => $$invalidate(3, $avaliableCategories = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PlannedBudget', slots, []);

    	const UpdatePlannedBudgets = async () => {
    		try {
    			$$invalidate(1, plannedBudgets = (await Request$1.plannedBudget.getList({ BudgetID: params.budgetID })).data);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	};

    	onMount(async () => {
    		await UpdatePlannedBudgets();

    		try {
    			set_store_value(avaliableCategories, $avaliableCategories = (await Request$1.category.getList({ BudgetID: params.budgetID })).data, $avaliableCategories);
    		} catch(err) {
    			ErrorWrapper(err);
    		}
    	});

    	let { params = {} } = $$props;
    	let plannedBudgets = [];
    	const writable_props = ['params'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PlannedBudget> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(0, params = $$props.params);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		PlannedBudgetList,
    		Request: Request$1,
    		ErrorWrapper,
    		avaliableCategories,
    		UpdatePlannedBudgets,
    		params,
    		plannedBudgets,
    		CreatePlannedBudgetsModalID,
    		$avaliableCategories
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(0, params = $$props.params);
    		if ('plannedBudgets' in $$props) $$invalidate(1, plannedBudgets = $$props.plannedBudgets);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [params, plannedBudgets, UpdatePlannedBudgets];
    }

    class PlannedBudget extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { params: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PlannedBudget",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get params() {
    		throw new Error("<PlannedBudget>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<PlannedBudget>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var moment = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
        module.exports = factory() ;
    }(commonjsGlobal, (function () {
        var hookCallback;

        function hooks() {
            return hookCallback.apply(null, arguments);
        }

        // This is done to register the method called with moment()
        // without creating circular dependencies.
        function setHookCallback(callback) {
            hookCallback = callback;
        }

        function isArray(input) {
            return (
                input instanceof Array ||
                Object.prototype.toString.call(input) === '[object Array]'
            );
        }

        function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return (
                input != null &&
                Object.prototype.toString.call(input) === '[object Object]'
            );
        }

        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }

        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
            } else {
                var k;
                for (k in obj) {
                    if (hasOwnProp(obj, k)) {
                        return false;
                    }
                }
                return true;
            }
        }

        function isUndefined(input) {
            return input === void 0;
        }

        function isNumber(input) {
            return (
                typeof input === 'number' ||
                Object.prototype.toString.call(input) === '[object Number]'
            );
        }

        function isDate(input) {
            return (
                input instanceof Date ||
                Object.prototype.toString.call(input) === '[object Date]'
            );
        }

        function map(arr, fn) {
            var res = [],
                i,
                arrLen = arr.length;
            for (i = 0; i < arrLen; ++i) {
                res.push(fn(arr[i], i));
            }
            return res;
        }

        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }

            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }

            return a;
        }

        function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }

        function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidEra: null,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                era: null,
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false,
            };
        }

        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }
            return m._pf;
        }

        var some;
        if (Array.prototype.some) {
            some = Array.prototype.some;
        } else {
            some = function (fun) {
                var t = Object(this),
                    len = t.length >>> 0,
                    i;

                for (i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }

                return false;
            };
        }

        function isValid(m) {
            if (m._isValid == null) {
                var flags = getParsingFlags(m),
                    parsedParts = some.call(flags.parsedDateParts, function (i) {
                        return i != null;
                    }),
                    isNowValid =
                        !isNaN(m._d.getTime()) &&
                        flags.overflow < 0 &&
                        !flags.empty &&
                        !flags.invalidEra &&
                        !flags.invalidMonth &&
                        !flags.invalidWeekday &&
                        !flags.weekdayMismatch &&
                        !flags.nullInput &&
                        !flags.invalidFormat &&
                        !flags.userInvalidated &&
                        (!flags.meridiem || (flags.meridiem && parsedParts));

                if (m._strict) {
                    isNowValid =
                        isNowValid &&
                        flags.charsLeftOver === 0 &&
                        flags.unusedTokens.length === 0 &&
                        flags.bigHour === undefined;
                }

                if (Object.isFrozen == null || !Object.isFrozen(m)) {
                    m._isValid = isNowValid;
                } else {
                    return isNowValid;
                }
            }
            return m._isValid;
        }

        function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
                extend(getParsingFlags(m), flags);
            } else {
                getParsingFlags(m).userInvalidated = true;
            }

            return m;
        }

        // Plugins that add properties should also add the key here (null value),
        // so we can properly clone ourselves.
        var momentProperties = (hooks.momentProperties = []),
            updateInProgress = false;

        function copyConfig(to, from) {
            var i,
                prop,
                val,
                momentPropertiesLen = momentProperties.length;

            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
                to._i = from._i;
            }
            if (!isUndefined(from._f)) {
                to._f = from._f;
            }
            if (!isUndefined(from._l)) {
                to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }

            if (momentPropertiesLen > 0) {
                for (i = 0; i < momentPropertiesLen; i++) {
                    prop = momentProperties[i];
                    val = from[prop];
                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }

            return to;
        }

        // Moment prototype object
        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
                this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }

        function isMoment(obj) {
            return (
                obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
            );
        }

        function warn(msg) {
            if (
                hooks.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' &&
                console.warn
            ) {
                console.warn('Deprecation warning: ' + msg);
            }
        }

        function deprecate(msg, fn) {
            var firstTime = true;

            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                    var args = [],
                        arg,
                        i,
                        key,
                        argLen = arguments.length;
                    for (i = 0; i < argLen; i++) {
                        arg = '';
                        if (typeof arguments[i] === 'object') {
                            arg += '\n[' + i + '] ';
                            for (key in arguments[0]) {
                                if (hasOwnProp(arguments[0], key)) {
                                    arg += key + ': ' + arguments[0][key] + ', ';
                                }
                            }
                            arg = arg.slice(0, -2); // Remove trailing comma and space
                        } else {
                            arg = arguments[i];
                        }
                        args.push(arg);
                    }
                    warn(
                        msg +
                            '\nArguments: ' +
                            Array.prototype.slice.call(args).join('') +
                            '\n' +
                            new Error().stack
                    );
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }

        var deprecations = {};

        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }

        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;

        function isFunction(input) {
            return (
                (typeof Function !== 'undefined' && input instanceof Function) ||
                Object.prototype.toString.call(input) === '[object Function]'
            );
        }

        function set(config) {
            var prop, i;
            for (i in config) {
                if (hasOwnProp(config, i)) {
                    prop = config[i];
                    if (isFunction(prop)) {
                        this[i] = prop;
                    } else {
                        this['_' + i] = prop;
                    }
                }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp(
                (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                    '|' +
                    /\d{1,2}/.source
            );
        }

        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;
            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    } else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    } else {
                        delete res[prop];
                    }
                }
            }
            for (prop in parentConfig) {
                if (
                    hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])
                ) {
                    // make sure changes to properties don't modify parent config
                    res[prop] = extend({}, res[prop]);
                }
            }
            return res;
        }

        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }

        var keys;

        if (Object.keys) {
            keys = Object.keys;
        } else {
            keys = function (obj) {
                var i,
                    res = [];
                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }
                return res;
            };
        }

        var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        };

        function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }

        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (
                (sign ? (forceSign ? '+' : '') : '-') +
                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
                absNumber
            );
        }

        var formattingTokens =
                /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            formatFunctions = {},
            formatTokenFunctions = {};

        // token:    'M'
        // padded:   ['MM', 2]
        // ordinal:  'Mo'
        // callback: function () { this.month() + 1 }
        function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
                func = function () {
                    return this[callback]();
                };
            }
            if (token) {
                formatTokenFunctions[token] = func;
            }
            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }
            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(
                        func.apply(this, arguments),
                        token
                    );
                };
            }
        }

        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }

        function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;

            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }

            return function (mom) {
                var output = '',
                    i;
                for (i = 0; i < length; i++) {
                    output += isFunction(array[i])
                        ? array[i].call(mom, format)
                        : array[i];
                }
                return output;
            };
        }

        // format date using native date object
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] =
                formatFunctions[format] || makeFormatFunction(format);

            return formatFunctions[format](m);
        }

        function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(
                    localFormattingTokens,
                    replaceLongDateFormatTokens
                );
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }

            return format;
        }

        var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        };

        function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
                return format;
            }

            this._longDateFormat[key] = formatUpper
                .match(formattingTokens)
                .map(function (tok) {
                    if (
                        tok === 'MMMM' ||
                        tok === 'MM' ||
                        tok === 'DD' ||
                        tok === 'dddd'
                    ) {
                        return tok.slice(1);
                    }
                    return tok;
                })
                .join('');

            return this._longDateFormat[key];
        }

        var defaultInvalidDate = 'Invalid date';

        function invalidDate() {
            return this._invalidDate;
        }

        var defaultOrdinal = '%d',
            defaultDayOfMonthOrdinalParse = /\d{1,2}/;

        function ordinal(number) {
            return this._ordinal.replace('%d', number);
        }

        var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            w: 'a week',
            ww: '%d weeks',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        };

        function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output)
                ? output(number, withoutSuffix, string, isFuture)
                : output.replace(/%d/i, number);
        }

        function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }

        var aliases = {};

        function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
        }

        function normalizeUnits(units) {
            return typeof units === 'string'
                ? aliases[units] || aliases[units.toLowerCase()]
                : undefined;
        }

        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }

            return normalizedInput;
        }

        var priorities = {};

        function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
        }

        function getPrioritizedUnits(unitsObj) {
            var units = [],
                u;
            for (u in unitsObj) {
                if (hasOwnProp(unitsObj, u)) {
                    units.push({ unit: u, priority: priorities[u] });
                }
            }
            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }

        function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        }

        function absFloor(number) {
            if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
            } else {
                return Math.floor(number);
            }
        }

        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }

            return value;
        }

        function makeGetSet(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                } else {
                    return get(this, unit);
                }
            };
        }

        function get(mom, unit) {
            return mom.isValid()
                ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
                : NaN;
        }

        function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
                if (
                    unit === 'FullYear' &&
                    isLeapYear(mom.year()) &&
                    mom.month() === 1 &&
                    mom.date() === 29
                ) {
                    value = toInt(value);
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                        value,
                        mom.month(),
                        daysInMonth(value, mom.month())
                    );
                } else {
                    mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
                }
            }
        }

        // MOMENTS

        function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units]();
            }
            return this;
        }

        function stringSet(units, value) {
            if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units),
                    i,
                    prioritizedLen = prioritized.length;
                for (i = 0; i < prioritizedLen; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            } else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }
            return this;
        }

        var match1 = /\d/, //       0 - 9
            match2 = /\d\d/, //      00 - 99
            match3 = /\d{3}/, //     000 - 999
            match4 = /\d{4}/, //    0000 - 9999
            match6 = /[+-]?\d{6}/, // -999999 - 999999
            match1to2 = /\d\d?/, //       0 - 99
            match3to4 = /\d\d\d\d?/, //     999 - 9999
            match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
            match1to3 = /\d{1,3}/, //       0 - 999
            match1to4 = /\d{1,4}/, //       0 - 9999
            match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
            matchUnsigned = /\d+/, //       0 - inf
            matchSigned = /[+-]?\d+/, //    -inf - inf
            matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
            matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
            matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
            // any word (or two) characters or numbers including two/three word month in arabic.
            // includes scottish gaelic two word and hyphenated months
            matchWord =
                /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            regexes;

        regexes = {};

        function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex)
                ? regex
                : function (isStrict, localeData) {
                      return isStrict && strictRegex ? strictRegex : regex;
                  };
        }

        function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
        }

        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
        function unescapeFormat(s) {
            return regexEscape(
                s
                    .replace('\\', '')
                    .replace(
                        /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                        function (matched, p1, p2, p3, p4) {
                            return p1 || p2 || p3 || p4;
                        }
                    )
            );
        }

        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        var tokens = {};

        function addParseToken(token, callback) {
            var i,
                func = callback,
                tokenLen;
            if (typeof token === 'string') {
                token = [token];
            }
            if (isNumber(callback)) {
                func = function (input, array) {
                    array[callback] = toInt(input);
                };
            }
            tokenLen = token.length;
            for (i = 0; i < tokenLen; i++) {
                tokens[token[i]] = func;
            }
        }

        function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }

        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }

        var YEAR = 0,
            MONTH = 1,
            DATE = 2,
            HOUR = 3,
            MINUTE = 4,
            SECOND = 5,
            MILLISECOND = 6,
            WEEK = 7,
            WEEKDAY = 8;

        function mod(n, x) {
            return ((n % x) + x) % x;
        }

        var indexOf;

        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function (o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }
                return -1;
            };
        }

        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1
                ? isLeapYear(year)
                    ? 29
                    : 28
                : 31 - ((modMonth % 7) % 2);
        }

        // FORMATTING

        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });

        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });

        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });

        // ALIASES

        addUnitAlias('month', 'M');

        // PRIORITY

        addUnitPriority('month', 8);

        // PARSING

        addRegexToken('M', match1to2);
        addRegexToken('MM', match1to2, match2);
        addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });

        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });

        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
                array[MONTH] = month;
            } else {
                getParsingFlags(config).invalidMonth = input;
            }
        });

        // LOCALES

        var defaultLocaleMonths =
                'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                    '_'
                ),
            defaultLocaleMonthsShort =
                'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            defaultMonthsShortRegex = matchWord,
            defaultMonthsRegex = matchWord;

        function localeMonths(m, format) {
            if (!m) {
                return isArray(this._months)
                    ? this._months
                    : this._months['standalone'];
            }
            return isArray(this._months)
                ? this._months[m.month()]
                : this._months[
                      (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                          ? 'format'
                          : 'standalone'
                  ][m.month()];
        }

        function localeMonthsShort(m, format) {
            if (!m) {
                return isArray(this._monthsShort)
                    ? this._monthsShort
                    : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort)
                ? this._monthsShort[m.month()]
                : this._monthsShort[
                      MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
                  ][m.month()];
        }

        function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp(
                        '^' + this.months(mom, '').replace('.', '') + '$',
                        'i'
                    );
                    this._shortMonthsParse[i] = new RegExp(
                        '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                        'i'
                    );
                }
                if (!strict && !this._monthsParse[i]) {
                    regex =
                        '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'MMMM' &&
                    this._longMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'MMM' &&
                    this._shortMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function setMonth(mom, value) {
            var dayOfMonth;

            if (!mom.isValid()) {
                // No op
                return mom;
            }

            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                } else {
                    value = mom.localeData().monthsParse(value);
                    // TODO: Another silent failure?
                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }

            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
            return mom;
        }

        function getSetMonth(value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            } else {
                return get(this, 'Month');
            }
        }

        function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
        }

        function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsShortStrictRegex;
                } else {
                    return this._monthsShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict
                    ? this._monthsShortStrictRegex
                    : this._monthsShortRegex;
            }
        }

        function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsStrictRegex;
                } else {
                    return this._monthsRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict
                    ? this._monthsStrictRegex
                    : this._monthsRegex;
            }
        }

        function computeMonthsParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom;
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortPieces.push(this.monthsShort(mom, ''));
                longPieces.push(this.months(mom, ''));
                mixedPieces.push(this.months(mom, ''));
                mixedPieces.push(this.monthsShort(mom, ''));
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i = 0; i < 12; i++) {
                shortPieces[i] = regexEscape(shortPieces[i]);
                longPieces[i] = regexEscape(longPieces[i]);
            }
            for (i = 0; i < 24; i++) {
                mixedPieces[i] = regexEscape(mixedPieces[i]);
            }

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._monthsShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : '+' + y;
        });

        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });

        addFormatToken(0, ['YYYY', 4], 0, 'year');
        addFormatToken(0, ['YYYYY', 5], 0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

        // ALIASES

        addUnitAlias('year', 'y');

        // PRIORITIES

        addUnitPriority('year', 1);

        // PARSING

        addRegexToken('Y', matchSigned);
        addRegexToken('YY', match1to2, match2);
        addRegexToken('YYYY', match1to4, match4);
        addRegexToken('YYYYY', match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);

        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] =
                input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });

        // HELPERS

        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }

        // HOOKS

        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };

        // MOMENTS

        var getSetYear = makeGetSet('FullYear', true);

        function getIsLeapYear() {
            return isLeapYear(this.year());
        }

        function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                date = new Date(y + 400, m, d, h, M, s, ms);
                if (isFinite(date.getFullYear())) {
                    date.setFullYear(y);
                }
            } else {
                date = new Date(y, m, d, h, M, s, ms);
            }

            return date;
        }

        function createUTCDate(y) {
            var date, args;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                args = Array.prototype.slice.call(arguments);
                // preserve leap years using a full 400 year cycle, then reset
                args[0] = y + 400;
                date = new Date(Date.UTC.apply(null, args));
                if (isFinite(date.getUTCFullYear())) {
                    date.setUTCFullYear(y);
                }
            } else {
                date = new Date(Date.UTC.apply(null, arguments));
            }

            return date;
        }

        // start-of-first-week - start-of-year
        function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

            return -fwdlw + fwd - 1;
        }

        // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            } else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }

            return {
                year: resYear,
                dayOfYear: resDayOfYear,
            };
        }

        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            } else {
                resYear = mom.year();
                resWeek = week;
            }

            return {
                week: resWeek,
                year: resYear,
            };
        }

        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }

        // FORMATTING

        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

        // ALIASES

        addUnitAlias('week', 'w');
        addUnitAlias('isoWeek', 'W');

        // PRIORITIES

        addUnitPriority('week', 5);
        addUnitPriority('isoWeek', 5);

        // PARSING

        addRegexToken('w', match1to2);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W', match1to2);
        addRegexToken('WW', match1to2, match2);

        addWeekParseToken(
            ['w', 'ww', 'W', 'WW'],
            function (input, week, config, token) {
                week[token.substr(0, 1)] = toInt(input);
            }
        );

        // HELPERS

        // LOCALES

        function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }

        var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        };

        function localeFirstDayOfWeek() {
            return this._week.dow;
        }

        function localeFirstDayOfYear() {
            return this._week.doy;
        }

        // MOMENTS

        function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        // FORMATTING

        addFormatToken('d', 0, 'do', 'day');

        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });

        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });

        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });

        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');

        // ALIASES

        addUnitAlias('day', 'd');
        addUnitAlias('weekday', 'e');
        addUnitAlias('isoWeekday', 'E');

        // PRIORITY
        addUnitPriority('day', 11);
        addUnitPriority('weekday', 11);
        addUnitPriority('isoWeekday', 11);

        // PARSING

        addRegexToken('d', match1to2);
        addRegexToken('e', match1to2);
        addRegexToken('E', match1to2);
        addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });

        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
                week.d = weekday;
            } else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });

        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });

        // HELPERS

        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }

            if (!isNaN(input)) {
                return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
                return input;
            }

            return null;
        }

        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
        }

        // LOCALES
        function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
        }

        var defaultLocaleWeekdays =
                'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            defaultWeekdaysRegex = matchWord,
            defaultWeekdaysShortRegex = matchWord,
            defaultWeekdaysMinRegex = matchWord;

        function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays)
                ? this._weekdays
                : this._weekdays[
                      m && m !== true && this._weekdays.isFormat.test(format)
                          ? 'format'
                          : 'standalone'
                  ];
            return m === true
                ? shiftWeekdays(weekdays, this._week.dow)
                : m
                ? weekdays[m.day()]
                : weekdays;
        }

        function localeWeekdaysShort(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                : m
                ? this._weekdaysShort[m.day()]
                : this._weekdaysShort;
        }

        function localeWeekdaysMin(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                : m
                ? this._weekdaysMin[m.day()]
                : this._weekdaysMin;
        }

        function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already

                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._shortWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._minWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                }
                if (!this._weekdaysParse[i]) {
                    regex =
                        '^' +
                        this.weekdays(mom, '') +
                        '|^' +
                        this.weekdaysShort(mom, '') +
                        '|^' +
                        this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'dddd' &&
                    this._fullWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'ddd' &&
                    this._shortWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'dd' &&
                    this._minWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function getSetDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        }

        function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }

        function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
                return this.day() || 7;
            }
        }

        function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysStrictRegex;
                } else {
                    return this._weekdaysRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict
                    ? this._weekdaysStrictRegex
                    : this._weekdaysRegex;
            }
        }

        function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                } else {
                    return this._weekdaysShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict
                    ? this._weekdaysShortStrictRegex
                    : this._weekdaysShortRegex;
            }
        }

        function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                } else {
                    return this._weekdaysMinRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict
                    ? this._weekdaysMinStrictRegex
                    : this._weekdaysMinRegex;
            }
        }

        function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = regexEscape(this.weekdaysMin(mom, ''));
                shortp = regexEscape(this.weekdaysShort(mom, ''));
                longp = regexEscape(this.weekdays(mom, ''));
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;

            this._weekdaysStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._weekdaysShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
            this._weekdaysMinStrictRegex = new RegExp(
                '^(' + minPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        function hFormat() {
            return this.hours() % 12 || 12;
        }

        function kFormat() {
            return this.hours() || 24;
        }

        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);

        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });

        addFormatToken('hmmss', 0, 0, function () {
            return (
                '' +
                hFormat.apply(this) +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });

        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });

        addFormatToken('Hmmss', 0, 0, function () {
            return (
                '' +
                this.hours() +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });

        function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(
                    this.hours(),
                    this.minutes(),
                    lowercase
                );
            });
        }

        meridiem('a', true);
        meridiem('A', false);

        // ALIASES

        addUnitAlias('hour', 'h');

        // PRIORITY
        addUnitPriority('hour', 13);

        // PARSING

        function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
        }

        addRegexToken('a', matchMeridiem);
        addRegexToken('A', matchMeridiem);
        addRegexToken('H', match1to2);
        addRegexToken('h', match1to2);
        addRegexToken('k', match1to2);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);

        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);

        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });

        // LOCALES

        function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
        }

        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
            // Setting the hour should keep the time, because the user explicitly
            // specified which hour they want. So trying to maintain the same hour (in
            // a new timezone) makes sense. Adding/subtracting hours does not follow
            // this rule.
            getSetHour = makeGetSet('Hours', true);

        function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        }

        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,

            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,

            week: defaultLocaleWeek,

            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,

            meridiemParse: defaultLocaleMeridiemParse,
        };

        // internal storage for locale config files
        var locales = {},
            localeFamilies = {},
            globalLocale;

        function commonPrefix(arr1, arr2) {
            var i,
                minl = Math.min(arr1.length, arr2.length);
            for (i = 0; i < minl; i += 1) {
                if (arr1[i] !== arr2[i]) {
                    return i;
                }
            }
            return minl;
        }

        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }

        // pick the locale from the array
        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;

            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));
                    if (locale) {
                        return locale;
                    }
                    if (
                        next &&
                        next.length >= j &&
                        commonPrefix(split, next) >= j - 1
                    ) {
                        //the next array item is better than a shallower substring of this one
                        break;
                    }
                    j--;
                }
                i++;
            }
            return globalLocale;
        }

        function isLocaleNameSane(name) {
            // Prevent names that look like filesystem paths, i.e contain '/' or '\'
            return name.match('^[^/\\\\]*$') != null;
        }

        function loadLocale(name) {
            var oldLocale = null,
                aliasedRequire;
            // TODO: Find a better way to register and load all the locales in Node
            if (
                locales[name] === undefined &&
                'object' !== 'undefined' &&
                module &&
                module.exports &&
                isLocaleNameSane(name)
            ) {
                try {
                    oldLocale = globalLocale._abbr;
                    aliasedRequire = commonjsRequire;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                } catch (e) {
                    // mark as not found to avoid repeating expensive file require call causing high CPU
                    // when trying to find en-US, en_US, en-us for every format call
                    locales[name] = null; // null means not found
                }
            }
            return locales[name];
        }

        // This function will load locale and then set the global locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                } else {
                    data = defineLocale(key, values);
                }

                if (data) {
                    // moment.duration._locale = moment._locale = data;
                    globalLocale = data;
                } else {
                    if (typeof console !== 'undefined' && console.warn) {
                        //warn user if arguments are passed but the locale could not be set
                        console.warn(
                            'Locale ' + key + ' not found. Did you forget to load it?'
                        );
                    }
                }
            }

            return globalLocale._abbr;
        }

        function defineLocale(name, config) {
            if (config !== null) {
                var locale,
                    parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                    deprecateSimple(
                        'defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                            'an existing locale. moment.defineLocale(localeName, ' +
                            'config) should only be used for creating a new locale ' +
                            'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                    );
                    parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    } else {
                        locale = loadLocale(config.parentLocale);
                        if (locale != null) {
                            parentConfig = locale._config;
                        } else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }
                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config,
                            });
                            return null;
                        }
                    }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }

                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);

                return locales[name];
            } else {
                // useful for testing
                delete locales[name];
                return null;
            }
        }

        function updateLocale(name, config) {
            if (config != null) {
                var locale,
                    tmpLocale,
                    parentConfig = baseConfig;

                if (locales[name] != null && locales[name].parentLocale != null) {
                    // Update existing child locale in-place to avoid memory-leaks
                    locales[name].set(mergeConfigs(locales[name]._config, config));
                } else {
                    // MERGE
                    tmpLocale = loadLocale(name);
                    if (tmpLocale != null) {
                        parentConfig = tmpLocale._config;
                    }
                    config = mergeConfigs(parentConfig, config);
                    if (tmpLocale == null) {
                        // updateLocale is called for creating a new locale
                        // Set abbr so it will have a name (getters return
                        // undefined otherwise).
                        config.abbr = name;
                    }
                    locale = new Locale(config);
                    locale.parentLocale = locales[name];
                    locales[name] = locale;
                }

                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
            } else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                        if (name === getSetGlobalLocale()) {
                            getSetGlobalLocale(name);
                        }
                    } else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }
            return locales[name];
        }

        // returns locale data
        function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }

            if (!key) {
                return globalLocale;
            }

            if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                    return locale;
                }
                key = [key];
            }

            return chooseLocale(key);
        }

        function listLocales() {
            return keys(locales);
        }

        function checkOverflow(m) {
            var overflow,
                a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                    a[MONTH] < 0 || a[MONTH] > 11
                        ? MONTH
                        : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                        ? DATE
                        : a[HOUR] < 0 ||
                          a[HOUR] > 24 ||
                          (a[HOUR] === 24 &&
                              (a[MINUTE] !== 0 ||
                                  a[SECOND] !== 0 ||
                                  a[MILLISECOND] !== 0))
                        ? HOUR
                        : a[MINUTE] < 0 || a[MINUTE] > 59
                        ? MINUTE
                        : a[SECOND] < 0 || a[SECOND] > 59
                        ? SECOND
                        : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                        ? MILLISECOND
                        : -1;

                if (
                    getParsingFlags(m)._overflowDayOfYear &&
                    (overflow < YEAR || overflow > DATE)
                ) {
                    overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
            }

            return m;
        }

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        var extendedIsoRegex =
                /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            basicIsoRegex =
                /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
            isoDates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/],
                ['YYYYMM', /\d{6}/, false],
                ['YYYY', /\d{4}/, false],
            ],
            // iso time formats and regexes
            isoTimes = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/],
            ],
            aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
            // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
            rfc2822 =
                /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            obsOffsets = {
                UT: 0,
                GMT: 0,
                EDT: -4 * 60,
                EST: -5 * 60,
                CDT: -5 * 60,
                CST: -6 * 60,
                MDT: -6 * 60,
                MST: -7 * 60,
                PDT: -7 * 60,
                PST: -8 * 60,
            };

        // date from iso format
        function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat,
                isoDatesLen = isoDates.length,
                isoTimesLen = isoTimes.length;

            if (match) {
                getParsingFlags(config).iso = true;
                for (i = 0, l = isoDatesLen; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }
                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }
                if (match[3]) {
                    for (i = 0, l = isoTimesLen; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            // match[2] should be 'T' or space
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }
                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }
                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }
                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    } else {
                        config._isValid = false;
                        return;
                    }
                }
                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }

        function extractFromRFC2822Strings(
            yearStr,
            monthStr,
            dayStr,
            hourStr,
            minuteStr,
            secondStr
        ) {
            var result = [
                untruncateYear(yearStr),
                defaultLocaleMonthsShort.indexOf(monthStr),
                parseInt(dayStr, 10),
                parseInt(hourStr, 10),
                parseInt(minuteStr, 10),
            ];

            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }

            return result;
        }

        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
                return 2000 + year;
            } else if (year <= 999) {
                return 1900 + year;
            }
            return year;
        }

        function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s
                .replace(/\([^)]*\)|[\n\t]/g, ' ')
                .replace(/(\s\s+)/g, ' ')
                .replace(/^\s\s*/, '')
                .replace(/\s\s*$/, '');
        }

        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                    weekdayActual = new Date(
                        parsedInput[0],
                        parsedInput[1],
                        parsedInput[2]
                    ).getDay();
                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }
            return true;
        }

        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            } else if (militaryOffset) {
                // the only allowed military tz is Z
                return 0;
            } else {
                var hm = parseInt(numOffset, 10),
                    m = hm % 100,
                    h = (hm - m) / 100;
                return h * 60 + m;
            }
        }

        // date and time from ref 2822 format
        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)),
                parsedArray;
            if (match) {
                parsedArray = extractFromRFC2822Strings(
                    match[4],
                    match[3],
                    match[2],
                    match[5],
                    match[6],
                    match[7]
                );
                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }

                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);

                config._d = createUTCDate.apply(null, config._a);
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                getParsingFlags(config).rfc2822 = true;
            } else {
                config._isValid = false;
            }
        }

        // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }

            configFromISO(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            configFromRFC2822(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            if (config._strict) {
                config._isValid = false;
            } else {
                // Final attempt, use Input Fallback
                hooks.createFromInputFallback(config);
            }
        }

        hooks.createFromInputFallback = deprecate(
            'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
            function (config) {
                config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
            }
        );

        // Pick the first defined of two or three arguments.
        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }
            if (b != null) {
                return b;
            }
            return c;
        }

        function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
                return [
                    nowValue.getUTCFullYear(),
                    nowValue.getUTCMonth(),
                    nowValue.getUTCDate(),
                ];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }

        // convert an array to a date.
        // the array should mirror the parameters below
        // note: all values past the year are optional and will default to the lowest possible value.
        // [year, month, day , hour, minute, second, millisecond]
        function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;

            if (config._d) {
                return;
            }

            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (
                    config._dayOfYear > daysInYear(yearToUse) ||
                    config._dayOfYear === 0
                ) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
                config._a[i] = input[i] =
                    config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
            }

            // Check for 24:00:00.000
            if (
                config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0
            ) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(
                null,
                input
            );
            expectedWeekday = config._useUTC
                ? config._d.getUTCDay()
                : config._d.getDay();

            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
                config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (
                config._w &&
                typeof config._w.d !== 'undefined' &&
                config._w.d !== expectedWeekday
            ) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }

        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;

                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(
                    w.GG,
                    config._a[YEAR],
                    weekOfYear(createLocal(), 1, 4).year
                );
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;

                curWeek = weekOfYear(createLocal(), dow, doy);

                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                // Default to current week.
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                    // weekday -- low day numbers are considered next week
                    weekday = w.d;
                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                } else if (w.e != null) {
                    // local weekday -- counting starts from beginning of week
                    weekday = w.e + dow;
                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                } else {
                    // default to beginning of week
                    weekday = dow;
                }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }

        // constant that refers to the ISO standard
        hooks.ISO_8601 = function () {};

        // constant that refers to the RFC 2822 form
        hooks.RFC_2822 = function () {};

        // date from string and format string
        function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }
            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0,
                era,
                tokenLen;

            tokens =
                expandFormat(config._f, config._locale).match(formattingTokens) || [];
            tokenLen = tokens.length;
            for (i = 0; i < tokenLen; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                    [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }
                    string = string.slice(
                        string.indexOf(parsedInput) + parsedInput.length
                    );
                    totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    } else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver =
                stringLength - totalParsedInputLength;
            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (
                config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0
            ) {
                getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(
                config._locale,
                config._a[HOUR],
                config._meridiem
            );

            // handle era
            era = getParsingFlags(config).era;
            if (era !== null) {
                config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }

            configFromArray(config);
            checkOverflow(config);
        }

        function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
                // nothing to do
                return hour;
            }
            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                    hour += 12;
                }
                if (!isPm && hour === 12) {
                    hour = 0;
                }
                return hour;
            } else {
                // this is not supposed to happen
                return hour;
            }
        }

        // date from string and array of format strings
        function configFromStringAndArray(config) {
            var tempConfig,
                bestMoment,
                scoreToBeat,
                i,
                currentScore,
                validFormatFound,
                bestFormatIsValid = false,
                configfLen = config._f.length;

            if (configfLen === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }

            for (i = 0; i < configfLen; i++) {
                currentScore = 0;
                validFormatFound = false;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (isValid(tempConfig)) {
                    validFormatFound = true;
                }

                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;

                //or tokens
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                getParsingFlags(tempConfig).score = currentScore;

                if (!bestFormatIsValid) {
                    if (
                        scoreToBeat == null ||
                        currentScore < scoreToBeat ||
                        validFormatFound
                    ) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                        if (validFormatFound) {
                            bestFormatIsValid = true;
                        }
                    }
                } else {
                    if (currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                    }
                }
            }

            extend(config, bestMoment || tempConfig);
        }

        function configFromObject(config) {
            if (config._d) {
                return;
            }

            var i = normalizeObjectUnits(config._i),
                dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map(
                [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
                function (obj) {
                    return obj && parseInt(obj, 10);
                }
            );

            configFromArray(config);
        }

        function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, 'd');
                res._nextDay = undefined;
            }

            return res;
        }

        function prepareConfig(config) {
            var input = config._i,
                format = config._f;

            config._locale = config._locale || getLocale(config._l);

            if (input === null || (format === undefined && input === '')) {
                return createInvalid({ nullInput: true });
            }

            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
                config._d = input;
            } else if (isArray(format)) {
                configFromStringAndArray(config);
            } else if (format) {
                configFromStringAndFormat(config);
            } else {
                configFromInput(config);
            }

            if (!isValid(config)) {
                config._d = null;
            }

            return config;
        }

        function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
                configFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            } else if (isObject(input)) {
                configFromObject(config);
            } else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
            } else {
                hooks.createFromInputFallback(config);
            }
        }

        function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (format === true || format === false) {
                strict = format;
                format = undefined;
            }

            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }

            if (
                (isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)
            ) {
                input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;

            return createFromConfig(c);
        }

        function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }

        var prototypeMin = deprecate(
                'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other < this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            ),
            prototypeMax = deprecate(
                'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other > this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            );

        // Pick a moment m from moments so that m[fn](other) is true for all
        // other. This relies on the function fn to be transitive.
        //
        // moments should either be an array of moment objects or an array, whose
        // first element is an array of moment objects.
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }

        // TODO: Use [].sort instead?
        function min() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isBefore', args);
        }

        function max() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isAfter', args);
        }

        var now = function () {
            return Date.now ? Date.now() : +new Date();
        };

        var ordering = [
            'year',
            'quarter',
            'month',
            'week',
            'day',
            'hour',
            'minute',
            'second',
            'millisecond',
        ];

        function isDurationValid(m) {
            var key,
                unitHasDecimal = false,
                i,
                orderLen = ordering.length;
            for (key in m) {
                if (
                    hasOwnProp(m, key) &&
                    !(
                        indexOf.call(ordering, key) !== -1 &&
                        (m[key] == null || !isNaN(m[key]))
                    )
                ) {
                    return false;
                }
            }

            for (i = 0; i < orderLen; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false; // only allow non-integers for smallest unit
                    }
                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }

            return true;
        }

        function isValid$1() {
            return this._isValid;
        }

        function createInvalid$1() {
            return createDuration(NaN);
        }

        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;

            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds =
                +milliseconds +
                seconds * 1e3 + // 1000
                minutes * 6e4 + // 1000 * 60
                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;

            this._data = {};

            this._locale = getLocale();

            this._bubble();
        }

        function isDuration(obj) {
            return obj instanceof Duration;
        }

        function absRound(number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            } else {
                return Math.round(number);
            }
        }

        // compare two arrays, return the number of differences
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
            for (i = 0; i < len; i++) {
                if (
                    (dontConvert && array1[i] !== array2[i]) ||
                    (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
                ) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }

        // FORMATTING

        function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset(),
                    sign = '+';
                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }
                return (
                    sign +
                    zeroFill(~~(offset / 60), 2) +
                    separator +
                    zeroFill(~~offset % 60, 2)
                );
            });
        }

        offset('Z', ':');
        offset('ZZ', '');

        // PARSING

        addRegexToken('Z', matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });

        // HELPERS

        // timezone chunker
        // '+10:00' > ['10',  '00']
        // '-1530'  > ['-15', '30']
        var chunkOffset = /([\+\-]|\d\d)/gi;

        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher),
                chunk,
                parts,
                minutes;

            if (matches === null) {
                return null;
            }

            chunk = matches[matches.length - 1] || [];
            parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);

            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
        }

        // Return a moment from input, that is local/utc/zone equivalent to model.
        function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
                res = model.clone();
                diff =
                    (isMoment(input) || isDate(input)
                        ? input.valueOf()
                        : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
            } else {
                return createLocal(input).local();
            }
        }

        function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
        }

        // HOOKS

        // This function will be called whenever a moment is mutated.
        // It is intended to keep the offset in sync with the timezone.
        hooks.updateOffset = function () {};

        // MOMENTS

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);
                    if (input === null) {
                        return this;
                    }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(
                            this,
                            createDuration(input - offset, 'm'),
                            1,
                            false
                        );
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
                return this;
            } else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }

        function getSetZone(input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }

                this.utcOffset(input, keepLocalTime);

                return this;
            } else {
                return -this.utcOffset();
            }
        }

        function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }

        function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }
            return this;
        }

        function setOffsetToParsedOffset() {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                    this.utcOffset(tZone);
                } else {
                    this.utcOffset(0, true);
                }
            }
            return this;
        }

        function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
                return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;

            return (this.utcOffset() - input) % 60 === 0;
        }

        function isDaylightSavingTime() {
            return (
                this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset()
            );
        }

        function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }

            var c = {},
                other;

            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
                other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted =
                    this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
                this._isDSTShifted = false;
            }

            return this._isDSTShifted;
        }

        function isLocal() {
            return this.isValid() ? !this._isUTC : false;
        }

        function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
        }

        function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }

        // ASP.NET json date format regex
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
            // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
            // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
            // and further modified to allow for strings containing both week and day
            isoRegex =
                /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

        function createDuration(input, key) {
            var duration = input,
                // matching against regexp is expensive, do it on demand
                match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months,
                };
            } else if (isNumber(input) || !isNaN(+input)) {
                duration = {};
                if (key) {
                    duration[key] = +input;
                } else {
                    duration.milliseconds = +input;
                }
            } else if ((match = aspNetRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
                };
            } else if ((match = isoRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign),
                };
            } else if (duration == null) {
                // checks for null or undefined
                duration = {};
            } else if (
                typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)
            ) {
                diffRes = momentsDifference(
                    createLocal(duration.from),
                    createLocal(duration.to)
                );

                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }

            if (isDuration(input) && hasOwnProp(input, '_isValid')) {
                ret._isValid = input._isValid;
            }

            return ret;
        }

        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;

        function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
        }

        function positiveMomentsDifference(base, other) {
            var res = {};

            res.months =
                other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');

            return res;
        }

        function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
                return { milliseconds: 0, months: 0 };
            }

            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }

            return res;
        }

        // TODO: remove 'name' arg after deprecation is removed
        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(
                        name,
                        'moment().' +
                            name +
                            '(period, number) is deprecated. Please use moment().' +
                            name +
                            '(number, period). ' +
                            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                    );
                    tmp = val;
                    val = period;
                    period = tmp;
                }

                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }

        function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
                // No op
                return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }

        var add = createAdder(1, 'add'),
            subtract = createAdder(-1, 'subtract');

        function isString(input) {
            return typeof input === 'string' || input instanceof String;
        }

        // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
        function isMomentInput(input) {
            return (
                isMoment(input) ||
                isDate(input) ||
                isString(input) ||
                isNumber(input) ||
                isNumberOrStringArray(input) ||
                isMomentInputObject(input) ||
                input === null ||
                input === undefined
            );
        }

        function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'years',
                    'year',
                    'y',
                    'months',
                    'month',
                    'M',
                    'days',
                    'day',
                    'd',
                    'dates',
                    'date',
                    'D',
                    'hours',
                    'hour',
                    'h',
                    'minutes',
                    'minute',
                    'm',
                    'seconds',
                    'second',
                    's',
                    'milliseconds',
                    'millisecond',
                    'ms',
                ],
                i,
                property,
                propertyLen = properties.length;

            for (i = 0; i < propertyLen; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
        }

        function isNumberOrStringArray(input) {
            var arrayTest = isArray(input),
                dataTypeTest = false;
            if (arrayTest) {
                dataTypeTest =
                    input.filter(function (item) {
                        return !isNumber(item) && isString(input);
                    }).length === 0;
            }
            return arrayTest && dataTypeTest;
        }

        function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'sameDay',
                    'nextDay',
                    'lastDay',
                    'nextWeek',
                    'lastWeek',
                    'sameElse',
                ],
                i,
                property;

            for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
        }

        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6
                ? 'sameElse'
                : diff < -1
                ? 'lastWeek'
                : diff < 0
                ? 'lastDay'
                : diff < 1
                ? 'sameDay'
                : diff < 2
                ? 'nextDay'
                : diff < 7
                ? 'nextWeek'
                : 'sameElse';
        }

        function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
                if (!arguments[0]) {
                    time = undefined;
                    formats = undefined;
                } else if (isMomentInput(arguments[0])) {
                    time = arguments[0];
                    formats = undefined;
                } else if (isCalendarSpec(arguments[0])) {
                    formats = arguments[0];
                    time = undefined;
                }
            }
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse',
                output =
                    formats &&
                    (isFunction(formats[format])
                        ? formats[format].call(this, now)
                        : formats[format]);

            return this.format(
                output || this.localeData().calendar(format, this, createLocal(now))
            );
        }

        function clone() {
            return new Moment(this);
        }

        function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }

        function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }

        function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
                localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                return false;
            }
            inclusivity = inclusivity || '()';
            return (
                (inclusivity[0] === '('
                    ? this.isAfter(localFrom, units)
                    : !this.isBefore(localFrom, units)) &&
                (inclusivity[1] === ')'
                    ? this.isBefore(localTo, units)
                    : !this.isAfter(localTo, units))
            );
        }

        function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            } else {
                inputMs = localInput.valueOf();
                return (
                    this.clone().startOf(units).valueOf() <= inputMs &&
                    inputMs <= this.clone().endOf(units).valueOf()
                );
            }
        }

        function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }

        function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }

        function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
                return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
                return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

            units = normalizeUnits(units);

            switch (units) {
                case 'year':
                    output = monthDiff(this, that) / 12;
                    break;
                case 'month':
                    output = monthDiff(this, that);
                    break;
                case 'quarter':
                    output = monthDiff(this, that) / 3;
                    break;
                case 'second':
                    output = (this - that) / 1e3;
                    break; // 1000
                case 'minute':
                    output = (this - that) / 6e4;
                    break; // 1000 * 60
                case 'hour':
                    output = (this - that) / 36e5;
                    break; // 1000 * 60 * 60
                case 'day':
                    output = (this - that - zoneDelta) / 864e5;
                    break; // 1000 * 60 * 60 * 24, negate dst
                case 'week':
                    output = (this - that - zoneDelta) / 6048e5;
                    break; // 1000 * 60 * 60 * 24 * 7, negate dst
                default:
                    output = this - that;
            }

            return asFloat ? output : absFloor(output);
        }

        function monthDiff(a, b) {
            if (a.date() < b.date()) {
                // end-of-month calculations work correct when the start month has more
                // days than the end month.
                return -monthDiff(b, a);
            }
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;

            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
            } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
        }

        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

        function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }

        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }
            var utc = keepOffset !== true,
                m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(
                    m,
                    utc
                        ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                        : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
                );
            }
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                if (utc) {
                    return this.toDate().toISOString();
                } else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                        .toISOString()
                        .replace('Z', formatMoment(m, 'Z'));
                }
            }
            return formatMoment(
                m,
                utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }

        /**
         * Return a human readable representation of a moment that can
         * also be evaluated to get a new moment which is the same
         *
         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
         */
        function inspect() {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment',
                zone = '',
                prefix,
                year,
                datetime,
                suffix;
            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }
            prefix = '[' + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            datetime = '-MM-DD[T]HH:mm:ss.SSS';
            suffix = zone + '[")]';

            return this.format(prefix + year + datetime + suffix);
        }

        function format(inputString) {
            if (!inputString) {
                inputString = this.isUtc()
                    ? hooks.defaultFormatUtc
                    : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }

        function from(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ to: this, from: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }

        function to(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ from: this, to: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        function locale(key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        }

        var lang = deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        );

        function localeData() {
            return this._locale;
        }

        var MS_PER_SECOND = 1000,
            MS_PER_MINUTE = 60 * MS_PER_SECOND,
            MS_PER_HOUR = 60 * MS_PER_MINUTE,
            MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

        // actual modulo - handles negative numbers (for dates before 1970):
        function mod$1(dividend, divisor) {
            return ((dividend % divisor) + divisor) % divisor;
        }

        function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return new Date(y, m, d).valueOf();
            }
        }

        function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return Date.UTC(y, m, d);
            }
        }

        function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year(), 0, 1);
                    break;
                case 'quarter':
                    time = startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3),
                        1
                    );
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month(), 1);
                    break;
                case 'week':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday()
                    );
                    break;
                case 'isoWeek':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1)
                    );
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date());
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time -= mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    );
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_MINUTE);
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_SECOND);
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year() + 1, 0, 1) - 1;
                    break;
                case 'quarter':
                    time =
                        startOfDate(
                            this.year(),
                            this.month() - (this.month() % 3) + 3,
                            1
                        ) - 1;
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                    break;
                case 'week':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - this.weekday() + 7
                        ) - 1;
                    break;
                case 'isoWeek':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - (this.isoWeekday() - 1) + 7
                        ) - 1;
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time +=
                        MS_PER_HOUR -
                        mod$1(
                            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                            MS_PER_HOUR
                        ) -
                        1;
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
        }

        function unix() {
            return Math.floor(this.valueOf() / 1000);
        }

        function toDate() {
            return new Date(this.valueOf());
        }

        function toArray() {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hour(),
                m.minute(),
                m.second(),
                m.millisecond(),
            ];
        }

        function toObject() {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds(),
            };
        }

        function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
        }

        function isValid$2() {
            return isValid(this);
        }

        function parsingFlags() {
            return extend({}, getParsingFlags(this));
        }

        function invalidAt() {
            return getParsingFlags(this).overflow;
        }

        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict,
            };
        }

        addFormatToken('N', 0, 0, 'eraAbbr');
        addFormatToken('NN', 0, 0, 'eraAbbr');
        addFormatToken('NNN', 0, 0, 'eraAbbr');
        addFormatToken('NNNN', 0, 0, 'eraName');
        addFormatToken('NNNNN', 0, 0, 'eraNarrow');

        addFormatToken('y', ['y', 1], 'yo', 'eraYear');
        addFormatToken('y', ['yy', 2], 0, 'eraYear');
        addFormatToken('y', ['yyy', 3], 0, 'eraYear');
        addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

        addRegexToken('N', matchEraAbbr);
        addRegexToken('NN', matchEraAbbr);
        addRegexToken('NNN', matchEraAbbr);
        addRegexToken('NNNN', matchEraName);
        addRegexToken('NNNNN', matchEraNarrow);

        addParseToken(
            ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
            function (input, array, config, token) {
                var era = config._locale.erasParse(input, token, config._strict);
                if (era) {
                    getParsingFlags(config).era = era;
                } else {
                    getParsingFlags(config).invalidEra = input;
                }
            }
        );

        addRegexToken('y', matchUnsigned);
        addRegexToken('yy', matchUnsigned);
        addRegexToken('yyy', matchUnsigned);
        addRegexToken('yyyy', matchUnsigned);
        addRegexToken('yo', matchEraYearOrdinal);

        addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
        addParseToken(['yo'], function (input, array, config, token) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
                match = input.match(config._locale._eraYearOrdinalRegex);
            }

            if (config._locale.eraYearOrdinalParse) {
                array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
                array[YEAR] = parseInt(input, 10);
            }
        });

        function localeEras(m, format) {
            var i,
                l,
                date,
                eras = this._eras || getLocale('en')._eras;
            for (i = 0, l = eras.length; i < l; ++i) {
                switch (typeof eras[i].since) {
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].since).startOf('day');
                        eras[i].since = date.valueOf();
                        break;
                }

                switch (typeof eras[i].until) {
                    case 'undefined':
                        eras[i].until = +Infinity;
                        break;
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].until).startOf('day').valueOf();
                        eras[i].until = date.valueOf();
                        break;
                }
            }
            return eras;
        }

        function localeErasParse(eraName, format, strict) {
            var i,
                l,
                eras = this.eras(),
                name,
                abbr,
                narrow;
            eraName = eraName.toUpperCase();

            for (i = 0, l = eras.length; i < l; ++i) {
                name = eras[i].name.toUpperCase();
                abbr = eras[i].abbr.toUpperCase();
                narrow = eras[i].narrow.toUpperCase();

                if (strict) {
                    switch (format) {
                        case 'N':
                        case 'NN':
                        case 'NNN':
                            if (abbr === eraName) {
                                return eras[i];
                            }
                            break;

                        case 'NNNN':
                            if (name === eraName) {
                                return eras[i];
                            }
                            break;

                        case 'NNNNN':
                            if (narrow === eraName) {
                                return eras[i];
                            }
                            break;
                    }
                } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                    return eras[i];
                }
            }
        }

        function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;
            if (year === undefined) {
                return hooks(era.since).year();
            } else {
                return hooks(era.since).year() + (year - era.offset) * dir;
            }
        }

        function getEraName() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].name;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].name;
                }
            }

            return '';
        }

        function getEraNarrow() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].narrow;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].narrow;
                }
            }

            return '';
        }

        function getEraAbbr() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].abbr;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].abbr;
                }
            }

            return '';
        }

        function getEraYear() {
            var i,
                l,
                dir,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                dir = eras[i].since <= eras[i].until ? +1 : -1;

                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (
                    (eras[i].since <= val && val <= eras[i].until) ||
                    (eras[i].until <= val && val <= eras[i].since)
                ) {
                    return (
                        (this.year() - hooks(eras[i].since).year()) * dir +
                        eras[i].offset
                    );
                }
            }

            return this.year();
        }

        function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNameRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
        }

        function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, '_erasAbbrRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }

        function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNarrowRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }

        function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
        }

        function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
        }

        function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
        }

        function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
        }

        function computeErasParse() {
            var abbrPieces = [],
                namePieces = [],
                narrowPieces = [],
                mixedPieces = [],
                i,
                l,
                eras = this.eras();

            for (i = 0, l = eras.length; i < l; ++i) {
                namePieces.push(regexEscape(eras[i].name));
                abbrPieces.push(regexEscape(eras[i].abbr));
                narrowPieces.push(regexEscape(eras[i].narrow));

                mixedPieces.push(regexEscape(eras[i].name));
                mixedPieces.push(regexEscape(eras[i].abbr));
                mixedPieces.push(regexEscape(eras[i].narrow));
            }

            this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
            this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
            this._erasNarrowRegex = new RegExp(
                '^(' + narrowPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });

        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });

        function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }

        addWeekYearFormatToken('gggg', 'weekYear');
        addWeekYearFormatToken('ggggg', 'weekYear');
        addWeekYearFormatToken('GGGG', 'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');

        // ALIASES

        addUnitAlias('weekYear', 'gg');
        addUnitAlias('isoWeekYear', 'GG');

        // PRIORITY

        addUnitPriority('weekYear', 1);
        addUnitPriority('isoWeekYear', 1);

        // PARSING

        addRegexToken('G', matchSigned);
        addRegexToken('g', matchSigned);
        addRegexToken('GG', match1to2, match2);
        addRegexToken('gg', match1to2, match2);
        addRegexToken('GGGG', match1to4, match4);
        addRegexToken('gggg', match1to4, match4);
        addRegexToken('GGGGG', match1to6, match6);
        addRegexToken('ggggg', match1to6, match6);

        addWeekParseToken(
            ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
            function (input, week, config, token) {
                week[token.substr(0, 2)] = toInt(input);
            }
        );

        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });

        // MOMENTS

        function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy
            );
        }

        function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.isoWeek(),
                this.isoWeekday(),
                1,
                4
            );
        }

        function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
        }

        function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
        }

        function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }

        function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }

        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            } else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                    week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }

        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }

        // FORMATTING

        addFormatToken('Q', 0, 'Qo', 'quarter');

        // ALIASES

        addUnitAlias('quarter', 'Q');

        // PRIORITY

        addUnitPriority('quarter', 7);

        // PARSING

        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });

        // MOMENTS

        function getSetQuarter(input) {
            return input == null
                ? Math.ceil((this.month() + 1) / 3)
                : this.month((input - 1) * 3 + (this.month() % 3));
        }

        // FORMATTING

        addFormatToken('D', ['DD', 2], 'Do', 'date');

        // ALIASES

        addUnitAlias('date', 'D');

        // PRIORITY
        addUnitPriority('date', 9);

        // PARSING

        addRegexToken('D', match1to2);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict
                ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                : locale._dayOfMonthOrdinalParseLenient;
        });

        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });

        // MOMENTS

        var getSetDayOfMonth = makeGetSet('Date', true);

        // FORMATTING

        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

        // ALIASES

        addUnitAlias('dayOfYear', 'DDD');

        // PRIORITY
        addUnitPriority('dayOfYear', 4);

        // PARSING

        addRegexToken('DDD', match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });

        // HELPERS

        // MOMENTS

        function getSetDayOfYear(input) {
            var dayOfYear =
                Math.round(
                    (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
                ) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        }

        // FORMATTING

        addFormatToken('m', ['mm', 2], 0, 'minute');

        // ALIASES

        addUnitAlias('minute', 'm');

        // PRIORITY

        addUnitPriority('minute', 14);

        // PARSING

        addRegexToken('m', match1to2);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);

        // MOMENTS

        var getSetMinute = makeGetSet('Minutes', false);

        // FORMATTING

        addFormatToken('s', ['ss', 2], 0, 'second');

        // ALIASES

        addUnitAlias('second', 's');

        // PRIORITY

        addUnitPriority('second', 15);

        // PARSING

        addRegexToken('s', match1to2);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);

        // MOMENTS

        var getSetSecond = makeGetSet('Seconds', false);

        // FORMATTING

        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });

        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });

        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });

        // ALIASES

        addUnitAlias('millisecond', 'ms');

        // PRIORITY

        addUnitPriority('millisecond', 16);

        // PARSING

        addRegexToken('S', match1to3, match1);
        addRegexToken('SS', match1to3, match2);
        addRegexToken('SSS', match1to3, match3);

        var token, getSetMillisecond;
        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }

        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }

        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }

        getSetMillisecond = makeGetSet('Milliseconds', false);

        // FORMATTING

        addFormatToken('z', 0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');

        // MOMENTS

        function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
        }

        function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }

        var proto = Moment.prototype;

        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== 'undefined' && Symbol.for != null) {
            proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
                return 'Moment<' + this.format() + '>';
            };
        }
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate(
            'dates accessor is deprecated. Use date instead.',
            getSetDayOfMonth
        );
        proto.months = deprecate(
            'months accessor is deprecated. Use month instead',
            getSetMonth
        );
        proto.years = deprecate(
            'years accessor is deprecated. Use year instead',
            getSetYear
        );
        proto.zone = deprecate(
            'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
            getSetZone
        );
        proto.isDSTShifted = deprecate(
            'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
            isDaylightSavingTimeShifted
        );

        function createUnix(input) {
            return createLocal(input * 1000);
        }

        function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
        }

        function preParsePostFormat(string) {
            return string;
        }

        var proto$1 = Locale.prototype;

        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;

        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;

        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;

        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;

        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;

        function get$1(format, index, field, setter) {
            var locale = getLocale(),
                utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }

        function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';

            if (index != null) {
                return get$1(format, index, field, 'month');
            }

            var i,
                out = [];
            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }
            return out;
        }

        // ()
        // (5)
        // (fmt, 5)
        // (fmt)
        // (true)
        // (true, 5)
        // (true, fmt, 5)
        // (true, fmt)
        function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0,
                i,
                out = [];

            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }

            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
        }

        function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
        }

        function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }

        function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }

        function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }

        function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }

        getSetGlobalLocale('en', {
            eras: [
                {
                    since: '0001-01-01',
                    until: +Infinity,
                    offset: 1,
                    name: 'Anno Domini',
                    narrow: 'AD',
                    abbr: 'AD',
                },
                {
                    since: '0000-12-31',
                    until: -Infinity,
                    offset: 1,
                    name: 'Before Christ',
                    narrow: 'BC',
                    abbr: 'BC',
                },
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
                var b = number % 10,
                    output =
                        toInt((number % 100) / 10) === 1
                            ? 'th'
                            : b === 1
                            ? 'st'
                            : b === 2
                            ? 'nd'
                            : b === 3
                            ? 'rd'
                            : 'th';
                return number + output;
            },
        });

        // Side effect imports

        hooks.lang = deprecate(
            'moment.lang is deprecated. Use moment.locale instead.',
            getSetGlobalLocale
        );
        hooks.langData = deprecate(
            'moment.langData is deprecated. Use moment.localeData instead.',
            getLocale
        );

        var mathAbs = Math.abs;

        function abs() {
            var data = this._data;

            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);

            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);

            return this;
        }

        function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);

            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;

            return duration._bubble();
        }

        // supports only 2.0-style add(1, 's') or add(duration)
        function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
        }

        // supports only 2.0-style subtract(1, 's') or subtract(duration)
        function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
        }

        function absCeil(number) {
            if (number < 0) {
                return Math.floor(number);
            } else {
                return Math.ceil(number);
            }
        }

        function bubble() {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds,
                minutes,
                hours,
                years,
                monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (
                !(
                    (milliseconds >= 0 && days >= 0 && months >= 0) ||
                    (milliseconds <= 0 && days <= 0 && months <= 0)
                )
            ) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;

            hours = absFloor(minutes / 60);
            data.hours = hours % 24;

            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;

            return this;
        }

        function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return (days * 4800) / 146097;
        }

        function monthsToDays(months) {
            // the reverse of daysToMonths
            return (months * 146097) / 4800;
        }

        function as(units) {
            if (!this.isValid()) {
                return NaN;
            }
            var days,
                months,
                milliseconds = this._milliseconds;

            units = normalizeUnits(units);

            if (units === 'month' || units === 'quarter' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                switch (units) {
                    case 'month':
                        return months;
                    case 'quarter':
                        return months / 3;
                    case 'year':
                        return months / 12;
                }
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                    case 'week':
                        return days / 7 + milliseconds / 6048e5;
                    case 'day':
                        return days + milliseconds / 864e5;
                    case 'hour':
                        return days * 24 + milliseconds / 36e5;
                    case 'minute':
                        return days * 1440 + milliseconds / 6e4;
                    case 'second':
                        return days * 86400 + milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond':
                        return Math.floor(days * 864e5) + milliseconds;
                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        }

        // TODO: Use this.as('ms')?
        function valueOf$1() {
            if (!this.isValid()) {
                return NaN;
            }
            return (
                this._milliseconds +
                this._days * 864e5 +
                (this._months % 12) * 2592e6 +
                toInt(this._months / 12) * 31536e6
            );
        }

        function makeAs(alias) {
            return function () {
                return this.as(alias);
            };
        }

        var asMilliseconds = makeAs('ms'),
            asSeconds = makeAs('s'),
            asMinutes = makeAs('m'),
            asHours = makeAs('h'),
            asDays = makeAs('d'),
            asWeeks = makeAs('w'),
            asMonths = makeAs('M'),
            asQuarters = makeAs('Q'),
            asYears = makeAs('y');

        function clone$1() {
            return createDuration(this);
        }

        function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }

        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }

        var milliseconds = makeGetter('milliseconds'),
            seconds = makeGetter('seconds'),
            minutes = makeGetter('minutes'),
            hours = makeGetter('hours'),
            days = makeGetter('days'),
            months = makeGetter('months'),
            years = makeGetter('years');

        function weeks() {
            return absFloor(this.days() / 7);
        }

        var round = Math.round,
            thresholds = {
                ss: 44, // a few seconds to seconds
                s: 45, // seconds to minute
                m: 45, // minutes to hour
                h: 22, // hours to day
                d: 26, // days to month/week
                w: null, // weeks to month
                M: 11, // months to year
            };

        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }

        function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
            var duration = createDuration(posNegDuration).abs(),
                seconds = round(duration.as('s')),
                minutes = round(duration.as('m')),
                hours = round(duration.as('h')),
                days = round(duration.as('d')),
                months = round(duration.as('M')),
                weeks = round(duration.as('w')),
                years = round(duration.as('y')),
                a =
                    (seconds <= thresholds.ss && ['s', seconds]) ||
                    (seconds < thresholds.s && ['ss', seconds]) ||
                    (minutes <= 1 && ['m']) ||
                    (minutes < thresholds.m && ['mm', minutes]) ||
                    (hours <= 1 && ['h']) ||
                    (hours < thresholds.h && ['hh', hours]) ||
                    (days <= 1 && ['d']) ||
                    (days < thresholds.d && ['dd', days]);

            if (thresholds.w != null) {
                a =
                    a ||
                    (weeks <= 1 && ['w']) ||
                    (weeks < thresholds.w && ['ww', weeks]);
            }
            a = a ||
                (months <= 1 && ['M']) ||
                (months < thresholds.M && ['MM', months]) ||
                (years <= 1 && ['y']) || ['yy', years];

            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }

        // This function allows you to set the rounding function for relative time strings
        function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }
            if (typeof roundingFunction === 'function') {
                round = roundingFunction;
                return true;
            }
            return false;
        }

        // This function allows you to set a threshold for relative time strings
        function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }
            if (limit === undefined) {
                return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }
            return true;
        }

        function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var withSuffix = false,
                th = thresholds,
                locale,
                output;

            if (typeof argWithSuffix === 'object') {
                argThresholds = argWithSuffix;
                argWithSuffix = false;
            }
            if (typeof argWithSuffix === 'boolean') {
                withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === 'object') {
                th = Object.assign({}, thresholds, argThresholds);
                if (argThresholds.s != null && argThresholds.ss == null) {
                    th.ss = argThresholds.s - 1;
                }
            }

            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);

            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
        }

        var abs$1 = Math.abs;

        function sign(x) {
            return (x > 0) - (x < 0) || +x;
        }

        function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000,
                days = abs$1(this._days),
                months = abs$1(this._months),
                minutes,
                hours,
                years,
                s,
                total = this.asSeconds(),
                totalSign,
                ymSign,
                daysSign,
                hmsSign;

            if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

            totalSign = total < 0 ? '-' : '';
            ymSign = sign(this._months) !== sign(total) ? '-' : '';
            daysSign = sign(this._days) !== sign(total) ? '-' : '';
            hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

            return (
                totalSign +
                'P' +
                (years ? ymSign + years + 'Y' : '') +
                (months ? ymSign + months + 'M' : '') +
                (days ? daysSign + days + 'D' : '') +
                (hours || minutes || seconds ? 'T' : '') +
                (hours ? hmsSign + hours + 'H' : '') +
                (minutes ? hmsSign + minutes + 'M' : '') +
                (seconds ? hmsSign + s + 'S' : '')
            );
        }

        var proto$2 = Duration.prototype;

        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;

        proto$2.toIsoString = deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
            toISOString$1
        );
        proto$2.lang = lang;

        // FORMATTING

        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');

        // PARSING

        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });

        //! moment.js

        hooks.version = '2.29.3';

        setHookCallback(createLocal);

        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;

        // currently HTML5 input type only supports 24-hour formats
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD', // <input type="date" />
            TIME: 'HH:mm', // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW', // <input type="week" />
            MONTH: 'YYYY-MM', // <input type="month" />
        };

        return hooks;

    })));
    });

    /*!
     * Chart.js v2.9.4
     * https://www.chartjs.org
     * (c) 2020 Chart.js Contributors
     * Released under the MIT License
     */

    var Chart = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    module.exports = factory(function() { try { return moment; } catch(e) { } }()) ;
    }(commonjsGlobal, (function (moment) {
    moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    function getCjsExportFromNamespace (n) {
    	return n && n['default'] || n;
    }

    var colorName = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    var conversions = createCommonjsModule(function (module) {
    /* MIT license */


    // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)

    var reverseKeywords = {};
    for (var key in colorName) {
    	if (colorName.hasOwnProperty(key)) {
    		reverseKeywords[colorName[key]] = key;
    	}
    }

    var convert = module.exports = {
    	rgb: {channels: 3, labels: 'rgb'},
    	hsl: {channels: 3, labels: 'hsl'},
    	hsv: {channels: 3, labels: 'hsv'},
    	hwb: {channels: 3, labels: 'hwb'},
    	cmyk: {channels: 4, labels: 'cmyk'},
    	xyz: {channels: 3, labels: 'xyz'},
    	lab: {channels: 3, labels: 'lab'},
    	lch: {channels: 3, labels: 'lch'},
    	hex: {channels: 1, labels: ['hex']},
    	keyword: {channels: 1, labels: ['keyword']},
    	ansi16: {channels: 1, labels: ['ansi16']},
    	ansi256: {channels: 1, labels: ['ansi256']},
    	hcg: {channels: 3, labels: ['h', 'c', 'g']},
    	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
    	gray: {channels: 1, labels: ['gray']}
    };

    // hide .channels and .labels properties
    for (var model in convert) {
    	if (convert.hasOwnProperty(model)) {
    		if (!('channels' in convert[model])) {
    			throw new Error('missing channels property: ' + model);
    		}

    		if (!('labels' in convert[model])) {
    			throw new Error('missing channel labels property: ' + model);
    		}

    		if (convert[model].labels.length !== convert[model].channels) {
    			throw new Error('channel and label counts mismatch: ' + model);
    		}

    		var channels = convert[model].channels;
    		var labels = convert[model].labels;
    		delete convert[model].channels;
    		delete convert[model].labels;
    		Object.defineProperty(convert[model], 'channels', {value: channels});
    		Object.defineProperty(convert[model], 'labels', {value: labels});
    	}
    }

    convert.rgb.hsl = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var min = Math.min(r, g, b);
    	var max = Math.max(r, g, b);
    	var delta = max - min;
    	var h;
    	var s;
    	var l;

    	if (max === min) {
    		h = 0;
    	} else if (r === max) {
    		h = (g - b) / delta;
    	} else if (g === max) {
    		h = 2 + (b - r) / delta;
    	} else if (b === max) {
    		h = 4 + (r - g) / delta;
    	}

    	h = Math.min(h * 60, 360);

    	if (h < 0) {
    		h += 360;
    	}

    	l = (min + max) / 2;

    	if (max === min) {
    		s = 0;
    	} else if (l <= 0.5) {
    		s = delta / (max + min);
    	} else {
    		s = delta / (2 - max - min);
    	}

    	return [h, s * 100, l * 100];
    };

    convert.rgb.hsv = function (rgb) {
    	var rdif;
    	var gdif;
    	var bdif;
    	var h;
    	var s;

    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var v = Math.max(r, g, b);
    	var diff = v - Math.min(r, g, b);
    	var diffc = function (c) {
    		return (v - c) / 6 / diff + 1 / 2;
    	};

    	if (diff === 0) {
    		h = s = 0;
    	} else {
    		s = diff / v;
    		rdif = diffc(r);
    		gdif = diffc(g);
    		bdif = diffc(b);

    		if (r === v) {
    			h = bdif - gdif;
    		} else if (g === v) {
    			h = (1 / 3) + rdif - bdif;
    		} else if (b === v) {
    			h = (2 / 3) + gdif - rdif;
    		}
    		if (h < 0) {
    			h += 1;
    		} else if (h > 1) {
    			h -= 1;
    		}
    	}

    	return [
    		h * 360,
    		s * 100,
    		v * 100
    	];
    };

    convert.rgb.hwb = function (rgb) {
    	var r = rgb[0];
    	var g = rgb[1];
    	var b = rgb[2];
    	var h = convert.rgb.hsl(rgb)[0];
    	var w = 1 / 255 * Math.min(r, Math.min(g, b));

    	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

    	return [h, w * 100, b * 100];
    };

    convert.rgb.cmyk = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var c;
    	var m;
    	var y;
    	var k;

    	k = Math.min(1 - r, 1 - g, 1 - b);
    	c = (1 - r - k) / (1 - k) || 0;
    	m = (1 - g - k) / (1 - k) || 0;
    	y = (1 - b - k) / (1 - k) || 0;

    	return [c * 100, m * 100, y * 100, k * 100];
    };

    /**
     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
     * */
    function comparativeDistance(x, y) {
    	return (
    		Math.pow(x[0] - y[0], 2) +
    		Math.pow(x[1] - y[1], 2) +
    		Math.pow(x[2] - y[2], 2)
    	);
    }

    convert.rgb.keyword = function (rgb) {
    	var reversed = reverseKeywords[rgb];
    	if (reversed) {
    		return reversed;
    	}

    	var currentClosestDistance = Infinity;
    	var currentClosestKeyword;

    	for (var keyword in colorName) {
    		if (colorName.hasOwnProperty(keyword)) {
    			var value = colorName[keyword];

    			// Compute comparative distance
    			var distance = comparativeDistance(rgb, value);

    			// Check if its less, if so set as closest
    			if (distance < currentClosestDistance) {
    				currentClosestDistance = distance;
    				currentClosestKeyword = keyword;
    			}
    		}
    	}

    	return currentClosestKeyword;
    };

    convert.keyword.rgb = function (keyword) {
    	return colorName[keyword];
    };

    convert.rgb.xyz = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;

    	// assume sRGB
    	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
    	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
    	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

    	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
    	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
    	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

    	return [x * 100, y * 100, z * 100];
    };

    convert.rgb.lab = function (rgb) {
    	var xyz = convert.rgb.xyz(rgb);
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert.hsl.rgb = function (hsl) {
    	var h = hsl[0] / 360;
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var t1;
    	var t2;
    	var t3;
    	var rgb;
    	var val;

    	if (s === 0) {
    		val = l * 255;
    		return [val, val, val];
    	}

    	if (l < 0.5) {
    		t2 = l * (1 + s);
    	} else {
    		t2 = l + s - l * s;
    	}

    	t1 = 2 * l - t2;

    	rgb = [0, 0, 0];
    	for (var i = 0; i < 3; i++) {
    		t3 = h + 1 / 3 * -(i - 1);
    		if (t3 < 0) {
    			t3++;
    		}
    		if (t3 > 1) {
    			t3--;
    		}

    		if (6 * t3 < 1) {
    			val = t1 + (t2 - t1) * 6 * t3;
    		} else if (2 * t3 < 1) {
    			val = t2;
    		} else if (3 * t3 < 2) {
    			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    		} else {
    			val = t1;
    		}

    		rgb[i] = val * 255;
    	}

    	return rgb;
    };

    convert.hsl.hsv = function (hsl) {
    	var h = hsl[0];
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var smin = s;
    	var lmin = Math.max(l, 0.01);
    	var sv;
    	var v;

    	l *= 2;
    	s *= (l <= 1) ? l : 2 - l;
    	smin *= lmin <= 1 ? lmin : 2 - lmin;
    	v = (l + s) / 2;
    	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

    	return [h, sv * 100, v * 100];
    };

    convert.hsv.rgb = function (hsv) {
    	var h = hsv[0] / 60;
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var hi = Math.floor(h) % 6;

    	var f = h - Math.floor(h);
    	var p = 255 * v * (1 - s);
    	var q = 255 * v * (1 - (s * f));
    	var t = 255 * v * (1 - (s * (1 - f)));
    	v *= 255;

    	switch (hi) {
    		case 0:
    			return [v, t, p];
    		case 1:
    			return [q, v, p];
    		case 2:
    			return [p, v, t];
    		case 3:
    			return [p, q, v];
    		case 4:
    			return [t, p, v];
    		case 5:
    			return [v, p, q];
    	}
    };

    convert.hsv.hsl = function (hsv) {
    	var h = hsv[0];
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var vmin = Math.max(v, 0.01);
    	var lmin;
    	var sl;
    	var l;

    	l = (2 - s) * v;
    	lmin = (2 - s) * vmin;
    	sl = s * vmin;
    	sl /= (lmin <= 1) ? lmin : 2 - lmin;
    	sl = sl || 0;
    	l /= 2;

    	return [h, sl * 100, l * 100];
    };

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    convert.hwb.rgb = function (hwb) {
    	var h = hwb[0] / 360;
    	var wh = hwb[1] / 100;
    	var bl = hwb[2] / 100;
    	var ratio = wh + bl;
    	var i;
    	var v;
    	var f;
    	var n;

    	// wh + bl cant be > 1
    	if (ratio > 1) {
    		wh /= ratio;
    		bl /= ratio;
    	}

    	i = Math.floor(6 * h);
    	v = 1 - bl;
    	f = 6 * h - i;

    	if ((i & 0x01) !== 0) {
    		f = 1 - f;
    	}

    	n = wh + f * (v - wh); // linear interpolation

    	var r;
    	var g;
    	var b;
    	switch (i) {
    		default:
    		case 6:
    		case 0: r = v; g = n; b = wh; break;
    		case 1: r = n; g = v; b = wh; break;
    		case 2: r = wh; g = v; b = n; break;
    		case 3: r = wh; g = n; b = v; break;
    		case 4: r = n; g = wh; b = v; break;
    		case 5: r = v; g = wh; b = n; break;
    	}

    	return [r * 255, g * 255, b * 255];
    };

    convert.cmyk.rgb = function (cmyk) {
    	var c = cmyk[0] / 100;
    	var m = cmyk[1] / 100;
    	var y = cmyk[2] / 100;
    	var k = cmyk[3] / 100;
    	var r;
    	var g;
    	var b;

    	r = 1 - Math.min(1, c * (1 - k) + k);
    	g = 1 - Math.min(1, m * (1 - k) + k);
    	b = 1 - Math.min(1, y * (1 - k) + k);

    	return [r * 255, g * 255, b * 255];
    };

    convert.xyz.rgb = function (xyz) {
    	var x = xyz[0] / 100;
    	var y = xyz[1] / 100;
    	var z = xyz[2] / 100;
    	var r;
    	var g;
    	var b;

    	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
    	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
    	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

    	// assume sRGB
    	r = r > 0.0031308
    		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    		: r * 12.92;

    	g = g > 0.0031308
    		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    		: g * 12.92;

    	b = b > 0.0031308
    		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    		: b * 12.92;

    	r = Math.min(Math.max(0, r), 1);
    	g = Math.min(Math.max(0, g), 1);
    	b = Math.min(Math.max(0, b), 1);

    	return [r * 255, g * 255, b * 255];
    };

    convert.xyz.lab = function (xyz) {
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert.lab.xyz = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var x;
    	var y;
    	var z;

    	y = (l + 16) / 116;
    	x = a / 500 + y;
    	z = y - b / 200;

    	var y2 = Math.pow(y, 3);
    	var x2 = Math.pow(x, 3);
    	var z2 = Math.pow(z, 3);
    	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

    	x *= 95.047;
    	y *= 100;
    	z *= 108.883;

    	return [x, y, z];
    };

    convert.lab.lch = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var hr;
    	var h;
    	var c;

    	hr = Math.atan2(b, a);
    	h = hr * 360 / 2 / Math.PI;

    	if (h < 0) {
    		h += 360;
    	}

    	c = Math.sqrt(a * a + b * b);

    	return [l, c, h];
    };

    convert.lch.lab = function (lch) {
    	var l = lch[0];
    	var c = lch[1];
    	var h = lch[2];
    	var a;
    	var b;
    	var hr;

    	hr = h / 360 * 2 * Math.PI;
    	a = c * Math.cos(hr);
    	b = c * Math.sin(hr);

    	return [l, a, b];
    };

    convert.rgb.ansi16 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];
    	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

    	value = Math.round(value / 50);

    	if (value === 0) {
    		return 30;
    	}

    	var ansi = 30
    		+ ((Math.round(b / 255) << 2)
    		| (Math.round(g / 255) << 1)
    		| Math.round(r / 255));

    	if (value === 2) {
    		ansi += 60;
    	}

    	return ansi;
    };

    convert.hsv.ansi16 = function (args) {
    	// optimization here; we already know the value and don't need to get
    	// it converted for us.
    	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };

    convert.rgb.ansi256 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];

    	// we use the extended greyscale palette here, with the exception of
    	// black and white. normal palette only has 4 greyscale shades.
    	if (r === g && g === b) {
    		if (r < 8) {
    			return 16;
    		}

    		if (r > 248) {
    			return 231;
    		}

    		return Math.round(((r - 8) / 247) * 24) + 232;
    	}

    	var ansi = 16
    		+ (36 * Math.round(r / 255 * 5))
    		+ (6 * Math.round(g / 255 * 5))
    		+ Math.round(b / 255 * 5);

    	return ansi;
    };

    convert.ansi16.rgb = function (args) {
    	var color = args % 10;

    	// handle greyscale
    	if (color === 0 || color === 7) {
    		if (args > 50) {
    			color += 3.5;
    		}

    		color = color / 10.5 * 255;

    		return [color, color, color];
    	}

    	var mult = (~~(args > 50) + 1) * 0.5;
    	var r = ((color & 1) * mult) * 255;
    	var g = (((color >> 1) & 1) * mult) * 255;
    	var b = (((color >> 2) & 1) * mult) * 255;

    	return [r, g, b];
    };

    convert.ansi256.rgb = function (args) {
    	// handle greyscale
    	if (args >= 232) {
    		var c = (args - 232) * 10 + 8;
    		return [c, c, c];
    	}

    	args -= 16;

    	var rem;
    	var r = Math.floor(args / 36) / 5 * 255;
    	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    	var b = (rem % 6) / 5 * 255;

    	return [r, g, b];
    };

    convert.rgb.hex = function (args) {
    	var integer = ((Math.round(args[0]) & 0xFF) << 16)
    		+ ((Math.round(args[1]) & 0xFF) << 8)
    		+ (Math.round(args[2]) & 0xFF);

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert.hex.rgb = function (args) {
    	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    	if (!match) {
    		return [0, 0, 0];
    	}

    	var colorString = match[0];

    	if (match[0].length === 3) {
    		colorString = colorString.split('').map(function (char) {
    			return char + char;
    		}).join('');
    	}

    	var integer = parseInt(colorString, 16);
    	var r = (integer >> 16) & 0xFF;
    	var g = (integer >> 8) & 0xFF;
    	var b = integer & 0xFF;

    	return [r, g, b];
    };

    convert.rgb.hcg = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var max = Math.max(Math.max(r, g), b);
    	var min = Math.min(Math.min(r, g), b);
    	var chroma = (max - min);
    	var grayscale;
    	var hue;

    	if (chroma < 1) {
    		grayscale = min / (1 - chroma);
    	} else {
    		grayscale = 0;
    	}

    	if (chroma <= 0) {
    		hue = 0;
    	} else
    	if (max === r) {
    		hue = ((g - b) / chroma) % 6;
    	} else
    	if (max === g) {
    		hue = 2 + (b - r) / chroma;
    	} else {
    		hue = 4 + (r - g) / chroma + 4;
    	}

    	hue /= 6;
    	hue %= 1;

    	return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert.hsl.hcg = function (hsl) {
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var c = 1;
    	var f = 0;

    	if (l < 0.5) {
    		c = 2.0 * s * l;
    	} else {
    		c = 2.0 * s * (1.0 - l);
    	}

    	if (c < 1.0) {
    		f = (l - 0.5 * c) / (1.0 - c);
    	}

    	return [hsl[0], c * 100, f * 100];
    };

    convert.hsv.hcg = function (hsv) {
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;

    	var c = s * v;
    	var f = 0;

    	if (c < 1.0) {
    		f = (v - c) / (1 - c);
    	}

    	return [hsv[0], c * 100, f * 100];
    };

    convert.hcg.rgb = function (hcg) {
    	var h = hcg[0] / 360;
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	if (c === 0.0) {
    		return [g * 255, g * 255, g * 255];
    	}

    	var pure = [0, 0, 0];
    	var hi = (h % 1) * 6;
    	var v = hi % 1;
    	var w = 1 - v;
    	var mg = 0;

    	switch (Math.floor(hi)) {
    		case 0:
    			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
    		case 1:
    			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
    		case 2:
    			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
    		case 3:
    			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
    		case 4:
    			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
    		default:
    			pure[0] = 1; pure[1] = 0; pure[2] = w;
    	}

    	mg = (1.0 - c) * g;

    	return [
    		(c * pure[0] + mg) * 255,
    		(c * pure[1] + mg) * 255,
    		(c * pure[2] + mg) * 255
    	];
    };

    convert.hcg.hsv = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var v = c + g * (1.0 - c);
    	var f = 0;

    	if (v > 0.0) {
    		f = c / v;
    	}

    	return [hcg[0], f * 100, v * 100];
    };

    convert.hcg.hsl = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var l = g * (1.0 - c) + 0.5 * c;
    	var s = 0;

    	if (l > 0.0 && l < 0.5) {
    		s = c / (2 * l);
    	} else
    	if (l >= 0.5 && l < 1.0) {
    		s = c / (2 * (1 - l));
    	}

    	return [hcg[0], s * 100, l * 100];
    };

    convert.hcg.hwb = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;
    	var v = c + g * (1.0 - c);
    	return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert.hwb.hcg = function (hwb) {
    	var w = hwb[1] / 100;
    	var b = hwb[2] / 100;
    	var v = 1 - b;
    	var c = v - w;
    	var g = 0;

    	if (c < 1) {
    		g = (v - c) / (1 - c);
    	}

    	return [hwb[0], c * 100, g * 100];
    };

    convert.apple.rgb = function (apple) {
    	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
    };

    convert.rgb.apple = function (rgb) {
    	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
    };

    convert.gray.rgb = function (args) {
    	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert.gray.hsl = convert.gray.hsv = function (args) {
    	return [0, 0, args[0]];
    };

    convert.gray.hwb = function (gray) {
    	return [0, 100, gray[0]];
    };

    convert.gray.cmyk = function (gray) {
    	return [0, 0, 0, gray[0]];
    };

    convert.gray.lab = function (gray) {
    	return [gray[0], 0, 0];
    };

    convert.gray.hex = function (gray) {
    	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    	var integer = (val << 16) + (val << 8) + val;

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert.rgb.gray = function (rgb) {
    	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    	return [val / 255 * 100];
    };
    });
    conversions.rgb;
    conversions.hsl;
    conversions.hsv;
    conversions.hwb;
    conversions.cmyk;
    conversions.xyz;
    conversions.lab;
    conversions.lch;
    conversions.hex;
    conversions.keyword;
    conversions.ansi16;
    conversions.ansi256;
    conversions.hcg;
    conversions.apple;
    conversions.gray;

    /*
    	this function routes a model to all other models.

    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).

    	conversions that are not possible simply are not included.
    */

    function buildGraph() {
    	var graph = {};
    	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
    	var models = Object.keys(conversions);

    	for (var len = models.length, i = 0; i < len; i++) {
    		graph[models[i]] = {
    			// http://jsperf.com/1-vs-infinity
    			// micro-opt, but this is simple.
    			distance: -1,
    			parent: null
    		};
    	}

    	return graph;
    }

    // https://en.wikipedia.org/wiki/Breadth-first_search
    function deriveBFS(fromModel) {
    	var graph = buildGraph();
    	var queue = [fromModel]; // unshift -> queue -> pop

    	graph[fromModel].distance = 0;

    	while (queue.length) {
    		var current = queue.pop();
    		var adjacents = Object.keys(conversions[current]);

    		for (var len = adjacents.length, i = 0; i < len; i++) {
    			var adjacent = adjacents[i];
    			var node = graph[adjacent];

    			if (node.distance === -1) {
    				node.distance = graph[current].distance + 1;
    				node.parent = current;
    				queue.unshift(adjacent);
    			}
    		}
    	}

    	return graph;
    }

    function link(from, to) {
    	return function (args) {
    		return to(from(args));
    	};
    }

    function wrapConversion(toModel, graph) {
    	var path = [graph[toModel].parent, toModel];
    	var fn = conversions[graph[toModel].parent][toModel];

    	var cur = graph[toModel].parent;
    	while (graph[cur].parent) {
    		path.unshift(graph[cur].parent);
    		fn = link(conversions[graph[cur].parent][cur], fn);
    		cur = graph[cur].parent;
    	}

    	fn.conversion = path;
    	return fn;
    }

    var route = function (fromModel) {
    	var graph = deriveBFS(fromModel);
    	var conversion = {};

    	var models = Object.keys(graph);
    	for (var len = models.length, i = 0; i < len; i++) {
    		var toModel = models[i];
    		var node = graph[toModel];

    		if (node.parent === null) {
    			// no possible conversion, or this node is the source model.
    			continue;
    		}

    		conversion[toModel] = wrapConversion(toModel, graph);
    	}

    	return conversion;
    };

    var convert = {};

    var models = Object.keys(conversions);

    function wrapRaw(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		return fn(args);
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    function wrapRounded(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		var result = fn(args);

    		// we're assuming the result is an array here.
    		// see notice in conversions.js; don't use box types
    		// in conversion functions.
    		if (typeof result === 'object') {
    			for (var len = result.length, i = 0; i < len; i++) {
    				result[i] = Math.round(result[i]);
    			}
    		}

    		return result;
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    models.forEach(function (fromModel) {
    	convert[fromModel] = {};

    	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
    	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

    	var routes = route(fromModel);
    	var routeModels = Object.keys(routes);

    	routeModels.forEach(function (toModel) {
    		var fn = routes[toModel];

    		convert[fromModel][toModel] = wrapRounded(fn);
    		convert[fromModel][toModel].raw = wrapRaw(fn);
    	});
    });

    var colorConvert = convert;

    var colorName$1 = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    /* MIT license */


    var colorString = {
       getRgba: getRgba,
       getHsla: getHsla,
       getRgb: getRgb,
       getHsl: getHsl,
       getHwb: getHwb,
       getAlpha: getAlpha,

       hexString: hexString,
       rgbString: rgbString,
       rgbaString: rgbaString,
       percentString: percentString,
       percentaString: percentaString,
       hslString: hslString,
       hslaString: hslaString,
       hwbString: hwbString,
       keyword: keyword
    };

    function getRgba(string) {
       if (!string) {
          return;
       }
       var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
           hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
           rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           keyword = /(\w+)/;

       var rgb = [0, 0, 0],
           a = 1,
           match = string.match(abbr),
           hexAlpha = "";
       if (match) {
          match = match[1];
          hexAlpha = match[3];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i] + match[i], 16);
          }
          if (hexAlpha) {
             a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
          }
       }
       else if (match = string.match(hex)) {
          hexAlpha = match[2];
          match = match[1];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
          }
          if (hexAlpha) {
             a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
          }
       }
       else if (match = string.match(rgba)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i + 1]);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(per)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(keyword)) {
          if (match[1] == "transparent") {
             return [0, 0, 0, 0];
          }
          rgb = colorName$1[match[1]];
          if (!rgb) {
             return;
          }
       }

       for (var i = 0; i < rgb.length; i++) {
          rgb[i] = scale(rgb[i], 0, 255);
       }
       if (!a && a != 0) {
          a = 1;
       }
       else {
          a = scale(a, 0, 1);
       }
       rgb[3] = a;
       return rgb;
    }

    function getHsla(string) {
       if (!string) {
          return;
       }
       var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hsl);
       if (match) {
          var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              s = scale(parseFloat(match[2]), 0, 100),
              l = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, s, l, a];
       }
    }

    function getHwb(string) {
       if (!string) {
          return;
       }
       var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hwb);
       if (match) {
        var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              w = scale(parseFloat(match[2]), 0, 100),
              b = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, w, b, a];
       }
    }

    function getRgb(string) {
       var rgba = getRgba(string);
       return rgba && rgba.slice(0, 3);
    }

    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }

    function getAlpha(string) {
       var vals = getRgba(string);
       if (vals) {
          return vals[3];
       }
       else if (vals = getHsla(string)) {
          return vals[3];
       }
       else if (vals = getHwb(string)) {
          return vals[3];
       }
    }

    // generators
    function hexString(rgba, a) {
       var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
       return "#" + hexDouble(rgba[0]) 
                  + hexDouble(rgba[1])
                  + hexDouble(rgba[2])
                  + (
                     (a >= 0 && a < 1)
                     ? hexDouble(Math.round(a * 255))
                     : ""
                  );
    }

    function rgbString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return rgbaString(rgba, alpha);
       }
       return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }

    function rgbaString(rgba, alpha) {
       if (alpha === undefined) {
          alpha = (rgba[3] !== undefined ? rgba[3] : 1);
       }
       return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
               + ", " + alpha + ")";
    }

    function percentString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return percentaString(rgba, alpha);
       }
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);

       return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }

    function percentaString(rgba, alpha) {
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);
       return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }

    function hslString(hsla, alpha) {
       if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
          return hslaString(hsla, alpha);
       }
       return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }

    function hslaString(hsla, alpha) {
       if (alpha === undefined) {
          alpha = (hsla[3] !== undefined ? hsla[3] : 1);
       }
       return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
               + alpha + ")";
    }

    // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)
    function hwbString(hwb, alpha) {
       if (alpha === undefined) {
          alpha = (hwb[3] !== undefined ? hwb[3] : 1);
       }
       return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
               + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
    }

    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    }

    // helpers
    function scale(num, min, max) {
       return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return (str.length < 2) ? "0" + str : str;
    }


    //create a list of reverse color names
    var reverseNames = {};
    for (var name in colorName$1) {
       reverseNames[colorName$1[name]] = name;
    }

    /* MIT license */



    var Color = function (obj) {
    	if (obj instanceof Color) {
    		return obj;
    	}
    	if (!(this instanceof Color)) {
    		return new Color(obj);
    	}

    	this.valid = false;
    	this.values = {
    		rgb: [0, 0, 0],
    		hsl: [0, 0, 0],
    		hsv: [0, 0, 0],
    		hwb: [0, 0, 0],
    		cmyk: [0, 0, 0, 0],
    		alpha: 1
    	};

    	// parse Color() argument
    	var vals;
    	if (typeof obj === 'string') {
    		vals = colorString.getRgba(obj);
    		if (vals) {
    			this.setValues('rgb', vals);
    		} else if (vals = colorString.getHsla(obj)) {
    			this.setValues('hsl', vals);
    		} else if (vals = colorString.getHwb(obj)) {
    			this.setValues('hwb', vals);
    		}
    	} else if (typeof obj === 'object') {
    		vals = obj;
    		if (vals.r !== undefined || vals.red !== undefined) {
    			this.setValues('rgb', vals);
    		} else if (vals.l !== undefined || vals.lightness !== undefined) {
    			this.setValues('hsl', vals);
    		} else if (vals.v !== undefined || vals.value !== undefined) {
    			this.setValues('hsv', vals);
    		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
    			this.setValues('hwb', vals);
    		} else if (vals.c !== undefined || vals.cyan !== undefined) {
    			this.setValues('cmyk', vals);
    		}
    	}
    };

    Color.prototype = {
    	isValid: function () {
    		return this.valid;
    	},
    	rgb: function () {
    		return this.setSpace('rgb', arguments);
    	},
    	hsl: function () {
    		return this.setSpace('hsl', arguments);
    	},
    	hsv: function () {
    		return this.setSpace('hsv', arguments);
    	},
    	hwb: function () {
    		return this.setSpace('hwb', arguments);
    	},
    	cmyk: function () {
    		return this.setSpace('cmyk', arguments);
    	},

    	rgbArray: function () {
    		return this.values.rgb;
    	},
    	hslArray: function () {
    		return this.values.hsl;
    	},
    	hsvArray: function () {
    		return this.values.hsv;
    	},
    	hwbArray: function () {
    		var values = this.values;
    		if (values.alpha !== 1) {
    			return values.hwb.concat([values.alpha]);
    		}
    		return values.hwb;
    	},
    	cmykArray: function () {
    		return this.values.cmyk;
    	},
    	rgbaArray: function () {
    		var values = this.values;
    		return values.rgb.concat([values.alpha]);
    	},
    	hslaArray: function () {
    		var values = this.values;
    		return values.hsl.concat([values.alpha]);
    	},
    	alpha: function (val) {
    		if (val === undefined) {
    			return this.values.alpha;
    		}
    		this.setValues('alpha', val);
    		return this;
    	},

    	red: function (val) {
    		return this.setChannel('rgb', 0, val);
    	},
    	green: function (val) {
    		return this.setChannel('rgb', 1, val);
    	},
    	blue: function (val) {
    		return this.setChannel('rgb', 2, val);
    	},
    	hue: function (val) {
    		if (val) {
    			val %= 360;
    			val = val < 0 ? 360 + val : val;
    		}
    		return this.setChannel('hsl', 0, val);
    	},
    	saturation: function (val) {
    		return this.setChannel('hsl', 1, val);
    	},
    	lightness: function (val) {
    		return this.setChannel('hsl', 2, val);
    	},
    	saturationv: function (val) {
    		return this.setChannel('hsv', 1, val);
    	},
    	whiteness: function (val) {
    		return this.setChannel('hwb', 1, val);
    	},
    	blackness: function (val) {
    		return this.setChannel('hwb', 2, val);
    	},
    	value: function (val) {
    		return this.setChannel('hsv', 2, val);
    	},
    	cyan: function (val) {
    		return this.setChannel('cmyk', 0, val);
    	},
    	magenta: function (val) {
    		return this.setChannel('cmyk', 1, val);
    	},
    	yellow: function (val) {
    		return this.setChannel('cmyk', 2, val);
    	},
    	black: function (val) {
    		return this.setChannel('cmyk', 3, val);
    	},

    	hexString: function () {
    		return colorString.hexString(this.values.rgb);
    	},
    	rgbString: function () {
    		return colorString.rgbString(this.values.rgb, this.values.alpha);
    	},
    	rgbaString: function () {
    		return colorString.rgbaString(this.values.rgb, this.values.alpha);
    	},
    	percentString: function () {
    		return colorString.percentString(this.values.rgb, this.values.alpha);
    	},
    	hslString: function () {
    		return colorString.hslString(this.values.hsl, this.values.alpha);
    	},
    	hslaString: function () {
    		return colorString.hslaString(this.values.hsl, this.values.alpha);
    	},
    	hwbString: function () {
    		return colorString.hwbString(this.values.hwb, this.values.alpha);
    	},
    	keyword: function () {
    		return colorString.keyword(this.values.rgb, this.values.alpha);
    	},

    	rgbNumber: function () {
    		var rgb = this.values.rgb;
    		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
    	},

    	luminosity: function () {
    		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
    		var rgb = this.values.rgb;
    		var lum = [];
    		for (var i = 0; i < rgb.length; i++) {
    			var chan = rgb[i] / 255;
    			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
    		}
    		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    	},

    	contrast: function (color2) {
    		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    		var lum1 = this.luminosity();
    		var lum2 = color2.luminosity();
    		if (lum1 > lum2) {
    			return (lum1 + 0.05) / (lum2 + 0.05);
    		}
    		return (lum2 + 0.05) / (lum1 + 0.05);
    	},

    	level: function (color2) {
    		var contrastRatio = this.contrast(color2);
    		if (contrastRatio >= 7.1) {
    			return 'AAA';
    		}

    		return (contrastRatio >= 4.5) ? 'AA' : '';
    	},

    	dark: function () {
    		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
    		var rgb = this.values.rgb;
    		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    		return yiq < 128;
    	},

    	light: function () {
    		return !this.dark();
    	},

    	negate: function () {
    		var rgb = [];
    		for (var i = 0; i < 3; i++) {
    			rgb[i] = 255 - this.values.rgb[i];
    		}
    		this.setValues('rgb', rgb);
    		return this;
    	},

    	lighten: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[2] += hsl[2] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	darken: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[2] -= hsl[2] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	saturate: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[1] += hsl[1] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	desaturate: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[1] -= hsl[1] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	whiten: function (ratio) {
    		var hwb = this.values.hwb;
    		hwb[1] += hwb[1] * ratio;
    		this.setValues('hwb', hwb);
    		return this;
    	},

    	blacken: function (ratio) {
    		var hwb = this.values.hwb;
    		hwb[2] += hwb[2] * ratio;
    		this.setValues('hwb', hwb);
    		return this;
    	},

    	greyscale: function () {
    		var rgb = this.values.rgb;
    		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    		this.setValues('rgb', [val, val, val]);
    		return this;
    	},

    	clearer: function (ratio) {
    		var alpha = this.values.alpha;
    		this.setValues('alpha', alpha - (alpha * ratio));
    		return this;
    	},

    	opaquer: function (ratio) {
    		var alpha = this.values.alpha;
    		this.setValues('alpha', alpha + (alpha * ratio));
    		return this;
    	},

    	rotate: function (degrees) {
    		var hsl = this.values.hsl;
    		var hue = (hsl[0] + degrees) % 360;
    		hsl[0] = hue < 0 ? 360 + hue : hue;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	/**
    	 * Ported from sass implementation in C
    	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
    	 */
    	mix: function (mixinColor, weight) {
    		var color1 = this;
    		var color2 = mixinColor;
    		var p = weight === undefined ? 0.5 : weight;

    		var w = 2 * p - 1;
    		var a = color1.alpha() - color2.alpha();

    		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    		var w2 = 1 - w1;

    		return this
    			.rgb(
    				w1 * color1.red() + w2 * color2.red(),
    				w1 * color1.green() + w2 * color2.green(),
    				w1 * color1.blue() + w2 * color2.blue()
    			)
    			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
    	},

    	toJSON: function () {
    		return this.rgb();
    	},

    	clone: function () {
    		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
    		// making the final build way to big to embed in Chart.js. So let's do it manually,
    		// assuming that values to clone are 1 dimension arrays containing only numbers,
    		// except 'alpha' which is a number.
    		var result = new Color();
    		var source = this.values;
    		var target = result.values;
    		var value, type;

    		for (var prop in source) {
    			if (source.hasOwnProperty(prop)) {
    				value = source[prop];
    				type = ({}).toString.call(value);
    				if (type === '[object Array]') {
    					target[prop] = value.slice(0);
    				} else if (type === '[object Number]') {
    					target[prop] = value;
    				} else {
    					console.error('unexpected color value:', value);
    				}
    			}
    		}

    		return result;
    	}
    };

    Color.prototype.spaces = {
    	rgb: ['red', 'green', 'blue'],
    	hsl: ['hue', 'saturation', 'lightness'],
    	hsv: ['hue', 'saturation', 'value'],
    	hwb: ['hue', 'whiteness', 'blackness'],
    	cmyk: ['cyan', 'magenta', 'yellow', 'black']
    };

    Color.prototype.maxes = {
    	rgb: [255, 255, 255],
    	hsl: [360, 100, 100],
    	hsv: [360, 100, 100],
    	hwb: [360, 100, 100],
    	cmyk: [100, 100, 100, 100]
    };

    Color.prototype.getValues = function (space) {
    	var values = this.values;
    	var vals = {};

    	for (var i = 0; i < space.length; i++) {
    		vals[space.charAt(i)] = values[space][i];
    	}

    	if (values.alpha !== 1) {
    		vals.a = values.alpha;
    	}

    	// {r: 255, g: 255, b: 255, a: 0.4}
    	return vals;
    };

    Color.prototype.setValues = function (space, vals) {
    	var values = this.values;
    	var spaces = this.spaces;
    	var maxes = this.maxes;
    	var alpha = 1;
    	var i;

    	this.valid = true;

    	if (space === 'alpha') {
    		alpha = vals;
    	} else if (vals.length) {
    		// [10, 10, 10]
    		values[space] = vals.slice(0, space.length);
    		alpha = vals[space.length];
    	} else if (vals[space.charAt(0)] !== undefined) {
    		// {r: 10, g: 10, b: 10}
    		for (i = 0; i < space.length; i++) {
    			values[space][i] = vals[space.charAt(i)];
    		}

    		alpha = vals.a;
    	} else if (vals[spaces[space][0]] !== undefined) {
    		// {red: 10, green: 10, blue: 10}
    		var chans = spaces[space];

    		for (i = 0; i < space.length; i++) {
    			values[space][i] = vals[chans[i]];
    		}

    		alpha = vals.alpha;
    	}

    	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

    	if (space === 'alpha') {
    		return false;
    	}

    	var capped;

    	// cap values of the space prior converting all values
    	for (i = 0; i < space.length; i++) {
    		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
    		values[space][i] = Math.round(capped);
    	}

    	// convert to all the other color spaces
    	for (var sname in spaces) {
    		if (sname !== space) {
    			values[sname] = colorConvert[space][sname](values[space]);
    		}
    	}

    	return true;
    };

    Color.prototype.setSpace = function (space, args) {
    	var vals = args[0];

    	if (vals === undefined) {
    		// color.rgb()
    		return this.getValues(space);
    	}

    	// color.rgb(10, 10, 10)
    	if (typeof vals === 'number') {
    		vals = Array.prototype.slice.call(args);
    	}

    	this.setValues(space, vals);
    	return this;
    };

    Color.prototype.setChannel = function (space, index, val) {
    	var svalues = this.values[space];
    	if (val === undefined) {
    		// color.red()
    		return svalues[index];
    	} else if (val === svalues[index]) {
    		// color.red(color.red())
    		return this;
    	}

    	// color.red(100)
    	svalues[index] = val;
    	this.setValues(space, svalues);

    	return this;
    };

    if (typeof window !== 'undefined') {
    	window.Color = Color;
    }

    var chartjsColor = Color;

    function isValidKey(key) {
    	return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
    }

    /**
     * @namespace Chart.helpers
     */
    var helpers = {
    	/**
    	 * An empty function that can be used, for example, for optional callback.
    	 */
    	noop: function() {},

    	/**
    	 * Returns a unique id, sequentially generated from a global variable.
    	 * @returns {number}
    	 * @function
    	 */
    	uid: (function() {
    		var id = 0;
    		return function() {
    			return id++;
    		};
    	}()),

    	/**
    	 * Returns true if `value` is neither null nor undefined, else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @since 2.7.0
    	 */
    	isNullOrUndef: function(value) {
    		return value === null || typeof value === 'undefined';
    	},

    	/**
    	 * Returns true if `value` is an array (including typed arrays), else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @function
    	 */
    	isArray: function(value) {
    		if (Array.isArray && Array.isArray(value)) {
    			return true;
    		}
    		var type = Object.prototype.toString.call(value);
    		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
    			return true;
    		}
    		return false;
    	},

    	/**
    	 * Returns true if `value` is an object (excluding null), else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @since 2.7.0
    	 */
    	isObject: function(value) {
    		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
    	},

    	/**
    	 * Returns true if `value` is a finite number, else returns false
    	 * @param {*} value  - The value to test.
    	 * @returns {boolean}
    	 */
    	isFinite: function(value) {
    		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
    	},

    	/**
    	 * Returns `value` if defined, else returns `defaultValue`.
    	 * @param {*} value - The value to return if defined.
    	 * @param {*} defaultValue - The value to return if `value` is undefined.
    	 * @returns {*}
    	 */
    	valueOrDefault: function(value, defaultValue) {
    		return typeof value === 'undefined' ? defaultValue : value;
    	},

    	/**
    	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
    	 * @param {Array} value - The array to lookup for value at `index`.
    	 * @param {number} index - The index in `value` to lookup for value.
    	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
    	 * @returns {*}
    	 */
    	valueAtIndexOrDefault: function(value, index, defaultValue) {
    		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
    	},

    	/**
    	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
    	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
    	 * @param {function} fn - The function to call.
    	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
    	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
    	 * @returns {*}
    	 */
    	callback: function(fn, args, thisArg) {
    		if (fn && typeof fn.call === 'function') {
    			return fn.apply(thisArg, args);
    		}
    	},

    	/**
    	 * Note(SB) for performance sake, this method should only be used when loopable type
    	 * is unknown or in none intensive code (not called often and small loopable). Else
    	 * it's preferable to use a regular for() loop and save extra function calls.
    	 * @param {object|Array} loopable - The object or array to be iterated.
    	 * @param {function} fn - The function to call for each item.
    	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
    	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
    	 */
    	each: function(loopable, fn, thisArg, reverse) {
    		var i, len, keys;
    		if (helpers.isArray(loopable)) {
    			len = loopable.length;
    			if (reverse) {
    				for (i = len - 1; i >= 0; i--) {
    					fn.call(thisArg, loopable[i], i);
    				}
    			} else {
    				for (i = 0; i < len; i++) {
    					fn.call(thisArg, loopable[i], i);
    				}
    			}
    		} else if (helpers.isObject(loopable)) {
    			keys = Object.keys(loopable);
    			len = keys.length;
    			for (i = 0; i < len; i++) {
    				fn.call(thisArg, loopable[keys[i]], keys[i]);
    			}
    		}
    	},

    	/**
    	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
    	 * @see https://stackoverflow.com/a/14853974
    	 * @param {Array} a0 - The array to compare
    	 * @param {Array} a1 - The array to compare
    	 * @returns {boolean}
    	 */
    	arrayEquals: function(a0, a1) {
    		var i, ilen, v0, v1;

    		if (!a0 || !a1 || a0.length !== a1.length) {
    			return false;
    		}

    		for (i = 0, ilen = a0.length; i < ilen; ++i) {
    			v0 = a0[i];
    			v1 = a1[i];

    			if (v0 instanceof Array && v1 instanceof Array) {
    				if (!helpers.arrayEquals(v0, v1)) {
    					return false;
    				}
    			} else if (v0 !== v1) {
    				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
    				return false;
    			}
    		}

    		return true;
    	},

    	/**
    	 * Returns a deep copy of `source` without keeping references on objects and arrays.
    	 * @param {*} source - The value to clone.
    	 * @returns {*}
    	 */
    	clone: function(source) {
    		if (helpers.isArray(source)) {
    			return source.map(helpers.clone);
    		}

    		if (helpers.isObject(source)) {
    			var target = Object.create(source);
    			var keys = Object.keys(source);
    			var klen = keys.length;
    			var k = 0;

    			for (; k < klen; ++k) {
    				target[keys[k]] = helpers.clone(source[keys[k]]);
    			}

    			return target;
    		}

    		return source;
    	},

    	/**
    	 * The default merger when Chart.helpers.merge is called without merger option.
    	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
    	 * @private
    	 */
    	_merger: function(key, target, source, options) {
    		if (!isValidKey(key)) {
    			// We want to ensure we do not copy prototypes over
    			// as this can pollute global namespaces
    			return;
    		}

    		var tval = target[key];
    		var sval = source[key];

    		if (helpers.isObject(tval) && helpers.isObject(sval)) {
    			helpers.merge(tval, sval, options);
    		} else {
    			target[key] = helpers.clone(sval);
    		}
    	},

    	/**
    	 * Merges source[key] in target[key] only if target[key] is undefined.
    	 * @private
    	 */
    	_mergerIf: function(key, target, source) {
    		if (!isValidKey(key)) {
    			// We want to ensure we do not copy prototypes over
    			// as this can pollute global namespaces
    			return;
    		}

    		var tval = target[key];
    		var sval = source[key];

    		if (helpers.isObject(tval) && helpers.isObject(sval)) {
    			helpers.mergeIf(tval, sval);
    		} else if (!target.hasOwnProperty(key)) {
    			target[key] = helpers.clone(sval);
    		}
    	},

    	/**
    	 * Recursively deep copies `source` properties into `target` with the given `options`.
    	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
    	 * @param {object} target - The target object in which all sources are merged into.
    	 * @param {object|object[]} source - Object(s) to merge into `target`.
    	 * @param {object} [options] - Merging options:
    	 * @param {function} [options.merger] - The merge method (key, target, source, options)
    	 * @returns {object} The `target` object.
    	 */
    	merge: function(target, source, options) {
    		var sources = helpers.isArray(source) ? source : [source];
    		var ilen = sources.length;
    		var merge, i, keys, klen, k;

    		if (!helpers.isObject(target)) {
    			return target;
    		}

    		options = options || {};
    		merge = options.merger || helpers._merger;

    		for (i = 0; i < ilen; ++i) {
    			source = sources[i];
    			if (!helpers.isObject(source)) {
    				continue;
    			}

    			keys = Object.keys(source);
    			for (k = 0, klen = keys.length; k < klen; ++k) {
    				merge(keys[k], target, source, options);
    			}
    		}

    		return target;
    	},

    	/**
    	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
    	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
    	 * @param {object} target - The target object in which all sources are merged into.
    	 * @param {object|object[]} source - Object(s) to merge into `target`.
    	 * @returns {object} The `target` object.
    	 */
    	mergeIf: function(target, source) {
    		return helpers.merge(target, source, {merger: helpers._mergerIf});
    	},

    	/**
    	 * Applies the contents of two or more objects together into the first object.
    	 * @param {object} target - The target object in which all objects are merged into.
    	 * @param {object} arg1 - Object containing additional properties to merge in target.
    	 * @param {object} argN - Additional objects containing properties to merge in target.
    	 * @returns {object} The `target` object.
    	 */
    	extend: Object.assign || function(target) {
    		return helpers.merge(target, [].slice.call(arguments, 1), {
    			merger: function(key, dst, src) {
    				dst[key] = src[key];
    			}
    		});
    	},

    	/**
    	 * Basic javascript inheritance based on the model created in Backbone.js
    	 */
    	inherits: function(extensions) {
    		var me = this;
    		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
    			return me.apply(this, arguments);
    		};

    		var Surrogate = function() {
    			this.constructor = ChartElement;
    		};

    		Surrogate.prototype = me.prototype;
    		ChartElement.prototype = new Surrogate();
    		ChartElement.extend = helpers.inherits;

    		if (extensions) {
    			helpers.extend(ChartElement.prototype, extensions);
    		}

    		ChartElement.__super__ = me.prototype;
    		return ChartElement;
    	},

    	_deprecated: function(scope, value, previous, current) {
    		if (value !== undefined) {
    			console.warn(scope + ': "' + previous +
    				'" is deprecated. Please use "' + current + '" instead');
    		}
    	}
    };

    var helpers_core = helpers;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.callback instead.
     * @function Chart.helpers.callCallback
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    helpers.callCallback = helpers.callback;

    /**
     * Provided for backward compatibility, use Array.prototype.indexOf instead.
     * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
     * @function Chart.helpers.indexOf
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.indexOf = function(array, item, fromIndex) {
    	return Array.prototype.indexOf.call(array, item, fromIndex);
    };

    /**
     * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
     * @function Chart.helpers.getValueOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueOrDefault = helpers.valueOrDefault;

    /**
     * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
     * @function Chart.helpers.getValueAtIndexOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

    /**
     * Easing functions adapted from Robert Penner's easing equations.
     * @namespace Chart.helpers.easingEffects
     * @see http://www.robertpenner.com/easing/
     */
    var effects = {
    	linear: function(t) {
    		return t;
    	},

    	easeInQuad: function(t) {
    		return t * t;
    	},

    	easeOutQuad: function(t) {
    		return -t * (t - 2);
    	},

    	easeInOutQuad: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t;
    		}
    		return -0.5 * ((--t) * (t - 2) - 1);
    	},

    	easeInCubic: function(t) {
    		return t * t * t;
    	},

    	easeOutCubic: function(t) {
    		return (t = t - 1) * t * t + 1;
    	},

    	easeInOutCubic: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t;
    		}
    		return 0.5 * ((t -= 2) * t * t + 2);
    	},

    	easeInQuart: function(t) {
    		return t * t * t * t;
    	},

    	easeOutQuart: function(t) {
    		return -((t = t - 1) * t * t * t - 1);
    	},

    	easeInOutQuart: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t * t;
    		}
    		return -0.5 * ((t -= 2) * t * t * t - 2);
    	},

    	easeInQuint: function(t) {
    		return t * t * t * t * t;
    	},

    	easeOutQuint: function(t) {
    		return (t = t - 1) * t * t * t * t + 1;
    	},

    	easeInOutQuint: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t * t * t;
    		}
    		return 0.5 * ((t -= 2) * t * t * t * t + 2);
    	},

    	easeInSine: function(t) {
    		return -Math.cos(t * (Math.PI / 2)) + 1;
    	},

    	easeOutSine: function(t) {
    		return Math.sin(t * (Math.PI / 2));
    	},

    	easeInOutSine: function(t) {
    		return -0.5 * (Math.cos(Math.PI * t) - 1);
    	},

    	easeInExpo: function(t) {
    		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
    	},

    	easeOutExpo: function(t) {
    		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
    	},

    	easeInOutExpo: function(t) {
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if ((t /= 0.5) < 1) {
    			return 0.5 * Math.pow(2, 10 * (t - 1));
    		}
    		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
    	},

    	easeInCirc: function(t) {
    		if (t >= 1) {
    			return t;
    		}
    		return -(Math.sqrt(1 - t * t) - 1);
    	},

    	easeOutCirc: function(t) {
    		return Math.sqrt(1 - (t = t - 1) * t);
    	},

    	easeInOutCirc: function(t) {
    		if ((t /= 0.5) < 1) {
    			return -0.5 * (Math.sqrt(1 - t * t) - 1);
    		}
    		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    	},

    	easeInElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.3;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    	},

    	easeOutElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.3;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
    	},

    	easeInOutElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if ((t /= 0.5) === 2) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.45;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		if (t < 1) {
    			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    		}
    		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
    	},
    	easeInBack: function(t) {
    		var s = 1.70158;
    		return t * t * ((s + 1) * t - s);
    	},

    	easeOutBack: function(t) {
    		var s = 1.70158;
    		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
    	},

    	easeInOutBack: function(t) {
    		var s = 1.70158;
    		if ((t /= 0.5) < 1) {
    			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
    		}
    		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
    	},

    	easeInBounce: function(t) {
    		return 1 - effects.easeOutBounce(1 - t);
    	},

    	easeOutBounce: function(t) {
    		if (t < (1 / 2.75)) {
    			return 7.5625 * t * t;
    		}
    		if (t < (2 / 2.75)) {
    			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
    		}
    		if (t < (2.5 / 2.75)) {
    			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
    		}
    		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
    	},

    	easeInOutBounce: function(t) {
    		if (t < 0.5) {
    			return effects.easeInBounce(t * 2) * 0.5;
    		}
    		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
    	}
    };

    var helpers_easing = {
    	effects: effects
    };

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
     * @function Chart.helpers.easingEffects
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.easingEffects = effects;

    var PI = Math.PI;
    var RAD_PER_DEG = PI / 180;
    var DOUBLE_PI = PI * 2;
    var HALF_PI = PI / 2;
    var QUARTER_PI = PI / 4;
    var TWO_THIRDS_PI = PI * 2 / 3;

    /**
     * @namespace Chart.helpers.canvas
     */
    var exports$1 = {
    	/**
    	 * Clears the entire canvas associated to the given `chart`.
    	 * @param {Chart} chart - The chart for which to clear the canvas.
    	 */
    	clear: function(chart) {
    		chart.ctx.clearRect(0, 0, chart.width, chart.height);
    	},

    	/**
    	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
    	 * given size (width, height) and the same `radius` for all corners.
    	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
    	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
    	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
    	 * @param {number} width - The rectangle's width.
    	 * @param {number} height - The rectangle's height.
    	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
    	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
    	 */
    	roundedRect: function(ctx, x, y, width, height, radius) {
    		if (radius) {
    			var r = Math.min(radius, height / 2, width / 2);
    			var left = x + r;
    			var top = y + r;
    			var right = x + width - r;
    			var bottom = y + height - r;

    			ctx.moveTo(x, top);
    			if (left < right && top < bottom) {
    				ctx.arc(left, top, r, -PI, -HALF_PI);
    				ctx.arc(right, top, r, -HALF_PI, 0);
    				ctx.arc(right, bottom, r, 0, HALF_PI);
    				ctx.arc(left, bottom, r, HALF_PI, PI);
    			} else if (left < right) {
    				ctx.moveTo(left, y);
    				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
    				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
    			} else if (top < bottom) {
    				ctx.arc(left, top, r, -PI, 0);
    				ctx.arc(left, bottom, r, 0, PI);
    			} else {
    				ctx.arc(left, top, r, -PI, PI);
    			}
    			ctx.closePath();
    			ctx.moveTo(x, y);
    		} else {
    			ctx.rect(x, y, width, height);
    		}
    	},

    	drawPoint: function(ctx, style, radius, x, y, rotation) {
    		var type, xOffset, yOffset, size, cornerRadius;
    		var rad = (rotation || 0) * RAD_PER_DEG;

    		if (style && typeof style === 'object') {
    			type = style.toString();
    			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
    				ctx.save();
    				ctx.translate(x, y);
    				ctx.rotate(rad);
    				ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
    				ctx.restore();
    				return;
    			}
    		}

    		if (isNaN(radius) || radius <= 0) {
    			return;
    		}

    		ctx.beginPath();

    		switch (style) {
    		// Default includes circle
    		default:
    			ctx.arc(x, y, radius, 0, DOUBLE_PI);
    			ctx.closePath();
    			break;
    		case 'triangle':
    			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			rad += TWO_THIRDS_PI;
    			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			rad += TWO_THIRDS_PI;
    			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			ctx.closePath();
    			break;
    		case 'rectRounded':
    			// NOTE: the rounded rect implementation changed to use `arc` instead of
    			// `quadraticCurveTo` since it generates better results when rect is
    			// almost a circle. 0.516 (instead of 0.5) produces results with visually
    			// closer proportion to the previous impl and it is inscribed in the
    			// circle with `radius`. For more details, see the following PRs:
    			// https://github.com/chartjs/Chart.js/issues/5597
    			// https://github.com/chartjs/Chart.js/issues/5858
    			cornerRadius = radius * 0.516;
    			size = radius - cornerRadius;
    			xOffset = Math.cos(rad + QUARTER_PI) * size;
    			yOffset = Math.sin(rad + QUARTER_PI) * size;
    			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
    			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
    			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
    			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
    			ctx.closePath();
    			break;
    		case 'rect':
    			if (!rotation) {
    				size = Math.SQRT1_2 * radius;
    				ctx.rect(x - size, y - size, 2 * size, 2 * size);
    				break;
    			}
    			rad += QUARTER_PI;
    			/* falls through */
    		case 'rectRot':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			ctx.closePath();
    			break;
    		case 'crossRot':
    			rad += QUARTER_PI;
    			/* falls through */
    		case 'cross':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			break;
    		case 'star':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			rad += QUARTER_PI;
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			break;
    		case 'line':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			break;
    		case 'dash':
    			ctx.moveTo(x, y);
    			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
    			break;
    		}

    		ctx.fill();
    		ctx.stroke();
    	},

    	/**
    	 * Returns true if the point is inside the rectangle
    	 * @param {object} point - The point to test
    	 * @param {object} area - The rectangle
    	 * @returns {boolean}
    	 * @private
    	 */
    	_isPointInArea: function(point, area) {
    		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

    		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
    			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
    	},

    	clipArea: function(ctx, area) {
    		ctx.save();
    		ctx.beginPath();
    		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    		ctx.clip();
    	},

    	unclipArea: function(ctx) {
    		ctx.restore();
    	},

    	lineTo: function(ctx, previous, target, flip) {
    		var stepped = target.steppedLine;
    		if (stepped) {
    			if (stepped === 'middle') {
    				var midpoint = (previous.x + target.x) / 2.0;
    				ctx.lineTo(midpoint, flip ? target.y : previous.y);
    				ctx.lineTo(midpoint, flip ? previous.y : target.y);
    			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
    				ctx.lineTo(previous.x, target.y);
    			} else {
    				ctx.lineTo(target.x, previous.y);
    			}
    			ctx.lineTo(target.x, target.y);
    			return;
    		}

    		if (!target.tension) {
    			ctx.lineTo(target.x, target.y);
    			return;
    		}

    		ctx.bezierCurveTo(
    			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
    			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
    			flip ? target.controlPointNextX : target.controlPointPreviousX,
    			flip ? target.controlPointNextY : target.controlPointPreviousY,
    			target.x,
    			target.y);
    	}
    };

    var helpers_canvas = exports$1;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
     * @namespace Chart.helpers.clear
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.clear = exports$1.clear;

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
     * @namespace Chart.helpers.drawRoundedRectangle
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.drawRoundedRectangle = function(ctx) {
    	ctx.beginPath();
    	exports$1.roundedRect.apply(exports$1, arguments);
    };

    var defaults = {
    	/**
    	 * @private
    	 */
    	_set: function(scope, values) {
    		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
    	}
    };

    // TODO(v3): remove 'global' from namespace.  all default are global and
    // there's inconsistency around which options are under 'global'
    defaults._set('global', {
    	defaultColor: 'rgba(0,0,0,0.1)',
    	defaultFontColor: '#666',
    	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
    	defaultFontSize: 12,
    	defaultFontStyle: 'normal',
    	defaultLineHeight: 1.2,
    	showLines: true
    });

    var core_defaults = defaults;

    var valueOrDefault = helpers_core.valueOrDefault;

    /**
     * Converts the given font object into a CSS font string.
     * @param {object} font - A font object.
     * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
     * @private
     */
    function toFontString(font) {
    	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
    		return null;
    	}

    	return (font.style ? font.style + ' ' : '')
    		+ (font.weight ? font.weight + ' ' : '')
    		+ font.size + 'px '
    		+ font.family;
    }

    /**
     * @alias Chart.helpers.options
     * @namespace
     */
    var helpers_options = {
    	/**
    	 * Converts the given line height `value` in pixels for a specific font `size`.
    	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
    	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
    	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
    	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
    	 * @since 2.7.0
    	 */
    	toLineHeight: function(value, size) {
    		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
    		if (!matches || matches[1] === 'normal') {
    			return size * 1.2;
    		}

    		value = +matches[2];

    		switch (matches[3]) {
    		case 'px':
    			return value;
    		case '%':
    			value /= 100;
    			break;
    		}

    		return size * value;
    	},

    	/**
    	 * Converts the given value into a padding object with pre-computed width/height.
    	 * @param {number|object} value - If a number, set the value to all TRBL component,
    	 *  else, if and object, use defined properties and sets undefined ones to 0.
    	 * @returns {object} The padding values (top, right, bottom, left, width, height)
    	 * @since 2.7.0
    	 */
    	toPadding: function(value) {
    		var t, r, b, l;

    		if (helpers_core.isObject(value)) {
    			t = +value.top || 0;
    			r = +value.right || 0;
    			b = +value.bottom || 0;
    			l = +value.left || 0;
    		} else {
    			t = r = b = l = +value || 0;
    		}

    		return {
    			top: t,
    			right: r,
    			bottom: b,
    			left: l,
    			height: t + b,
    			width: l + r
    		};
    	},

    	/**
    	 * Parses font options and returns the font object.
    	 * @param {object} options - A object that contains font options to be parsed.
    	 * @return {object} The font object.
    	 * @todo Support font.* options and renamed to toFont().
    	 * @private
    	 */
    	_parseFont: function(options) {
    		var globalDefaults = core_defaults.global;
    		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
    		var font = {
    			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
    			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
    			size: size,
    			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
    			weight: null,
    			string: ''
    		};

    		font.string = toFontString(font);
    		return font;
    	},

    	/**
    	 * Evaluates the given `inputs` sequentially and returns the first defined value.
    	 * @param {Array} inputs - An array of values, falling back to the last value.
    	 * @param {object} [context] - If defined and the current value is a function, the value
    	 * is called with `context` as first argument and the result becomes the new input.
    	 * @param {number} [index] - If defined and the current value is an array, the value
    	 * at `index` become the new input.
    	 * @param {object} [info] - object to return information about resolution in
    	 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
    	 * @since 2.7.0
    	 */
    	resolve: function(inputs, context, index, info) {
    		var cacheable = true;
    		var i, ilen, value;

    		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    			value = inputs[i];
    			if (value === undefined) {
    				continue;
    			}
    			if (context !== undefined && typeof value === 'function') {
    				value = value(context);
    				cacheable = false;
    			}
    			if (index !== undefined && helpers_core.isArray(value)) {
    				value = value[index];
    				cacheable = false;
    			}
    			if (value !== undefined) {
    				if (info && !cacheable) {
    					info.cacheable = false;
    				}
    				return value;
    			}
    		}
    	}
    };

    /**
     * @alias Chart.helpers.math
     * @namespace
     */
    var exports$2 = {
    	/**
    	 * Returns an array of factors sorted from 1 to sqrt(value)
    	 * @private
    	 */
    	_factorize: function(value) {
    		var result = [];
    		var sqrt = Math.sqrt(value);
    		var i;

    		for (i = 1; i < sqrt; i++) {
    			if (value % i === 0) {
    				result.push(i);
    				result.push(value / i);
    			}
    		}
    		if (sqrt === (sqrt | 0)) { // if value is a square number
    			result.push(sqrt);
    		}

    		result.sort(function(a, b) {
    			return a - b;
    		}).pop();
    		return result;
    	},

    	log10: Math.log10 || function(x) {
    		var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
    		// Check for whole powers of 10,
    		// which due to floating point rounding error should be corrected.
    		var powerOf10 = Math.round(exponent);
    		var isPowerOf10 = x === Math.pow(10, powerOf10);

    		return isPowerOf10 ? powerOf10 : exponent;
    	}
    };

    var helpers_math = exports$2;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
     * @namespace Chart.helpers.log10
     * @deprecated since version 2.9.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.log10 = exports$2.log10;

    var getRtlAdapter = function(rectX, width) {
    	return {
    		x: function(x) {
    			return rectX + rectX + width - x;
    		},
    		setWidth: function(w) {
    			width = w;
    		},
    		textAlign: function(align) {
    			if (align === 'center') {
    				return align;
    			}
    			return align === 'right' ? 'left' : 'right';
    		},
    		xPlus: function(x, value) {
    			return x - value;
    		},
    		leftForLtr: function(x, itemWidth) {
    			return x - itemWidth;
    		},
    	};
    };

    var getLtrAdapter = function() {
    	return {
    		x: function(x) {
    			return x;
    		},
    		setWidth: function(w) { // eslint-disable-line no-unused-vars
    		},
    		textAlign: function(align) {
    			return align;
    		},
    		xPlus: function(x, value) {
    			return x + value;
    		},
    		leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
    			return x;
    		},
    	};
    };

    var getAdapter = function(rtl, rectX, width) {
    	return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
    };

    var overrideTextDirection = function(ctx, direction) {
    	var style, original;
    	if (direction === 'ltr' || direction === 'rtl') {
    		style = ctx.canvas.style;
    		original = [
    			style.getPropertyValue('direction'),
    			style.getPropertyPriority('direction'),
    		];

    		style.setProperty('direction', direction, 'important');
    		ctx.prevTextDirection = original;
    	}
    };

    var restoreTextDirection = function(ctx) {
    	var original = ctx.prevTextDirection;
    	if (original !== undefined) {
    		delete ctx.prevTextDirection;
    		ctx.canvas.style.setProperty('direction', original[0], original[1]);
    	}
    };

    var helpers_rtl = {
    	getRtlAdapter: getAdapter,
    	overrideTextDirection: overrideTextDirection,
    	restoreTextDirection: restoreTextDirection,
    };

    var helpers$1 = helpers_core;
    var easing = helpers_easing;
    var canvas = helpers_canvas;
    var options = helpers_options;
    var math = helpers_math;
    var rtl = helpers_rtl;
    helpers$1.easing = easing;
    helpers$1.canvas = canvas;
    helpers$1.options = options;
    helpers$1.math = math;
    helpers$1.rtl = rtl;

    function interpolate(start, view, model, ease) {
    	var keys = Object.keys(model);
    	var i, ilen, key, actual, origin, target, type, c0, c1;

    	for (i = 0, ilen = keys.length; i < ilen; ++i) {
    		key = keys[i];

    		target = model[key];

    		// if a value is added to the model after pivot() has been called, the view
    		// doesn't contain it, so let's initialize the view to the target value.
    		if (!view.hasOwnProperty(key)) {
    			view[key] = target;
    		}

    		actual = view[key];

    		if (actual === target || key[0] === '_') {
    			continue;
    		}

    		if (!start.hasOwnProperty(key)) {
    			start[key] = actual;
    		}

    		origin = start[key];

    		type = typeof target;

    		if (type === typeof origin) {
    			if (type === 'string') {
    				c0 = chartjsColor(origin);
    				if (c0.valid) {
    					c1 = chartjsColor(target);
    					if (c1.valid) {
    						view[key] = c1.mix(c0, ease).rgbString();
    						continue;
    					}
    				}
    			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
    				view[key] = origin + (target - origin) * ease;
    				continue;
    			}
    		}

    		view[key] = target;
    	}
    }

    var Element = function(configuration) {
    	helpers$1.extend(this, configuration);
    	this.initialize.apply(this, arguments);
    };

    helpers$1.extend(Element.prototype, {
    	_type: undefined,

    	initialize: function() {
    		this.hidden = false;
    	},

    	pivot: function() {
    		var me = this;
    		if (!me._view) {
    			me._view = helpers$1.extend({}, me._model);
    		}
    		me._start = {};
    		return me;
    	},

    	transition: function(ease) {
    		var me = this;
    		var model = me._model;
    		var start = me._start;
    		var view = me._view;

    		// No animation -> No Transition
    		if (!model || ease === 1) {
    			me._view = helpers$1.extend({}, model);
    			me._start = null;
    			return me;
    		}

    		if (!view) {
    			view = me._view = {};
    		}

    		if (!start) {
    			start = me._start = {};
    		}

    		interpolate(start, view, model, ease);

    		return me;
    	},

    	tooltipPosition: function() {
    		return {
    			x: this._model.x,
    			y: this._model.y
    		};
    	},

    	hasValue: function() {
    		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
    	}
    });

    Element.extend = helpers$1.inherits;

    var core_element = Element;

    var exports$3 = core_element.extend({
    	chart: null, // the animation associated chart instance
    	currentStep: 0, // the current animation step
    	numSteps: 60, // default number of steps
    	easing: '', // the easing to use for this animation
    	render: null, // render function used by the animation service

    	onAnimationProgress: null, // user specified callback to fire on each step of the animation
    	onAnimationComplete: null, // user specified callback to fire when the animation finishes
    });

    var core_animation = exports$3;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.Animation instead
     * @prop Chart.Animation#animationObject
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */
    Object.defineProperty(exports$3.prototype, 'animationObject', {
    	get: function() {
    		return this;
    	}
    });

    /**
     * Provided for backward compatibility, use Chart.Animation#chart instead
     * @prop Chart.Animation#chartInstance
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */
    Object.defineProperty(exports$3.prototype, 'chartInstance', {
    	get: function() {
    		return this.chart;
    	},
    	set: function(value) {
    		this.chart = value;
    	}
    });

    core_defaults._set('global', {
    	animation: {
    		duration: 1000,
    		easing: 'easeOutQuart',
    		onProgress: helpers$1.noop,
    		onComplete: helpers$1.noop
    	}
    });

    var core_animations = {
    	animations: [],
    	request: null,

    	/**
    	 * @param {Chart} chart - The chart to animate.
    	 * @param {Chart.Animation} animation - The animation that we will animate.
    	 * @param {number} duration - The animation duration in ms.
    	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
    	 */
    	addAnimation: function(chart, animation, duration, lazy) {
    		var animations = this.animations;
    		var i, ilen;

    		animation.chart = chart;
    		animation.startTime = Date.now();
    		animation.duration = duration;

    		if (!lazy) {
    			chart.animating = true;
    		}

    		for (i = 0, ilen = animations.length; i < ilen; ++i) {
    			if (animations[i].chart === chart) {
    				animations[i] = animation;
    				return;
    			}
    		}

    		animations.push(animation);

    		// If there are no animations queued, manually kickstart a digest, for lack of a better word
    		if (animations.length === 1) {
    			this.requestAnimationFrame();
    		}
    	},

    	cancelAnimation: function(chart) {
    		var index = helpers$1.findIndex(this.animations, function(animation) {
    			return animation.chart === chart;
    		});

    		if (index !== -1) {
    			this.animations.splice(index, 1);
    			chart.animating = false;
    		}
    	},

    	requestAnimationFrame: function() {
    		var me = this;
    		if (me.request === null) {
    			// Skip animation frame requests until the active one is executed.
    			// This can happen when processing mouse events, e.g. 'mousemove'
    			// and 'mouseout' events will trigger multiple renders.
    			me.request = helpers$1.requestAnimFrame.call(window, function() {
    				me.request = null;
    				me.startDigest();
    			});
    		}
    	},

    	/**
    	 * @private
    	 */
    	startDigest: function() {
    		var me = this;

    		me.advance();

    		// Do we have more stuff to animate?
    		if (me.animations.length > 0) {
    			me.requestAnimationFrame();
    		}
    	},

    	/**
    	 * @private
    	 */
    	advance: function() {
    		var animations = this.animations;
    		var animation, chart, numSteps, nextStep;
    		var i = 0;

    		// 1 animation per chart, so we are looping charts here
    		while (i < animations.length) {
    			animation = animations[i];
    			chart = animation.chart;
    			numSteps = animation.numSteps;

    			// Make sure that currentStep starts at 1
    			// https://github.com/chartjs/Chart.js/issues/6104
    			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
    			animation.currentStep = Math.min(nextStep, numSteps);

    			helpers$1.callback(animation.render, [chart, animation], chart);
    			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

    			if (animation.currentStep >= numSteps) {
    				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
    				chart.animating = false;
    				animations.splice(i, 1);
    			} else {
    				++i;
    			}
    		}
    	}
    };

    var resolve = helpers$1.options.resolve;

    var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

    /**
     * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
     * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
     * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
     */
    function listenArrayEvents(array, listener) {
    	if (array._chartjs) {
    		array._chartjs.listeners.push(listener);
    		return;
    	}

    	Object.defineProperty(array, '_chartjs', {
    		configurable: true,
    		enumerable: false,
    		value: {
    			listeners: [listener]
    		}
    	});

    	arrayEvents.forEach(function(key) {
    		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
    		var base = array[key];

    		Object.defineProperty(array, key, {
    			configurable: true,
    			enumerable: false,
    			value: function() {
    				var args = Array.prototype.slice.call(arguments);
    				var res = base.apply(this, args);

    				helpers$1.each(array._chartjs.listeners, function(object) {
    					if (typeof object[method] === 'function') {
    						object[method].apply(object, args);
    					}
    				});

    				return res;
    			}
    		});
    	});
    }

    /**
     * Removes the given array event listener and cleanup extra attached properties (such as
     * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
     */
    function unlistenArrayEvents(array, listener) {
    	var stub = array._chartjs;
    	if (!stub) {
    		return;
    	}

    	var listeners = stub.listeners;
    	var index = listeners.indexOf(listener);
    	if (index !== -1) {
    		listeners.splice(index, 1);
    	}

    	if (listeners.length > 0) {
    		return;
    	}

    	arrayEvents.forEach(function(key) {
    		delete array[key];
    	});

    	delete array._chartjs;
    }

    // Base class for all dataset controllers (line, bar, etc)
    var DatasetController = function(chart, datasetIndex) {
    	this.initialize(chart, datasetIndex);
    };

    helpers$1.extend(DatasetController.prototype, {

    	/**
    	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
    	 * @type {Chart.core.element}
    	 */
    	datasetElementType: null,

    	/**
    	 * Element type used to generate a meta data (e.g. Chart.element.Point).
    	 * @type {Chart.core.element}
    	 */
    	dataElementType: null,

    	/**
    	 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
    	 * A derived controller may override this to resolve controller-specific options.
    	 * The keys defined here are for backward compatibility for legend styles.
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderCapStyle',
    		'borderColor',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'borderWidth'
    	],

    	/**
    	 * Data element option keys to be resolved in _resolveDataElementOptions.
    	 * A derived controller may override this to resolve controller-specific options.
    	 * The keys defined here are for backward compatibility for legend styles.
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'pointStyle'
    	],

    	initialize: function(chart, datasetIndex) {
    		var me = this;
    		me.chart = chart;
    		me.index = datasetIndex;
    		me.linkScales();
    		me.addElements();
    		me._type = me.getMeta().type;
    	},

    	updateIndex: function(datasetIndex) {
    		this.index = datasetIndex;
    	},

    	linkScales: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var chart = me.chart;
    		var scales = chart.scales;
    		var dataset = me.getDataset();
    		var scalesOpts = chart.options.scales;

    		if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
    			meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
    		}
    		if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
    			meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
    		}
    	},

    	getDataset: function() {
    		return this.chart.data.datasets[this.index];
    	},

    	getMeta: function() {
    		return this.chart.getDatasetMeta(this.index);
    	},

    	getScaleForId: function(scaleID) {
    		return this.chart.scales[scaleID];
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.getMeta().yAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.getMeta().xAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScale: function() {
    		return this.getScaleForId(this._getValueScaleId());
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScale: function() {
    		return this.getScaleForId(this._getIndexScaleId());
    	},

    	reset: function() {
    		this._update(true);
    	},

    	/**
    	 * @private
    	 */
    	destroy: function() {
    		if (this._data) {
    			unlistenArrayEvents(this._data, this);
    		}
    	},

    	createMetaDataset: function() {
    		var me = this;
    		var type = me.datasetElementType;
    		return type && new type({
    			_chart: me.chart,
    			_datasetIndex: me.index
    		});
    	},

    	createMetaData: function(index) {
    		var me = this;
    		var type = me.dataElementType;
    		return type && new type({
    			_chart: me.chart,
    			_datasetIndex: me.index,
    			_index: index
    		});
    	},

    	addElements: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var data = me.getDataset().data || [];
    		var metaData = meta.data;
    		var i, ilen;

    		for (i = 0, ilen = data.length; i < ilen; ++i) {
    			metaData[i] = metaData[i] || me.createMetaData(i);
    		}

    		meta.dataset = meta.dataset || me.createMetaDataset();
    	},

    	addElementAndReset: function(index) {
    		var element = this.createMetaData(index);
    		this.getMeta().data.splice(index, 0, element);
    		this.updateElement(element, index, true);
    	},

    	buildOrUpdateElements: function() {
    		var me = this;
    		var dataset = me.getDataset();
    		var data = dataset.data || (dataset.data = []);

    		// In order to correctly handle data addition/deletion animation (an thus simulate
    		// real-time charts), we need to monitor these data modifications and synchronize
    		// the internal meta data accordingly.
    		if (me._data !== data) {
    			if (me._data) {
    				// This case happens when the user replaced the data array instance.
    				unlistenArrayEvents(me._data, me);
    			}

    			if (data && Object.isExtensible(data)) {
    				listenArrayEvents(data, me);
    			}
    			me._data = data;
    		}

    		// Re-sync meta data in case the user replaced the data array or if we missed
    		// any updates and so make sure that we handle number of datapoints changing.
    		me.resyncElements();
    	},

    	/**
    	 * Returns the merged user-supplied and default dataset-level options
    	 * @private
    	 */
    	_configure: function() {
    		var me = this;
    		me._config = helpers$1.merge(Object.create(null), [
    			me.chart.options.datasets[me._type],
    			me.getDataset(),
    		], {
    			merger: function(key, target, source) {
    				if (key !== '_meta' && key !== 'data') {
    					helpers$1._merger(key, target, source);
    				}
    			}
    		});
    	},

    	_update: function(reset) {
    		var me = this;
    		me._configure();
    		me._cachedDataOpts = null;
    		me.update(reset);
    	},

    	update: helpers$1.noop,

    	transition: function(easingValue) {
    		var meta = this.getMeta();
    		var elements = meta.data || [];
    		var ilen = elements.length;
    		var i = 0;

    		for (; i < ilen; ++i) {
    			elements[i].transition(easingValue);
    		}

    		if (meta.dataset) {
    			meta.dataset.transition(easingValue);
    		}
    	},

    	draw: function() {
    		var meta = this.getMeta();
    		var elements = meta.data || [];
    		var ilen = elements.length;
    		var i = 0;

    		if (meta.dataset) {
    			meta.dataset.draw();
    		}

    		for (; i < ilen; ++i) {
    			elements[i].draw();
    		}
    	},

    	/**
    	 * Returns a set of predefined style properties that should be used to represent the dataset
    	 * or the data if the index is specified
    	 * @param {number} index - data index
    	 * @return {IStyleInterface} style object
    	 */
    	getStyle: function(index) {
    		var me = this;
    		var meta = me.getMeta();
    		var dataset = meta.dataset;
    		var style;

    		me._configure();
    		if (dataset && index === undefined) {
    			style = me._resolveDatasetElementOptions(dataset || {});
    		} else {
    			index = index || 0;
    			style = me._resolveDataElementOptions(meta.data[index] || {}, index);
    		}

    		if (style.fill === false || style.fill === null) {
    			style.backgroundColor = style.borderColor;
    		}

    		return style;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function(element, hover) {
    		var me = this;
    		var chart = me.chart;
    		var datasetOpts = me._config;
    		var custom = element.custom || {};
    		var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
    		var elementOptions = me._datasetElementOptions;
    		var values = {};
    		var i, ilen, key, readKey;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataset: me.getDataset(),
    			datasetIndex: me.index,
    			hover: hover
    		};

    		for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
    			key = elementOptions[i];
    			readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
    			values[key] = resolve([
    				custom[readKey],
    				datasetOpts[readKey],
    				options[readKey]
    			], context);
    		}

    		return values;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function(element, index) {
    		var me = this;
    		var custom = element && element.custom;
    		var cached = me._cachedDataOpts;
    		if (cached && !custom) {
    			return cached;
    		}
    		var chart = me.chart;
    		var datasetOpts = me._config;
    		var options = chart.options.elements[me.dataElementType.prototype._type] || {};
    		var elementOptions = me._dataElementOptions;
    		var values = {};

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: me.getDataset(),
    			datasetIndex: me.index
    		};

    		// `resolve` sets cacheable to `false` if any option is indexed or scripted
    		var info = {cacheable: !custom};

    		var keys, i, ilen, key;

    		custom = custom || {};

    		if (helpers$1.isArray(elementOptions)) {
    			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
    				key = elementOptions[i];
    				values[key] = resolve([
    					custom[key],
    					datasetOpts[key],
    					options[key]
    				], context, index, info);
    			}
    		} else {
    			keys = Object.keys(elementOptions);
    			for (i = 0, ilen = keys.length; i < ilen; ++i) {
    				key = keys[i];
    				values[key] = resolve([
    					custom[key],
    					datasetOpts[elementOptions[key]],
    					datasetOpts[key],
    					options[key]
    				], context, index, info);
    			}
    		}

    		if (info.cacheable) {
    			me._cachedDataOpts = Object.freeze(values);
    		}

    		return values;
    	},

    	removeHoverStyle: function(element) {
    		helpers$1.merge(element._model, element.$previousStyle || {});
    		delete element.$previousStyle;
    	},

    	setHoverStyle: function(element) {
    		var dataset = this.chart.data.datasets[element._datasetIndex];
    		var index = element._index;
    		var custom = element.custom || {};
    		var model = element._model;
    		var getHoverColor = helpers$1.getHoverColor;

    		element.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth
    		};

    		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
    		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
    		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
    	},

    	/**
    	 * @private
    	 */
    	_removeDatasetHoverStyle: function() {
    		var element = this.getMeta().dataset;

    		if (element) {
    			this.removeHoverStyle(element);
    		}
    	},

    	/**
    	 * @private
    	 */
    	_setDatasetHoverStyle: function() {
    		var element = this.getMeta().dataset;
    		var prev = {};
    		var i, ilen, key, keys, hoverOptions, model;

    		if (!element) {
    			return;
    		}

    		model = element._model;
    		hoverOptions = this._resolveDatasetElementOptions(element, true);

    		keys = Object.keys(hoverOptions);
    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			prev[key] = model[key];
    			model[key] = hoverOptions[key];
    		}

    		element.$previousStyle = prev;
    	},

    	/**
    	 * @private
    	 */
    	resyncElements: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var data = me.getDataset().data;
    		var numMeta = meta.data.length;
    		var numData = data.length;

    		if (numData < numMeta) {
    			meta.data.splice(numData, numMeta - numData);
    		} else if (numData > numMeta) {
    			me.insertElements(numMeta, numData - numMeta);
    		}
    	},

    	/**
    	 * @private
    	 */
    	insertElements: function(start, count) {
    		for (var i = 0; i < count; ++i) {
    			this.addElementAndReset(start + i);
    		}
    	},

    	/**
    	 * @private
    	 */
    	onDataPush: function() {
    		var count = arguments.length;
    		this.insertElements(this.getDataset().data.length - count, count);
    	},

    	/**
    	 * @private
    	 */
    	onDataPop: function() {
    		this.getMeta().data.pop();
    	},

    	/**
    	 * @private
    	 */
    	onDataShift: function() {
    		this.getMeta().data.shift();
    	},

    	/**
    	 * @private
    	 */
    	onDataSplice: function(start, count) {
    		this.getMeta().data.splice(start, count);
    		this.insertElements(start, arguments.length - 2);
    	},

    	/**
    	 * @private
    	 */
    	onDataUnshift: function() {
    		this.insertElements(0, arguments.length);
    	}
    });

    DatasetController.extend = helpers$1.inherits;

    var core_datasetController = DatasetController;

    var TAU = Math.PI * 2;

    core_defaults._set('global', {
    	elements: {
    		arc: {
    			backgroundColor: core_defaults.global.defaultColor,
    			borderColor: '#fff',
    			borderWidth: 2,
    			borderAlign: 'center'
    		}
    	}
    });

    function clipArc(ctx, arc) {
    	var startAngle = arc.startAngle;
    	var endAngle = arc.endAngle;
    	var pixelMargin = arc.pixelMargin;
    	var angleMargin = pixelMargin / arc.outerRadius;
    	var x = arc.x;
    	var y = arc.y;

    	// Draw an inner border by cliping the arc and drawing a double-width border
    	// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
    	ctx.beginPath();
    	ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    	if (arc.innerRadius > pixelMargin) {
    		angleMargin = pixelMargin / arc.innerRadius;
    		ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
    	} else {
    		ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
    	}
    	ctx.closePath();
    	ctx.clip();
    }

    function drawFullCircleBorders(ctx, vm, arc, inner) {
    	var endAngle = arc.endAngle;
    	var i;

    	if (inner) {
    		arc.endAngle = arc.startAngle + TAU;
    		clipArc(ctx, arc);
    		arc.endAngle = endAngle;
    		if (arc.endAngle === arc.startAngle && arc.fullCircles) {
    			arc.endAngle += TAU;
    			arc.fullCircles--;
    		}
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
    	for (i = 0; i < arc.fullCircles; ++i) {
    		ctx.stroke();
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
    	for (i = 0; i < arc.fullCircles; ++i) {
    		ctx.stroke();
    	}
    }

    function drawBorder(ctx, vm, arc) {
    	var inner = vm.borderAlign === 'inner';

    	if (inner) {
    		ctx.lineWidth = vm.borderWidth * 2;
    		ctx.lineJoin = 'round';
    	} else {
    		ctx.lineWidth = vm.borderWidth;
    		ctx.lineJoin = 'bevel';
    	}

    	if (arc.fullCircles) {
    		drawFullCircleBorders(ctx, vm, arc, inner);
    	}

    	if (inner) {
    		clipArc(ctx, arc);
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
    	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    	ctx.closePath();
    	ctx.stroke();
    }

    var element_arc = core_element.extend({
    	_type: 'arc',

    	inLabelRange: function(mouseX) {
    		var vm = this._view;

    		if (vm) {
    			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
    		}
    		return false;
    	},

    	inRange: function(chartX, chartY) {
    		var vm = this._view;

    		if (vm) {
    			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
    			var angle = pointRelativePosition.angle;
    			var distance = pointRelativePosition.distance;

    			// Sanitise angle range
    			var startAngle = vm.startAngle;
    			var endAngle = vm.endAngle;
    			while (endAngle < startAngle) {
    				endAngle += TAU;
    			}
    			while (angle > endAngle) {
    				angle -= TAU;
    			}
    			while (angle < startAngle) {
    				angle += TAU;
    			}

    			// Check if within the range of the open/close angle
    			var betweenAngles = (angle >= startAngle && angle <= endAngle);
    			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

    			return (betweenAngles && withinRadius);
    		}
    		return false;
    	},

    	getCenterPoint: function() {
    		var vm = this._view;
    		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
    		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
    		return {
    			x: vm.x + Math.cos(halfAngle) * halfRadius,
    			y: vm.y + Math.sin(halfAngle) * halfRadius
    		};
    	},

    	getArea: function() {
    		var vm = this._view;
    		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
    		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

    		return {
    			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
    			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
    		};
    	},

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
    		var arc = {
    			x: vm.x,
    			y: vm.y,
    			innerRadius: vm.innerRadius,
    			outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
    			pixelMargin: pixelMargin,
    			startAngle: vm.startAngle,
    			endAngle: vm.endAngle,
    			fullCircles: Math.floor(vm.circumference / TAU)
    		};
    		var i;

    		ctx.save();

    		ctx.fillStyle = vm.backgroundColor;
    		ctx.strokeStyle = vm.borderColor;

    		if (arc.fullCircles) {
    			arc.endAngle = arc.startAngle + TAU;
    			ctx.beginPath();
    			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
    			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    			ctx.closePath();
    			for (i = 0; i < arc.fullCircles; ++i) {
    				ctx.fill();
    			}
    			arc.endAngle = arc.startAngle + vm.circumference % TAU;
    		}

    		ctx.beginPath();
    		ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
    		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    		ctx.closePath();
    		ctx.fill();

    		if (vm.borderWidth) {
    			drawBorder(ctx, vm, arc);
    		}

    		ctx.restore();
    	}
    });

    var valueOrDefault$1 = helpers$1.valueOrDefault;

    var defaultColor = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		line: {
    			tension: 0.4,
    			backgroundColor: defaultColor,
    			borderWidth: 3,
    			borderColor: defaultColor,
    			borderCapStyle: 'butt',
    			borderDash: [],
    			borderDashOffset: 0.0,
    			borderJoinStyle: 'miter',
    			capBezierPoints: true,
    			fill: true, // do we fill in the area between the line and its base axis
    		}
    	}
    });

    var element_line = core_element.extend({
    	_type: 'line',

    	draw: function() {
    		var me = this;
    		var vm = me._view;
    		var ctx = me._chart.ctx;
    		var spanGaps = vm.spanGaps;
    		var points = me._children.slice(); // clone array
    		var globalDefaults = core_defaults.global;
    		var globalOptionLineElements = globalDefaults.elements.line;
    		var lastDrawnIndex = -1;
    		var closePath = me._loop;
    		var index, previous, currentVM;

    		if (!points.length) {
    			return;
    		}

    		if (me._loop) {
    			for (index = 0; index < points.length; ++index) {
    				previous = helpers$1.previousItem(points, index);
    				// If the line has an open path, shift the point array
    				if (!points[index]._view.skip && previous._view.skip) {
    					points = points.slice(index).concat(points.slice(0, index));
    					closePath = spanGaps;
    					break;
    				}
    			}
    			// If the line has a close path, add the first point again
    			if (closePath) {
    				points.push(points[0]);
    			}
    		}

    		ctx.save();

    		// Stroke Line Options
    		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

    		// IE 9 and 10 do not support line dash
    		if (ctx.setLineDash) {
    			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
    		}

    		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
    		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
    		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
    		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

    		// Stroke Line
    		ctx.beginPath();

    		// First point moves to it's starting position no matter what
    		currentVM = points[0]._view;
    		if (!currentVM.skip) {
    			ctx.moveTo(currentVM.x, currentVM.y);
    			lastDrawnIndex = 0;
    		}

    		for (index = 1; index < points.length; ++index) {
    			currentVM = points[index]._view;
    			previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

    			if (!currentVM.skip) {
    				if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
    					// There was a gap and this is the first point after the gap
    					ctx.moveTo(currentVM.x, currentVM.y);
    				} else {
    					// Line to next point
    					helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
    				}
    				lastDrawnIndex = index;
    			}
    		}

    		if (closePath) {
    			ctx.closePath();
    		}

    		ctx.stroke();
    		ctx.restore();
    	}
    });

    var valueOrDefault$2 = helpers$1.valueOrDefault;

    var defaultColor$1 = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		point: {
    			radius: 3,
    			pointStyle: 'circle',
    			backgroundColor: defaultColor$1,
    			borderColor: defaultColor$1,
    			borderWidth: 1,
    			// Hover
    			hitRadius: 1,
    			hoverRadius: 4,
    			hoverBorderWidth: 1
    		}
    	}
    });

    function xRange(mouseX) {
    	var vm = this._view;
    	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
    }

    function yRange(mouseY) {
    	var vm = this._view;
    	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
    }

    var element_point = core_element.extend({
    	_type: 'point',

    	inRange: function(mouseX, mouseY) {
    		var vm = this._view;
    		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
    	},

    	inLabelRange: xRange,
    	inXRange: xRange,
    	inYRange: yRange,

    	getCenterPoint: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y
    		};
    	},

    	getArea: function() {
    		return Math.PI * Math.pow(this._view.radius, 2);
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y,
    			padding: vm.radius + vm.borderWidth
    		};
    	},

    	draw: function(chartArea) {
    		var vm = this._view;
    		var ctx = this._chart.ctx;
    		var pointStyle = vm.pointStyle;
    		var rotation = vm.rotation;
    		var radius = vm.radius;
    		var x = vm.x;
    		var y = vm.y;
    		var globalDefaults = core_defaults.global;
    		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

    		if (vm.skip) {
    			return;
    		}

    		// Clipping for Points.
    		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
    			ctx.strokeStyle = vm.borderColor || defaultColor;
    			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
    			ctx.fillStyle = vm.backgroundColor || defaultColor;
    			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
    		}
    	}
    });

    var defaultColor$2 = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		rectangle: {
    			backgroundColor: defaultColor$2,
    			borderColor: defaultColor$2,
    			borderSkipped: 'bottom',
    			borderWidth: 0
    		}
    	}
    });

    function isVertical(vm) {
    	return vm && vm.width !== undefined;
    }

    /**
     * Helper function to get the bounds of the bar regardless of the orientation
     * @param bar {Chart.Element.Rectangle} the bar
     * @return {Bounds} bounds of the bar
     * @private
     */
    function getBarBounds(vm) {
    	var x1, x2, y1, y2, half;

    	if (isVertical(vm)) {
    		half = vm.width / 2;
    		x1 = vm.x - half;
    		x2 = vm.x + half;
    		y1 = Math.min(vm.y, vm.base);
    		y2 = Math.max(vm.y, vm.base);
    	} else {
    		half = vm.height / 2;
    		x1 = Math.min(vm.x, vm.base);
    		x2 = Math.max(vm.x, vm.base);
    		y1 = vm.y - half;
    		y2 = vm.y + half;
    	}

    	return {
    		left: x1,
    		top: y1,
    		right: x2,
    		bottom: y2
    	};
    }

    function swap(orig, v1, v2) {
    	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
    }

    function parseBorderSkipped(vm) {
    	var edge = vm.borderSkipped;
    	var res = {};

    	if (!edge) {
    		return res;
    	}

    	if (vm.horizontal) {
    		if (vm.base > vm.x) {
    			edge = swap(edge, 'left', 'right');
    		}
    	} else if (vm.base < vm.y) {
    		edge = swap(edge, 'bottom', 'top');
    	}

    	res[edge] = true;
    	return res;
    }

    function parseBorderWidth(vm, maxW, maxH) {
    	var value = vm.borderWidth;
    	var skip = parseBorderSkipped(vm);
    	var t, r, b, l;

    	if (helpers$1.isObject(value)) {
    		t = +value.top || 0;
    		r = +value.right || 0;
    		b = +value.bottom || 0;
    		l = +value.left || 0;
    	} else {
    		t = r = b = l = +value || 0;
    	}

    	return {
    		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
    		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
    		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
    		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
    	};
    }

    function boundingRects(vm) {
    	var bounds = getBarBounds(vm);
    	var width = bounds.right - bounds.left;
    	var height = bounds.bottom - bounds.top;
    	var border = parseBorderWidth(vm, width / 2, height / 2);

    	return {
    		outer: {
    			x: bounds.left,
    			y: bounds.top,
    			w: width,
    			h: height
    		},
    		inner: {
    			x: bounds.left + border.l,
    			y: bounds.top + border.t,
    			w: width - border.l - border.r,
    			h: height - border.t - border.b
    		}
    	};
    }

    function inRange(vm, x, y) {
    	var skipX = x === null;
    	var skipY = y === null;
    	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

    	return bounds
    		&& (skipX || x >= bounds.left && x <= bounds.right)
    		&& (skipY || y >= bounds.top && y <= bounds.bottom);
    }

    var element_rectangle = core_element.extend({
    	_type: 'rectangle',

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var rects = boundingRects(vm);
    		var outer = rects.outer;
    		var inner = rects.inner;

    		ctx.fillStyle = vm.backgroundColor;
    		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

    		if (outer.w === inner.w && outer.h === inner.h) {
    			return;
    		}

    		ctx.save();
    		ctx.beginPath();
    		ctx.rect(outer.x, outer.y, outer.w, outer.h);
    		ctx.clip();
    		ctx.fillStyle = vm.borderColor;
    		ctx.rect(inner.x, inner.y, inner.w, inner.h);
    		ctx.fill('evenodd');
    		ctx.restore();
    	},

    	height: function() {
    		var vm = this._view;
    		return vm.base - vm.y;
    	},

    	inRange: function(mouseX, mouseY) {
    		return inRange(this._view, mouseX, mouseY);
    	},

    	inLabelRange: function(mouseX, mouseY) {
    		var vm = this._view;
    		return isVertical(vm)
    			? inRange(vm, mouseX, null)
    			: inRange(vm, null, mouseY);
    	},

    	inXRange: function(mouseX) {
    		return inRange(this._view, mouseX, null);
    	},

    	inYRange: function(mouseY) {
    		return inRange(this._view, null, mouseY);
    	},

    	getCenterPoint: function() {
    		var vm = this._view;
    		var x, y;
    		if (isVertical(vm)) {
    			x = vm.x;
    			y = (vm.y + vm.base) / 2;
    		} else {
    			x = (vm.x + vm.base) / 2;
    			y = vm.y;
    		}

    		return {x: x, y: y};
    	},

    	getArea: function() {
    		var vm = this._view;

    		return isVertical(vm)
    			? vm.width * Math.abs(vm.y - vm.base)
    			: vm.height * Math.abs(vm.x - vm.base);
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y
    		};
    	}
    });

    var elements = {};
    var Arc = element_arc;
    var Line = element_line;
    var Point = element_point;
    var Rectangle = element_rectangle;
    elements.Arc = Arc;
    elements.Line = Line;
    elements.Point = Point;
    elements.Rectangle = Rectangle;

    var deprecated = helpers$1._deprecated;
    var valueOrDefault$3 = helpers$1.valueOrDefault;

    core_defaults._set('bar', {
    	hover: {
    		mode: 'label'
    	},

    	scales: {
    		xAxes: [{
    			type: 'category',
    			offset: true,
    			gridLines: {
    				offsetGridLines: true
    			}
    		}],

    		yAxes: [{
    			type: 'linear'
    		}]
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		bar: {
    			categoryPercentage: 0.8,
    			barPercentage: 0.9
    		}
    	}
    });

    /**
     * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
     * @private
     */
    function computeMinSampleSize(scale, pixels) {
    	var min = scale._length;
    	var prev, curr, i, ilen;

    	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
    		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
    	}

    	for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
    		curr = scale.getPixelForTick(i);
    		min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
    		prev = curr;
    	}

    	return min;
    }

    /**
     * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
     * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
     * mode currently always generates bars equally sized (until we introduce scriptable options?).
     * @private
     */
    function computeFitCategoryTraits(index, ruler, options) {
    	var thickness = options.barThickness;
    	var count = ruler.stackCount;
    	var curr = ruler.pixels[index];
    	var min = helpers$1.isNullOrUndef(thickness)
    		? computeMinSampleSize(ruler.scale, ruler.pixels)
    		: -1;
    	var size, ratio;

    	if (helpers$1.isNullOrUndef(thickness)) {
    		size = min * options.categoryPercentage;
    		ratio = options.barPercentage;
    	} else {
    		// When bar thickness is enforced, category and bar percentages are ignored.
    		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
    		// and deprecate barPercentage since this value is ignored when thickness is absolute.
    		size = thickness * count;
    		ratio = 1;
    	}

    	return {
    		chunk: size / count,
    		ratio: ratio,
    		start: curr - (size / 2)
    	};
    }

    /**
     * Computes an "optimal" category that globally arranges bars side by side (no gap when
     * percentage options are 1), based on the previous and following categories. This mode
     * generates bars with different widths when data are not evenly spaced.
     * @private
     */
    function computeFlexCategoryTraits(index, ruler, options) {
    	var pixels = ruler.pixels;
    	var curr = pixels[index];
    	var prev = index > 0 ? pixels[index - 1] : null;
    	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
    	var percent = options.categoryPercentage;
    	var start, size;

    	if (prev === null) {
    		// first data: its size is double based on the next point or,
    		// if it's also the last data, we use the scale size.
    		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    	}

    	if (next === null) {
    		// last data: its size is also double based on the previous point.
    		next = curr + curr - prev;
    	}

    	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    	size = Math.abs(next - prev) / 2 * percent;

    	return {
    		chunk: size / ruler.stackCount,
    		ratio: options.barPercentage,
    		start: start
    	};
    }

    var controller_bar = core_datasetController.extend({

    	dataElementType: elements.Rectangle,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderSkipped',
    		'borderWidth',
    		'barPercentage',
    		'barThickness',
    		'categoryPercentage',
    		'maxBarThickness',
    		'minBarLength'
    	],

    	initialize: function() {
    		var me = this;
    		var meta, scaleOpts;

    		core_datasetController.prototype.initialize.apply(me, arguments);

    		meta = me.getMeta();
    		meta.stack = me.getDataset().stack;
    		meta.bar = true;

    		scaleOpts = me._getIndexScale().options;
    		deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
    		deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
    		deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
    		deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
    		deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
    	},

    	update: function(reset) {
    		var me = this;
    		var rects = me.getMeta().data;
    		var i, ilen;

    		me._ruler = me.getRuler();

    		for (i = 0, ilen = rects.length; i < ilen; ++i) {
    			me.updateElement(rects[i], i, reset);
    		}
    	},

    	updateElement: function(rectangle, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var dataset = me.getDataset();
    		var options = me._resolveDataElementOptions(rectangle, index);

    		rectangle._xScale = me.getScaleForId(meta.xAxisID);
    		rectangle._yScale = me.getScaleForId(meta.yAxisID);
    		rectangle._datasetIndex = me.index;
    		rectangle._index = index;
    		rectangle._model = {
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderSkipped: options.borderSkipped,
    			borderWidth: options.borderWidth,
    			datasetLabel: dataset.label,
    			label: me.chart.data.labels[index]
    		};

    		if (helpers$1.isArray(dataset.data[index])) {
    			rectangle._model.borderSkipped = null;
    		}

    		me._updateElementGeometry(rectangle, index, reset, options);

    		rectangle.pivot();
    	},

    	/**
    	 * @private
    	 */
    	_updateElementGeometry: function(rectangle, index, reset, options) {
    		var me = this;
    		var model = rectangle._model;
    		var vscale = me._getValueScale();
    		var base = vscale.getBasePixel();
    		var horizontal = vscale.isHorizontal();
    		var ruler = me._ruler || me.getRuler();
    		var vpixels = me.calculateBarValuePixels(me.index, index, options);
    		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);

    		model.horizontal = horizontal;
    		model.base = reset ? base : vpixels.base;
    		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
    		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
    		model.height = horizontal ? ipixels.size : undefined;
    		model.width = horizontal ? undefined : ipixels.size;
    	},

    	/**
    	 * Returns the stacks based on groups and bar visibility.
    	 * @param {number} [last] - The dataset index
    	 * @returns {string[]} The list of stack IDs
    	 * @private
    	 */
    	_getStacks: function(last) {
    		var me = this;
    		var scale = me._getIndexScale();
    		var metasets = scale._getMatchingVisibleMetas(me._type);
    		var stacked = scale.options.stacked;
    		var ilen = metasets.length;
    		var stacks = [];
    		var i, meta;

    		for (i = 0; i < ilen; ++i) {
    			meta = metasets[i];
    			// stacked   | meta.stack
    			//           | found | not found | undefined
    			// false     |   x   |     x     |     x
    			// true      |       |     x     |
    			// undefined |       |     x     |     x
    			if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
    				(stacked === undefined && meta.stack === undefined)) {
    				stacks.push(meta.stack);
    			}
    			if (meta.index === last) {
    				break;
    			}
    		}

    		return stacks;
    	},

    	/**
    	 * Returns the effective number of stacks based on groups and bar visibility.
    	 * @private
    	 */
    	getStackCount: function() {
    		return this._getStacks().length;
    	},

    	/**
    	 * Returns the stack index for the given dataset based on groups and bar visibility.
    	 * @param {number} [datasetIndex] - The dataset index
    	 * @param {string} [name] - The stack name to find
    	 * @returns {number} The stack index
    	 * @private
    	 */
    	getStackIndex: function(datasetIndex, name) {
    		var stacks = this._getStacks(datasetIndex);
    		var index = (name !== undefined)
    			? stacks.indexOf(name)
    			: -1; // indexOf returns -1 if element is not present

    		return (index === -1)
    			? stacks.length - 1
    			: index;
    	},

    	/**
    	 * @private
    	 */
    	getRuler: function() {
    		var me = this;
    		var scale = me._getIndexScale();
    		var pixels = [];
    		var i, ilen;

    		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
    			pixels.push(scale.getPixelForValue(null, i, me.index));
    		}

    		return {
    			pixels: pixels,
    			start: scale._startPixel,
    			end: scale._endPixel,
    			stackCount: me.getStackCount(),
    			scale: scale
    		};
    	},

    	/**
    	 * Note: pixel values are not clamped to the scale area.
    	 * @private
    	 */
    	calculateBarValuePixels: function(datasetIndex, index, options) {
    		var me = this;
    		var chart = me.chart;
    		var scale = me._getValueScale();
    		var isHorizontal = scale.isHorizontal();
    		var datasets = chart.data.datasets;
    		var metasets = scale._getMatchingVisibleMetas(me._type);
    		var value = scale._parseValue(datasets[datasetIndex].data[index]);
    		var minBarLength = options.minBarLength;
    		var stacked = scale.options.stacked;
    		var stack = me.getMeta().stack;
    		var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
    		var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
    		var ilen = metasets.length;
    		var i, imeta, ivalue, base, head, size, stackLength;

    		if (stacked || (stacked === undefined && stack !== undefined)) {
    			for (i = 0; i < ilen; ++i) {
    				imeta = metasets[i];

    				if (imeta.index === datasetIndex) {
    					break;
    				}

    				if (imeta.stack === stack) {
    					stackLength = scale._parseValue(datasets[imeta.index].data[index]);
    					ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

    					if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
    						start += ivalue;
    					}
    				}
    			}
    		}

    		base = scale.getPixelForValue(start);
    		head = scale.getPixelForValue(start + length);
    		size = head - base;

    		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
    			size = minBarLength;
    			if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
    				head = base - minBarLength;
    			} else {
    				head = base + minBarLength;
    			}
    		}

    		return {
    			size: size,
    			base: base,
    			head: head,
    			center: head + size / 2
    		};
    	},

    	/**
    	 * @private
    	 */
    	calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
    		var me = this;
    		var range = options.barThickness === 'flex'
    			? computeFlexCategoryTraits(index, ruler, options)
    			: computeFitCategoryTraits(index, ruler, options);

    		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
    		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
    		var size = Math.min(
    			valueOrDefault$3(options.maxBarThickness, Infinity),
    			range.chunk * range.ratio);

    		return {
    			base: center - size / 2,
    			head: center + size / 2,
    			center: center,
    			size: size
    		};
    	},

    	draw: function() {
    		var me = this;
    		var chart = me.chart;
    		var scale = me._getValueScale();
    		var rects = me.getMeta().data;
    		var dataset = me.getDataset();
    		var ilen = rects.length;
    		var i = 0;

    		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

    		for (; i < ilen; ++i) {
    			var val = scale._parseValue(dataset.data[i]);
    			if (!isNaN(val.min) && !isNaN(val.max)) {
    				rects[i].draw();
    			}
    		}

    		helpers$1.canvas.unclipArea(chart.ctx);
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function() {
    		var me = this;
    		var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
    		var indexOpts = me._getIndexScale().options;
    		var valueOpts = me._getValueScale().options;

    		values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
    		values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
    		values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
    		values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
    		values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);

    		return values;
    	}

    });

    var valueOrDefault$4 = helpers$1.valueOrDefault;
    var resolve$1 = helpers$1.options.resolve;

    core_defaults._set('bubble', {
    	hover: {
    		mode: 'single'
    	},

    	scales: {
    		xAxes: [{
    			type: 'linear', // bubble should probably use a linear scale by default
    			position: 'bottom',
    			id: 'x-axis-0' // need an ID so datasets can reference the scale
    		}],
    		yAxes: [{
    			type: 'linear',
    			position: 'left',
    			id: 'y-axis-0'
    		}]
    	},

    	tooltips: {
    		callbacks: {
    			title: function() {
    				// Title doesn't make sense for scatter since we format the data as a point
    				return '';
    			},
    			label: function(item, data) {
    				var datasetLabel = data.datasets[item.datasetIndex].label || '';
    				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
    				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
    			}
    		}
    	}
    });

    var controller_bubble = core_datasetController.extend({
    	/**
    	 * @protected
    	 */
    	dataElementType: elements.Point,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    		'hoverRadius',
    		'hitRadius',
    		'pointStyle',
    		'rotation'
    	],

    	/**
    	 * @protected
    	 */
    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var points = meta.data;

    		// Update Points
    		helpers$1.each(points, function(point, index) {
    			me.updateElement(point, index, reset);
    		});
    	},

    	/**
    	 * @protected
    	 */
    	updateElement: function(point, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var custom = point.custom || {};
    		var xScale = me.getScaleForId(meta.xAxisID);
    		var yScale = me.getScaleForId(meta.yAxisID);
    		var options = me._resolveDataElementOptions(point, index);
    		var data = me.getDataset().data[index];
    		var dsIndex = me.index;

    		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
    		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

    		point._xScale = xScale;
    		point._yScale = yScale;
    		point._options = options;
    		point._datasetIndex = dsIndex;
    		point._index = index;
    		point._model = {
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			hitRadius: options.hitRadius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			radius: reset ? 0 : options.radius,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			x: x,
    			y: y,
    		};

    		point.pivot();
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
    		model.radius = options.radius + options.hoverRadius;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function(point, index) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var custom = point.custom || {};
    		var data = dataset.data[index] || {};
    		var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		// In case values were cached (and thus frozen), we need to clone the values
    		if (me._cachedDataOpts === values) {
    			values = helpers$1.extend({}, values);
    		}

    		// Custom radius resolution
    		values.radius = resolve$1([
    			custom.radius,
    			data.r,
    			me._config.radius,
    			chart.options.elements.point.radius
    		], context, index);

    		return values;
    	}
    });

    var valueOrDefault$5 = helpers$1.valueOrDefault;

    var PI$1 = Math.PI;
    var DOUBLE_PI$1 = PI$1 * 2;
    var HALF_PI$1 = PI$1 / 2;

    core_defaults._set('doughnut', {
    	animation: {
    		// Boolean - Whether we animate the rotation of the Doughnut
    		animateRotate: true,
    		// Boolean - Whether we animate scaling the Doughnut from the centre
    		animateScale: false
    	},
    	hover: {
    		mode: 'single'
    	},
    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var data = chart.data;
    		var datasets = data.datasets;
    		var labels = data.labels;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');
    		if (datasets.length) {
    			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
    				listItem = list.appendChild(document.createElement('li'));
    				listItemSpan = listItem.appendChild(document.createElement('span'));
    				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
    				if (labels[i]) {
    					listItem.appendChild(document.createTextNode(labels[i]));
    				}
    			}
    		}

    		return list.outerHTML;
    	},
    	legend: {
    		labels: {
    			generateLabels: function(chart) {
    				var data = chart.data;
    				if (data.labels.length && data.datasets.length) {
    					return data.labels.map(function(label, i) {
    						var meta = chart.getDatasetMeta(0);
    						var style = meta.controller.getStyle(i);

    						return {
    							text: label,
    							fillStyle: style.backgroundColor,
    							strokeStyle: style.borderColor,
    							lineWidth: style.borderWidth,
    							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

    							// Extra data used for toggling the correct item
    							index: i
    						};
    					});
    				}
    				return [];
    			}
    		},

    		onClick: function(e, legendItem) {
    			var index = legendItem.index;
    			var chart = this.chart;
    			var i, ilen, meta;

    			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    				meta = chart.getDatasetMeta(i);
    				// toggle visibility of index if exists
    				if (meta.data[index]) {
    					meta.data[index].hidden = !meta.data[index].hidden;
    				}
    			}

    			chart.update();
    		}
    	},

    	// The percentage of the chart that we cut out of the middle.
    	cutoutPercentage: 50,

    	// The rotation of the chart, where the first data arc begins.
    	rotation: -HALF_PI$1,

    	// The total circumference of the chart.
    	circumference: DOUBLE_PI$1,

    	// Need to override these to give a nice default
    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';
    			},
    			label: function(tooltipItem, data) {
    				var dataLabel = data.labels[tooltipItem.index];
    				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

    				if (helpers$1.isArray(dataLabel)) {
    					// show value on first line of multiline label
    					// need to clone because we are changing the value
    					dataLabel = dataLabel.slice();
    					dataLabel[0] += value;
    				} else {
    					dataLabel += value;
    				}

    				return dataLabel;
    			}
    		}
    	}
    });

    var controller_doughnut = core_datasetController.extend({

    	dataElementType: elements.Arc,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'borderAlign',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    	],

    	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
    	getRingIndex: function(datasetIndex) {
    		var ringIndex = 0;

    		for (var j = 0; j < datasetIndex; ++j) {
    			if (this.chart.isDatasetVisible(j)) {
    				++ringIndex;
    			}
    		}

    		return ringIndex;
    	},

    	update: function(reset) {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var ratioX = 1;
    		var ratioY = 1;
    		var offsetX = 0;
    		var offsetY = 0;
    		var meta = me.getMeta();
    		var arcs = meta.data;
    		var cutout = opts.cutoutPercentage / 100 || 0;
    		var circumference = opts.circumference;
    		var chartWeight = me._getRingWeight(me.index);
    		var maxWidth, maxHeight, i, ilen;

    		// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
    		if (circumference < DOUBLE_PI$1) {
    			var startAngle = opts.rotation % DOUBLE_PI$1;
    			startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
    			var endAngle = startAngle + circumference;
    			var startX = Math.cos(startAngle);
    			var startY = Math.sin(startAngle);
    			var endX = Math.cos(endAngle);
    			var endY = Math.sin(endAngle);
    			var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
    			var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
    			var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
    			var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
    			var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
    			var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
    			var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
    			var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
    			ratioX = (maxX - minX) / 2;
    			ratioY = (maxY - minY) / 2;
    			offsetX = -(maxX + minX) / 2;
    			offsetY = -(maxY + minY) / 2;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
    		}

    		chart.borderWidth = me.getMaxBorderWidth();
    		maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
    		maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
    		chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    		chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
    		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
    		chart.offsetX = offsetX * chart.outerRadius;
    		chart.offsetY = offsetY * chart.outerRadius;

    		meta.total = me.calculateTotal();

    		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
    		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			me.updateElement(arcs[i], i, reset);
    		}
    	},

    	updateElement: function(arc, index, reset) {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var animationOpts = opts.animation;
    		var centerX = (chartArea.left + chartArea.right) / 2;
    		var centerY = (chartArea.top + chartArea.bottom) / 2;
    		var startAngle = opts.rotation; // non reset case handled later
    		var endAngle = opts.rotation; // non reset case handled later
    		var dataset = me.getDataset();
    		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
    		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
    		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
    		var options = arc._options || {};

    		helpers$1.extend(arc, {
    			// Utility
    			_datasetIndex: me.index,
    			_index: index,

    			// Desired view properties
    			_model: {
    				backgroundColor: options.backgroundColor,
    				borderColor: options.borderColor,
    				borderWidth: options.borderWidth,
    				borderAlign: options.borderAlign,
    				x: centerX + chart.offsetX,
    				y: centerY + chart.offsetY,
    				startAngle: startAngle,
    				endAngle: endAngle,
    				circumference: circumference,
    				outerRadius: outerRadius,
    				innerRadius: innerRadius,
    				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
    			}
    		});

    		var model = arc._model;

    		// Set correct angles if not resetting
    		if (!reset || !animationOpts.animateRotate) {
    			if (index === 0) {
    				model.startAngle = opts.rotation;
    			} else {
    				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
    			}

    			model.endAngle = model.startAngle + model.circumference;
    		}

    		arc.pivot();
    	},

    	calculateTotal: function() {
    		var dataset = this.getDataset();
    		var meta = this.getMeta();
    		var total = 0;
    		var value;

    		helpers$1.each(meta.data, function(element, index) {
    			value = dataset.data[index];
    			if (!isNaN(value) && !element.hidden) {
    				total += Math.abs(value);
    			}
    		});

    		/* if (total === 0) {
    			total = NaN;
    		}*/

    		return total;
    	},

    	calculateCircumference: function(value) {
    		var total = this.getMeta().total;
    		if (total > 0 && !isNaN(value)) {
    			return DOUBLE_PI$1 * (Math.abs(value) / total);
    		}
    		return 0;
    	},

    	// gets the max border or hover width to properly scale pie charts
    	getMaxBorderWidth: function(arcs) {
    		var me = this;
    		var max = 0;
    		var chart = me.chart;
    		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

    		if (!arcs) {
    			// Find the outmost visible dataset
    			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
    				if (chart.isDatasetVisible(i)) {
    					meta = chart.getDatasetMeta(i);
    					arcs = meta.data;
    					if (i !== me.index) {
    						controller = meta.controller;
    					}
    					break;
    				}
    			}
    		}

    		if (!arcs) {
    			return 0;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arc = arcs[i];
    			if (controller) {
    				controller._configure();
    				options = controller._resolveDataElementOptions(arc, i);
    			} else {
    				options = arc._options;
    			}
    			if (options.borderAlign !== 'inner') {
    				borderWidth = options.borderWidth;
    				hoverWidth = options.hoverBorderWidth;

    				max = borderWidth > max ? borderWidth : max;
    				max = hoverWidth > max ? hoverWidth : max;
    			}
    		}
    		return max;
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(arc) {
    		var model = arc._model;
    		var options = arc._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		arc.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    		};

    		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
    	},

    	/**
    	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
    	 * @private
    	 */
    	_getRingWeightOffset: function(datasetIndex) {
    		var ringWeightOffset = 0;

    		for (var i = 0; i < datasetIndex; ++i) {
    			if (this.chart.isDatasetVisible(i)) {
    				ringWeightOffset += this._getRingWeight(i);
    			}
    		}

    		return ringWeightOffset;
    	},

    	/**
    	 * @private
    	 */
    	_getRingWeight: function(dataSetIndex) {
    		return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
    	},

    	/**
    	 * Returns the sum of all visibile data set weights.  This value can be 0.
    	 * @private
    	 */
    	_getVisibleDatasetWeightTotal: function() {
    		return this._getRingWeightOffset(this.chart.data.datasets.length);
    	}
    });

    core_defaults._set('horizontalBar', {
    	hover: {
    		mode: 'index',
    		axis: 'y'
    	},

    	scales: {
    		xAxes: [{
    			type: 'linear',
    			position: 'bottom'
    		}],

    		yAxes: [{
    			type: 'category',
    			position: 'left',
    			offset: true,
    			gridLines: {
    				offsetGridLines: true
    			}
    		}]
    	},

    	elements: {
    		rectangle: {
    			borderSkipped: 'left'
    		}
    	},

    	tooltips: {
    		mode: 'index',
    		axis: 'y'
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		horizontalBar: {
    			categoryPercentage: 0.8,
    			barPercentage: 0.9
    		}
    	}
    });

    var controller_horizontalBar = controller_bar.extend({
    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.getMeta().xAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.getMeta().yAxisID;
    	}
    });

    var valueOrDefault$6 = helpers$1.valueOrDefault;
    var resolve$2 = helpers$1.options.resolve;
    var isPointInArea = helpers$1.canvas._isPointInArea;

    core_defaults._set('line', {
    	showLines: true,
    	spanGaps: false,

    	hover: {
    		mode: 'label'
    	},

    	scales: {
    		xAxes: [{
    			type: 'category',
    			id: 'x-axis-0'
    		}],
    		yAxes: [{
    			type: 'linear',
    			id: 'y-axis-0'
    		}]
    	}
    });

    function scaleClip(scale, halfBorderWidth) {
    	var tickOpts = scale && scale.options.ticks || {};
    	var reverse = tickOpts.reverse;
    	var min = tickOpts.min === undefined ? halfBorderWidth : 0;
    	var max = tickOpts.max === undefined ? halfBorderWidth : 0;
    	return {
    		start: reverse ? max : min,
    		end: reverse ? min : max
    	};
    }

    function defaultClip(xScale, yScale, borderWidth) {
    	var halfBorderWidth = borderWidth / 2;
    	var x = scaleClip(xScale, halfBorderWidth);
    	var y = scaleClip(yScale, halfBorderWidth);

    	return {
    		top: y.end,
    		right: x.end,
    		bottom: y.start,
    		left: x.start
    	};
    }

    function toClip(value) {
    	var t, r, b, l;

    	if (helpers$1.isObject(value)) {
    		t = value.top;
    		r = value.right;
    		b = value.bottom;
    		l = value.left;
    	} else {
    		t = r = b = l = value;
    	}

    	return {
    		top: t,
    		right: r,
    		bottom: b,
    		left: l
    	};
    }


    var controller_line = core_datasetController.extend({

    	datasetElementType: elements.Line,

    	dataElementType: elements.Point,

    	/**
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderCapStyle',
    		'borderColor',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'borderWidth',
    		'cubicInterpolationMode',
    		'fill'
    	],

    	/**
    	 * @private
    	 */
    	_dataElementOptions: {
    		backgroundColor: 'pointBackgroundColor',
    		borderColor: 'pointBorderColor',
    		borderWidth: 'pointBorderWidth',
    		hitRadius: 'pointHitRadius',
    		hoverBackgroundColor: 'pointHoverBackgroundColor',
    		hoverBorderColor: 'pointHoverBorderColor',
    		hoverBorderWidth: 'pointHoverBorderWidth',
    		hoverRadius: 'pointHoverRadius',
    		pointStyle: 'pointStyle',
    		radius: 'pointRadius',
    		rotation: 'pointRotation'
    	},

    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var line = meta.dataset;
    		var points = meta.data || [];
    		var options = me.chart.options;
    		var config = me._config;
    		var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
    		var i, ilen;

    		me._xScale = me.getScaleForId(meta.xAxisID);
    		me._yScale = me.getScaleForId(meta.yAxisID);

    		// Update Line
    		if (showLine) {
    			// Compatibility: If the properties are defined with only the old name, use those values
    			if (config.tension !== undefined && config.lineTension === undefined) {
    				config.lineTension = config.tension;
    			}

    			// Utility
    			line._scale = me._yScale;
    			line._datasetIndex = me.index;
    			// Data
    			line._children = points;
    			// Model
    			line._model = me._resolveDatasetElementOptions(line);

    			line.pivot();
    		}

    		// Update Points
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			me.updateElement(points[i], i, reset);
    		}

    		if (showLine && line._model.tension !== 0) {
    			me.updateBezierControlPoints();
    		}

    		// Now pivot the point for animation
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			points[i].pivot();
    		}
    	},

    	updateElement: function(point, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var custom = point.custom || {};
    		var dataset = me.getDataset();
    		var datasetIndex = me.index;
    		var value = dataset.data[index];
    		var xScale = me._xScale;
    		var yScale = me._yScale;
    		var lineModel = meta.dataset._model;
    		var x, y;

    		var options = me._resolveDataElementOptions(point, index);

    		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
    		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

    		// Utility
    		point._xScale = xScale;
    		point._yScale = yScale;
    		point._options = options;
    		point._datasetIndex = datasetIndex;
    		point._index = index;

    		// Desired view properties
    		point._model = {
    			x: x,
    			y: y,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			// Appearance
    			radius: options.radius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
    			steppedLine: lineModel ? lineModel.steppedLine : false,
    			// Tooltip
    			hitRadius: options.hitRadius
    		};
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function(element) {
    		var me = this;
    		var config = me._config;
    		var custom = element.custom || {};
    		var options = me.chart.options;
    		var lineOptions = options.elements.line;
    		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

    		// The default behavior of lines is to break at null values, according
    		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
    		// This option gives lines the ability to span gaps
    		values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
    		values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
    		values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
    		values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));

    		return values;
    	},

    	calculatePointY: function(value, index, datasetIndex) {
    		var me = this;
    		var chart = me.chart;
    		var yScale = me._yScale;
    		var sumPos = 0;
    		var sumNeg = 0;
    		var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

    		if (yScale.options.stacked) {
    			rightValue = +yScale.getRightValue(value);
    			metasets = chart._getSortedVisibleDatasetMetas();
    			ilen = metasets.length;

    			for (i = 0; i < ilen; ++i) {
    				dsMeta = metasets[i];
    				if (dsMeta.index === datasetIndex) {
    					break;
    				}

    				ds = chart.data.datasets[dsMeta.index];
    				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
    					stackedRightValue = +yScale.getRightValue(ds.data[index]);
    					if (stackedRightValue < 0) {
    						sumNeg += stackedRightValue || 0;
    					} else {
    						sumPos += stackedRightValue || 0;
    					}
    				}
    			}

    			if (rightValue < 0) {
    				return yScale.getPixelForValue(sumNeg + rightValue);
    			}
    			return yScale.getPixelForValue(sumPos + rightValue);
    		}
    		return yScale.getPixelForValue(value);
    	},

    	updateBezierControlPoints: function() {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var lineModel = meta.dataset._model;
    		var area = chart.chartArea;
    		var points = meta.data || [];
    		var i, ilen, model, controlPoints;

    		// Only consider points that are drawn in case the spanGaps option is used
    		if (lineModel.spanGaps) {
    			points = points.filter(function(pt) {
    				return !pt._model.skip;
    			});
    		}

    		function capControlPoint(pt, min, max) {
    			return Math.max(Math.min(pt, max), min);
    		}

    		if (lineModel.cubicInterpolationMode === 'monotone') {
    			helpers$1.splineCurveMonotone(points);
    		} else {
    			for (i = 0, ilen = points.length; i < ilen; ++i) {
    				model = points[i]._model;
    				controlPoints = helpers$1.splineCurve(
    					helpers$1.previousItem(points, i)._model,
    					model,
    					helpers$1.nextItem(points, i)._model,
    					lineModel.tension
    				);
    				model.controlPointPreviousX = controlPoints.previous.x;
    				model.controlPointPreviousY = controlPoints.previous.y;
    				model.controlPointNextX = controlPoints.next.x;
    				model.controlPointNextY = controlPoints.next.y;
    			}
    		}

    		if (chart.options.elements.line.capBezierPoints) {
    			for (i = 0, ilen = points.length; i < ilen; ++i) {
    				model = points[i]._model;
    				if (isPointInArea(model, area)) {
    					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
    						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
    						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
    					}
    					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
    						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
    						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
    					}
    				}
    			}
    		}
    	},

    	draw: function() {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var points = meta.data || [];
    		var area = chart.chartArea;
    		var canvas = chart.canvas;
    		var i = 0;
    		var ilen = points.length;
    		var clip;

    		if (me._showLine) {
    			clip = meta.dataset._model.clip;

    			helpers$1.canvas.clipArea(chart.ctx, {
    				left: clip.left === false ? 0 : area.left - clip.left,
    				right: clip.right === false ? canvas.width : area.right + clip.right,
    				top: clip.top === false ? 0 : area.top - clip.top,
    				bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
    			});

    			meta.dataset.draw();

    			helpers$1.canvas.unclipArea(chart.ctx);
    		}

    		// Draw the points
    		for (; i < ilen; ++i) {
    			points[i].draw(area);
    		}
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
    		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
    	},
    });

    var resolve$3 = helpers$1.options.resolve;

    core_defaults._set('polarArea', {
    	scale: {
    		type: 'radialLinear',
    		angleLines: {
    			display: false
    		},
    		gridLines: {
    			circular: true
    		},
    		pointLabels: {
    			display: false
    		},
    		ticks: {
    			beginAtZero: true
    		}
    	},

    	// Boolean - Whether to animate the rotation of the chart
    	animation: {
    		animateRotate: true,
    		animateScale: true
    	},

    	startAngle: -0.5 * Math.PI,
    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var data = chart.data;
    		var datasets = data.datasets;
    		var labels = data.labels;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');
    		if (datasets.length) {
    			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
    				listItem = list.appendChild(document.createElement('li'));
    				listItemSpan = listItem.appendChild(document.createElement('span'));
    				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
    				if (labels[i]) {
    					listItem.appendChild(document.createTextNode(labels[i]));
    				}
    			}
    		}

    		return list.outerHTML;
    	},
    	legend: {
    		labels: {
    			generateLabels: function(chart) {
    				var data = chart.data;
    				if (data.labels.length && data.datasets.length) {
    					return data.labels.map(function(label, i) {
    						var meta = chart.getDatasetMeta(0);
    						var style = meta.controller.getStyle(i);

    						return {
    							text: label,
    							fillStyle: style.backgroundColor,
    							strokeStyle: style.borderColor,
    							lineWidth: style.borderWidth,
    							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

    							// Extra data used for toggling the correct item
    							index: i
    						};
    					});
    				}
    				return [];
    			}
    		},

    		onClick: function(e, legendItem) {
    			var index = legendItem.index;
    			var chart = this.chart;
    			var i, ilen, meta;

    			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    				meta = chart.getDatasetMeta(i);
    				meta.data[index].hidden = !meta.data[index].hidden;
    			}

    			chart.update();
    		}
    	},

    	// Need to override these to give a nice default
    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';
    			},
    			label: function(item, data) {
    				return data.labels[item.index] + ': ' + item.yLabel;
    			}
    		}
    	}
    });

    var controller_polarArea = core_datasetController.extend({

    	dataElementType: elements.Arc,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'borderAlign',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    	],

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.chart.scale.id;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.chart.scale.id;
    	},

    	update: function(reset) {
    		var me = this;
    		var dataset = me.getDataset();
    		var meta = me.getMeta();
    		var start = me.chart.options.startAngle || 0;
    		var starts = me._starts = [];
    		var angles = me._angles = [];
    		var arcs = meta.data;
    		var i, ilen, angle;

    		me._updateRadius();

    		meta.count = me.countVisibleElements();

    		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
    			starts[i] = start;
    			angle = me._computeAngle(i);
    			angles[i] = angle;
    			start += angle;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
    			me.updateElement(arcs[i], i, reset);
    		}
    	},

    	/**
    	 * @private
    	 */
    	_updateRadius: function() {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

    		chart.outerRadius = Math.max(minSize / 2, 0);
    		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
    		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

    		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
    		me.innerRadius = me.outerRadius - chart.radiusLength;
    	},

    	updateElement: function(arc, index, reset) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var opts = chart.options;
    		var animationOpts = opts.animation;
    		var scale = chart.scale;
    		var labels = chart.data.labels;

    		var centerX = scale.xCenter;
    		var centerY = scale.yCenter;

    		// var negHalfPI = -0.5 * Math.PI;
    		var datasetStartAngle = opts.startAngle;
    		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    		var startAngle = me._starts[index];
    		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

    		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    		var options = arc._options || {};

    		helpers$1.extend(arc, {
    			// Utility
    			_datasetIndex: me.index,
    			_index: index,
    			_scale: scale,

    			// Desired view properties
    			_model: {
    				backgroundColor: options.backgroundColor,
    				borderColor: options.borderColor,
    				borderWidth: options.borderWidth,
    				borderAlign: options.borderAlign,
    				x: centerX,
    				y: centerY,
    				innerRadius: 0,
    				outerRadius: reset ? resetRadius : distance,
    				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
    				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
    				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
    			}
    		});

    		arc.pivot();
    	},

    	countVisibleElements: function() {
    		var dataset = this.getDataset();
    		var meta = this.getMeta();
    		var count = 0;

    		helpers$1.each(meta.data, function(element, index) {
    			if (!isNaN(dataset.data[index]) && !element.hidden) {
    				count++;
    			}
    		});

    		return count;
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(arc) {
    		var model = arc._model;
    		var options = arc._options;
    		var getHoverColor = helpers$1.getHoverColor;
    		var valueOrDefault = helpers$1.valueOrDefault;

    		arc.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    		};

    		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
    	},

    	/**
    	 * @private
    	 */
    	_computeAngle: function(index) {
    		var me = this;
    		var count = this.getMeta().count;
    		var dataset = me.getDataset();
    		var meta = me.getMeta();

    		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
    			return 0;
    		}

    		// Scriptable options
    		var context = {
    			chart: me.chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		return resolve$3([
    			me.chart.options.elements.arc.angle,
    			(2 * Math.PI) / count
    		], context, index);
    	}
    });

    core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
    core_defaults._set('pie', {
    	cutoutPercentage: 0
    });

    // Pie charts are Doughnut chart with different defaults
    var controller_pie = controller_doughnut;

    var valueOrDefault$7 = helpers$1.valueOrDefault;

    core_defaults._set('radar', {
    	spanGaps: false,
    	scale: {
    		type: 'radialLinear'
    	},
    	elements: {
    		line: {
    			fill: 'start',
    			tension: 0 // no bezier in radar
    		}
    	}
    });

    var controller_radar = core_datasetController.extend({
    	datasetElementType: elements.Line,

    	dataElementType: elements.Point,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderWidth',
    		'borderColor',
    		'borderCapStyle',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'fill'
    	],

    	/**
    	 * @private
    	 */
    	_dataElementOptions: {
    		backgroundColor: 'pointBackgroundColor',
    		borderColor: 'pointBorderColor',
    		borderWidth: 'pointBorderWidth',
    		hitRadius: 'pointHitRadius',
    		hoverBackgroundColor: 'pointHoverBackgroundColor',
    		hoverBorderColor: 'pointHoverBorderColor',
    		hoverBorderWidth: 'pointHoverBorderWidth',
    		hoverRadius: 'pointHoverRadius',
    		pointStyle: 'pointStyle',
    		radius: 'pointRadius',
    		rotation: 'pointRotation'
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.chart.scale.id;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.chart.scale.id;
    	},

    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var line = meta.dataset;
    		var points = meta.data || [];
    		var scale = me.chart.scale;
    		var config = me._config;
    		var i, ilen;

    		// Compatibility: If the properties are defined with only the old name, use those values
    		if (config.tension !== undefined && config.lineTension === undefined) {
    			config.lineTension = config.tension;
    		}

    		// Utility
    		line._scale = scale;
    		line._datasetIndex = me.index;
    		// Data
    		line._children = points;
    		line._loop = true;
    		// Model
    		line._model = me._resolveDatasetElementOptions(line);

    		line.pivot();

    		// Update Points
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			me.updateElement(points[i], i, reset);
    		}

    		// Update bezier control points
    		me.updateBezierControlPoints();

    		// Now pivot the point for animation
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			points[i].pivot();
    		}
    	},

    	updateElement: function(point, index, reset) {
    		var me = this;
    		var custom = point.custom || {};
    		var dataset = me.getDataset();
    		var scale = me.chart.scale;
    		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
    		var options = me._resolveDataElementOptions(point, index);
    		var lineModel = me.getMeta().dataset._model;
    		var x = reset ? scale.xCenter : pointPosition.x;
    		var y = reset ? scale.yCenter : pointPosition.y;

    		// Utility
    		point._scale = scale;
    		point._options = options;
    		point._datasetIndex = me.index;
    		point._index = index;

    		// Desired view properties
    		point._model = {
    			x: x, // value not used in dataset scale, but we want a consistent API between scales
    			y: y,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			// Appearance
    			radius: options.radius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),

    			// Tooltip
    			hitRadius: options.hitRadius
    		};
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function() {
    		var me = this;
    		var config = me._config;
    		var options = me.chart.options;
    		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

    		values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
    		values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);

    		return values;
    	},

    	updateBezierControlPoints: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var area = me.chart.chartArea;
    		var points = meta.data || [];
    		var i, ilen, model, controlPoints;

    		// Only consider points that are drawn in case the spanGaps option is used
    		if (meta.dataset._model.spanGaps) {
    			points = points.filter(function(pt) {
    				return !pt._model.skip;
    			});
    		}

    		function capControlPoint(pt, min, max) {
    			return Math.max(Math.min(pt, max), min);
    		}

    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			model = points[i]._model;
    			controlPoints = helpers$1.splineCurve(
    				helpers$1.previousItem(points, i, true)._model,
    				model,
    				helpers$1.nextItem(points, i, true)._model,
    				model.tension
    			);

    			// Prevent the bezier going outside of the bounds of the graph
    			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
    			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
    			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
    			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
    		}
    	},

    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
    		model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
    	}
    });

    core_defaults._set('scatter', {
    	hover: {
    		mode: 'single'
    	},

    	scales: {
    		xAxes: [{
    			id: 'x-axis-1',    // need an ID so datasets can reference the scale
    			type: 'linear',    // scatter should not use a category axis
    			position: 'bottom'
    		}],
    		yAxes: [{
    			id: 'y-axis-1',
    			type: 'linear',
    			position: 'left'
    		}]
    	},

    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';     // doesn't make sense for scatter since data are formatted as a point
    			},
    			label: function(item) {
    				return '(' + item.xLabel + ', ' + item.yLabel + ')';
    			}
    		}
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		scatter: {
    			showLine: false
    		}
    	}
    });

    // Scatter charts use line controllers
    var controller_scatter = controller_line;

    // NOTE export a map in which the key represents the controller type, not
    // the class, and so must be CamelCase in order to be correctly retrieved
    // by the controller in core.controller.js (`controllers[meta.type]`).

    var controllers = {
    	bar: controller_bar,
    	bubble: controller_bubble,
    	doughnut: controller_doughnut,
    	horizontalBar: controller_horizontalBar,
    	line: controller_line,
    	polarArea: controller_polarArea,
    	pie: controller_pie,
    	radar: controller_radar,
    	scatter: controller_scatter
    };

    /**
     * Helper function to get relative position for an event
     * @param {Event|IEvent} event - The event to get the position for
     * @param {Chart} chart - The chart
     * @returns {object} the event position
     */
    function getRelativePosition(e, chart) {
    	if (e.native) {
    		return {
    			x: e.x,
    			y: e.y
    		};
    	}

    	return helpers$1.getRelativePosition(e, chart);
    }

    /**
     * Helper function to traverse all of the visible elements in the chart
     * @param {Chart} chart - the chart
     * @param {function} handler - the callback to execute for each visible item
     */
    function parseVisibleItems(chart, handler) {
    	var metasets = chart._getSortedVisibleDatasetMetas();
    	var metadata, i, j, ilen, jlen, element;

    	for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    		metadata = metasets[i].data;
    		for (j = 0, jlen = metadata.length; j < jlen; ++j) {
    			element = metadata[j];
    			if (!element._view.skip) {
    				handler(element);
    			}
    		}
    	}
    }

    /**
     * Helper function to get the items that intersect the event position
     * @param {ChartElement[]} items - elements to filter
     * @param {object} position - the point to be nearest to
     * @return {ChartElement[]} the nearest items
     */
    function getIntersectItems(chart, position) {
    	var elements = [];

    	parseVisibleItems(chart, function(element) {
    		if (element.inRange(position.x, position.y)) {
    			elements.push(element);
    		}
    	});

    	return elements;
    }

    /**
     * Helper function to get the items nearest to the event position considering all visible items in teh chart
     * @param {Chart} chart - the chart to look at elements from
     * @param {object} position - the point to be nearest to
     * @param {boolean} intersect - if true, only consider items that intersect the position
     * @param {function} distanceMetric - function to provide the distance between points
     * @return {ChartElement[]} the nearest items
     */
    function getNearestItems(chart, position, intersect, distanceMetric) {
    	var minDistance = Number.POSITIVE_INFINITY;
    	var nearestItems = [];

    	parseVisibleItems(chart, function(element) {
    		if (intersect && !element.inRange(position.x, position.y)) {
    			return;
    		}

    		var center = element.getCenterPoint();
    		var distance = distanceMetric(position, center);
    		if (distance < minDistance) {
    			nearestItems = [element];
    			minDistance = distance;
    		} else if (distance === minDistance) {
    			// Can have multiple items at the same distance in which case we sort by size
    			nearestItems.push(element);
    		}
    	});

    	return nearestItems;
    }

    /**
     * Get a distance metric function for two points based on the
     * axis mode setting
     * @param {string} axis - the axis mode. x|y|xy
     */
    function getDistanceMetricForAxis(axis) {
    	var useX = axis.indexOf('x') !== -1;
    	var useY = axis.indexOf('y') !== -1;

    	return function(pt1, pt2) {
    		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    	};
    }

    function indexMode(chart, e, options) {
    	var position = getRelativePosition(e, chart);
    	// Default axis for index mode is 'x' to match old behaviour
    	options.axis = options.axis || 'x';
    	var distanceMetric = getDistanceMetricForAxis(options.axis);
    	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
    	var elements = [];

    	if (!items.length) {
    		return [];
    	}

    	chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
    		var element = meta.data[items[0]._index];

    		// don't count items that are skipped (null data)
    		if (element && !element._view.skip) {
    			elements.push(element);
    		}
    	});

    	return elements;
    }

    /**
     * @interface IInteractionOptions
     */
    /**
     * If true, only consider items that intersect the point
     * @name IInterfaceOptions#boolean
     * @type Boolean
     */

    /**
     * Contains interaction related functions
     * @namespace Chart.Interaction
     */
    var core_interaction = {
    	// Helper function for different modes
    	modes: {
    		single: function(chart, e) {
    			var position = getRelativePosition(e, chart);
    			var elements = [];

    			parseVisibleItems(chart, function(element) {
    				if (element.inRange(position.x, position.y)) {
    					elements.push(element);
    					return elements;
    				}
    			});

    			return elements.slice(0, 1);
    		},

    		/**
    		 * @function Chart.Interaction.modes.label
    		 * @deprecated since version 2.4.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		label: indexMode,

    		/**
    		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
    		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
    		 * @function Chart.Interaction.modes.index
    		 * @since v2.4.0
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use during interaction
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		index: indexMode,

    		/**
    		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
    		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
    		 * @function Chart.Interaction.modes.dataset
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use during interaction
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		dataset: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			options.axis = options.axis || 'xy';
    			var distanceMetric = getDistanceMetricForAxis(options.axis);
    			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

    			if (items.length > 0) {
    				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
    			}

    			return items;
    		},

    		/**
    		 * @function Chart.Interaction.modes.x-axis
    		 * @deprecated since version 2.4.0. Use index mode and intersect == true
    		 * @todo remove at version 3
    		 * @private
    		 */
    		'x-axis': function(chart, e) {
    			return indexMode(chart, e, {intersect: false});
    		},

    		/**
    		 * Point mode returns all elements that hit test based on the event position
    		 * of the event
    		 * @function Chart.Interaction.modes.intersect
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		point: function(chart, e) {
    			var position = getRelativePosition(e, chart);
    			return getIntersectItems(chart, position);
    		},

    		/**
    		 * nearest mode returns the element closest to the point
    		 * @function Chart.Interaction.modes.intersect
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		nearest: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			options.axis = options.axis || 'xy';
    			var distanceMetric = getDistanceMetricForAxis(options.axis);
    			return getNearestItems(chart, position, options.intersect, distanceMetric);
    		},

    		/**
    		 * x mode returns the elements that hit-test at the current x coordinate
    		 * @function Chart.Interaction.modes.x
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		x: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			var items = [];
    			var intersectsItem = false;

    			parseVisibleItems(chart, function(element) {
    				if (element.inXRange(position.x)) {
    					items.push(element);
    				}

    				if (element.inRange(position.x, position.y)) {
    					intersectsItem = true;
    				}
    			});

    			// If we want to trigger on an intersect and we don't have any items
    			// that intersect the position, return nothing
    			if (options.intersect && !intersectsItem) {
    				items = [];
    			}
    			return items;
    		},

    		/**
    		 * y mode returns the elements that hit-test at the current y coordinate
    		 * @function Chart.Interaction.modes.y
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		y: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			var items = [];
    			var intersectsItem = false;

    			parseVisibleItems(chart, function(element) {
    				if (element.inYRange(position.y)) {
    					items.push(element);
    				}

    				if (element.inRange(position.x, position.y)) {
    					intersectsItem = true;
    				}
    			});

    			// If we want to trigger on an intersect and we don't have any items
    			// that intersect the position, return nothing
    			if (options.intersect && !intersectsItem) {
    				items = [];
    			}
    			return items;
    		}
    	}
    };

    var extend = helpers$1.extend;

    function filterByPosition(array, position) {
    	return helpers$1.where(array, function(v) {
    		return v.pos === position;
    	});
    }

    function sortByWeight(array, reverse) {
    	return array.sort(function(a, b) {
    		var v0 = reverse ? b : a;
    		var v1 = reverse ? a : b;
    		return v0.weight === v1.weight ?
    			v0.index - v1.index :
    			v0.weight - v1.weight;
    	});
    }

    function wrapBoxes(boxes) {
    	var layoutBoxes = [];
    	var i, ilen, box;

    	for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    		box = boxes[i];
    		layoutBoxes.push({
    			index: i,
    			box: box,
    			pos: box.position,
    			horizontal: box.isHorizontal(),
    			weight: box.weight
    		});
    	}
    	return layoutBoxes;
    }

    function setLayoutDims(layouts, params) {
    	var i, ilen, layout;
    	for (i = 0, ilen = layouts.length; i < ilen; ++i) {
    		layout = layouts[i];
    		// store width used instead of chartArea.w in fitBoxes
    		layout.width = layout.horizontal
    			? layout.box.fullWidth && params.availableWidth
    			: params.vBoxMaxWidth;
    		// store height used instead of chartArea.h in fitBoxes
    		layout.height = layout.horizontal && params.hBoxMaxHeight;
    	}
    }

    function buildLayoutBoxes(boxes) {
    	var layoutBoxes = wrapBoxes(boxes);
    	var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
    	var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
    	var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
    	var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));

    	return {
    		leftAndTop: left.concat(top),
    		rightAndBottom: right.concat(bottom),
    		chartArea: filterByPosition(layoutBoxes, 'chartArea'),
    		vertical: left.concat(right),
    		horizontal: top.concat(bottom)
    	};
    }

    function getCombinedMax(maxPadding, chartArea, a, b) {
    	return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
    }

    function updateDims(chartArea, params, layout) {
    	var box = layout.box;
    	var maxPadding = chartArea.maxPadding;
    	var newWidth, newHeight;

    	if (layout.size) {
    		// this layout was already counted for, lets first reduce old size
    		chartArea[layout.pos] -= layout.size;
    	}
    	layout.size = layout.horizontal ? box.height : box.width;
    	chartArea[layout.pos] += layout.size;

    	if (box.getPadding) {
    		var boxPadding = box.getPadding();
    		maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    		maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    		maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    		maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
    	}

    	newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
    	newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

    	if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
    		chartArea.w = newWidth;
    		chartArea.h = newHeight;

    		// return true if chart area changed in layout's direction
    		var sizes = layout.horizontal ? [newWidth, chartArea.w] : [newHeight, chartArea.h];
    		return sizes[0] !== sizes[1] && (!isNaN(sizes[0]) || !isNaN(sizes[1]));
    	}
    }

    function handleMaxPadding(chartArea) {
    	var maxPadding = chartArea.maxPadding;

    	function updatePos(pos) {
    		var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    		chartArea[pos] += change;
    		return change;
    	}
    	chartArea.y += updatePos('top');
    	chartArea.x += updatePos('left');
    	updatePos('right');
    	updatePos('bottom');
    }

    function getMargins(horizontal, chartArea) {
    	var maxPadding = chartArea.maxPadding;

    	function marginForPositions(positions) {
    		var margin = {left: 0, top: 0, right: 0, bottom: 0};
    		positions.forEach(function(pos) {
    			margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    		});
    		return margin;
    	}

    	return horizontal
    		? marginForPositions(['left', 'right'])
    		: marginForPositions(['top', 'bottom']);
    }

    function fitBoxes(boxes, chartArea, params) {
    	var refitBoxes = [];
    	var i, ilen, layout, box, refit, changed;

    	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
    		layout = boxes[i];
    		box = layout.box;

    		box.update(
    			layout.width || chartArea.w,
    			layout.height || chartArea.h,
    			getMargins(layout.horizontal, chartArea)
    		);
    		if (updateDims(chartArea, params, layout)) {
    			changed = true;
    			if (refitBoxes.length) {
    				// Dimensions changed and there were non full width boxes before this
    				// -> we have to refit those
    				refit = true;
    			}
    		}
    		if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
    			refitBoxes.push(layout);
    		}
    	}

    	return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
    }

    function placeBoxes(boxes, chartArea, params) {
    	var userPadding = params.padding;
    	var x = chartArea.x;
    	var y = chartArea.y;
    	var i, ilen, layout, box;

    	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
    		layout = boxes[i];
    		box = layout.box;
    		if (layout.horizontal) {
    			box.left = box.fullWidth ? userPadding.left : chartArea.left;
    			box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
    			box.top = y;
    			box.bottom = y + box.height;
    			box.width = box.right - box.left;
    			y = box.bottom;
    		} else {
    			box.left = x;
    			box.right = x + box.width;
    			box.top = chartArea.top;
    			box.bottom = chartArea.top + chartArea.h;
    			box.height = box.bottom - box.top;
    			x = box.right;
    		}
    	}

    	chartArea.x = x;
    	chartArea.y = y;
    }

    core_defaults._set('global', {
    	layout: {
    		padding: {
    			top: 0,
    			right: 0,
    			bottom: 0,
    			left: 0
    		}
    	}
    });

    /**
     * @interface ILayoutItem
     * @prop {string} position - The position of the item in the chart layout. Possible values are
     * 'left', 'top', 'right', 'bottom', and 'chartArea'
     * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
     * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
     * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
     * @prop {function} update - Takes two parameters: width and height. Returns size of item
     * @prop {function} getPadding -  Returns an object with padding on the edges
     * @prop {number} width - Width of item. Must be valid after update()
     * @prop {number} height - Height of item. Must be valid after update()
     * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
     * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
     * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
     * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
     */

    // The layout service is very self explanatory.  It's responsible for the layout within a chart.
    // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
    // It is this service's responsibility of carrying out that layout.
    var core_layouts = {
    	defaults: {},

    	/**
    	 * Register a box to a chart.
    	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
    	 * @param {Chart} chart - the chart to use
    	 * @param {ILayoutItem} item - the item to add to be layed out
    	 */
    	addBox: function(chart, item) {
    		if (!chart.boxes) {
    			chart.boxes = [];
    		}

    		// initialize item with default values
    		item.fullWidth = item.fullWidth || false;
    		item.position = item.position || 'top';
    		item.weight = item.weight || 0;
    		item._layers = item._layers || function() {
    			return [{
    				z: 0,
    				draw: function() {
    					item.draw.apply(item, arguments);
    				}
    			}];
    		};

    		chart.boxes.push(item);
    	},

    	/**
    	 * Remove a layoutItem from a chart
    	 * @param {Chart} chart - the chart to remove the box from
    	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
    	 */
    	removeBox: function(chart, layoutItem) {
    		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    		if (index !== -1) {
    			chart.boxes.splice(index, 1);
    		}
    	},

    	/**
    	 * Sets (or updates) options on the given `item`.
    	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
    	 * @param {ILayoutItem} item - the item to configure with the given options
    	 * @param {object} options - the new item options.
    	 */
    	configure: function(chart, item, options) {
    		var props = ['fullWidth', 'position', 'weight'];
    		var ilen = props.length;
    		var i = 0;
    		var prop;

    		for (; i < ilen; ++i) {
    			prop = props[i];
    			if (options.hasOwnProperty(prop)) {
    				item[prop] = options[prop];
    			}
    		}
    	},

    	/**
    	 * Fits boxes of the given chart into the given size by having each box measure itself
    	 * then running a fitting algorithm
    	 * @param {Chart} chart - the chart
    	 * @param {number} width - the width to fit into
    	 * @param {number} height - the height to fit into
    	 */
    	update: function(chart, width, height) {
    		if (!chart) {
    			return;
    		}

    		var layoutOptions = chart.options.layout || {};
    		var padding = helpers$1.options.toPadding(layoutOptions.padding);

    		var availableWidth = width - padding.width;
    		var availableHeight = height - padding.height;
    		var boxes = buildLayoutBoxes(chart.boxes);
    		var verticalBoxes = boxes.vertical;
    		var horizontalBoxes = boxes.horizontal;

    		// Essentially we now have any number of boxes on each of the 4 sides.
    		// Our canvas looks like the following.
    		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
    		// B1 is the bottom axis
    		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
    		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
    		// an error will be thrown.
    		//
    		// |----------------------------------------------------|
    		// |                  T1 (Full Width)                   |
    		// |----------------------------------------------------|
    		// |    |    |                 T2                  |    |
    		// |    |----|-------------------------------------|----|
    		// |    |    | C1 |                           | C2 |    |
    		// |    |    |----|                           |----|    |
    		// |    |    |                                     |    |
    		// | L1 | L2 |           ChartArea (C0)            | R1 |
    		// |    |    |                                     |    |
    		// |    |    |----|                           |----|    |
    		// |    |    | C3 |                           | C4 |    |
    		// |    |----|-------------------------------------|----|
    		// |    |    |                 B1                  |    |
    		// |----------------------------------------------------|
    		// |                  B2 (Full Width)                   |
    		// |----------------------------------------------------|
    		//

    		var params = Object.freeze({
    			outerWidth: width,
    			outerHeight: height,
    			padding: padding,
    			availableWidth: availableWidth,
    			vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
    			hBoxMaxHeight: availableHeight / 2
    		});
    		var chartArea = extend({
    			maxPadding: extend({}, padding),
    			w: availableWidth,
    			h: availableHeight,
    			x: padding.left,
    			y: padding.top
    		}, padding);

    		setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);

    		// First fit vertical boxes
    		fitBoxes(verticalBoxes, chartArea, params);

    		// Then fit horizontal boxes
    		if (fitBoxes(horizontalBoxes, chartArea, params)) {
    			// if the area changed, re-fit vertical boxes
    			fitBoxes(verticalBoxes, chartArea, params);
    		}

    		handleMaxPadding(chartArea);

    		// Finally place the boxes to correct coordinates
    		placeBoxes(boxes.leftAndTop, chartArea, params);

    		// Move to opposite side of chart
    		chartArea.x += chartArea.w;
    		chartArea.y += chartArea.h;

    		placeBoxes(boxes.rightAndBottom, chartArea, params);

    		chart.chartArea = {
    			left: chartArea.left,
    			top: chartArea.top,
    			right: chartArea.left + chartArea.w,
    			bottom: chartArea.top + chartArea.h
    		};

    		// Finally update boxes in chartArea (radial scale for example)
    		helpers$1.each(boxes.chartArea, function(layout) {
    			var box = layout.box;
    			extend(box, chart.chartArea);
    			box.update(chartArea.w, chartArea.h);
    		});
    	}
    };

    /**
     * Platform fallback implementation (minimal).
     * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
     */

    var platform_basic = {
    	acquireContext: function(item) {
    		if (item && item.canvas) {
    			// Support for any object associated to a canvas (including a context2d)
    			item = item.canvas;
    		}

    		return item && item.getContext('2d') || null;
    	}
    };

    var platform_dom = "/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n\tfrom { opacity: 0.99; }\r\n\tto { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n\tanimation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n\tposition: absolute;\r\n\tdirection: ltr;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\tvisibility: hidden;\r\n\tz-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n\tposition: absolute;\r\n\twidth: 1000000px;\r\n\theight: 1000000px;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n\tposition: absolute;\r\n\twidth: 200%;\r\n\theight: 200%;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n";

    var platform_dom$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': platform_dom
    });

    var stylesheet = getCjsExportFromNamespace(platform_dom$1);

    var EXPANDO_KEY = '$chartjs';
    var CSS_PREFIX = 'chartjs-';
    var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
    var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
    var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
    var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

    /**
     * DOM event types -> Chart.js event types.
     * Note: only events with different types are mapped.
     * @see https://developer.mozilla.org/en-US/docs/Web/Events
     */
    var EVENT_TYPES = {
    	touchstart: 'mousedown',
    	touchmove: 'mousemove',
    	touchend: 'mouseup',
    	pointerenter: 'mouseenter',
    	pointerdown: 'mousedown',
    	pointermove: 'mousemove',
    	pointerup: 'mouseup',
    	pointerleave: 'mouseout',
    	pointerout: 'mouseout'
    };

    /**
     * The "used" size is the final value of a dimension property after all calculations have
     * been performed. This method uses the computed style of `element` but returns undefined
     * if the computed style is not expressed in pixels. That can happen in some cases where
     * `element` has a size relative to its parent and this last one is not yet displayed,
     * for example because of `display: none` on a parent node.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
     * @returns {number} Size in pixels or undefined if unknown.
     */
    function readUsedSize(element, property) {
    	var value = helpers$1.getStyle(element, property);
    	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    	return matches ? Number(matches[1]) : undefined;
    }

    /**
     * Initializes the canvas style and render size without modifying the canvas display size,
     * since responsiveness is handled by the controller.resize() method. The config is used
     * to determine the aspect ratio to apply in case no explicit height has been specified.
     */
    function initCanvas(canvas, config) {
    	var style = canvas.style;

    	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
    	// returns null or '' if no explicit value has been set to the canvas attribute.
    	var renderHeight = canvas.getAttribute('height');
    	var renderWidth = canvas.getAttribute('width');

    	// Chart.js modifies some canvas values that we want to restore on destroy
    	canvas[EXPANDO_KEY] = {
    		initial: {
    			height: renderHeight,
    			width: renderWidth,
    			style: {
    				display: style.display,
    				height: style.height,
    				width: style.width
    			}
    		}
    	};

    	// Force canvas to display as block to avoid extra space caused by inline
    	// elements, which would interfere with the responsive resize process.
    	// https://github.com/chartjs/Chart.js/issues/2538
    	style.display = style.display || 'block';

    	if (renderWidth === null || renderWidth === '') {
    		var displayWidth = readUsedSize(canvas, 'width');
    		if (displayWidth !== undefined) {
    			canvas.width = displayWidth;
    		}
    	}

    	if (renderHeight === null || renderHeight === '') {
    		if (canvas.style.height === '') {
    			// If no explicit render height and style height, let's apply the aspect ratio,
    			// which one can be specified by the user but also by charts as default option
    			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
    			canvas.height = canvas.width / (config.options.aspectRatio || 2);
    		} else {
    			var displayHeight = readUsedSize(canvas, 'height');
    			if (displayWidth !== undefined) {
    				canvas.height = displayHeight;
    			}
    		}
    	}

    	return canvas;
    }

    /**
     * Detects support for options object argument in addEventListener.
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
     * @private
     */
    var supportsEventListenerOptions = (function() {
    	var supports = false;
    	try {
    		var options = Object.defineProperty({}, 'passive', {
    			// eslint-disable-next-line getter-return
    			get: function() {
    				supports = true;
    			}
    		});
    		window.addEventListener('e', null, options);
    	} catch (e) {
    		// continue regardless of error
    	}
    	return supports;
    }());

    // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
    // https://github.com/chartjs/Chart.js/issues/4287
    var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

    function addListener(node, type, listener) {
    	node.addEventListener(type, listener, eventListenerOptions);
    }

    function removeListener(node, type, listener) {
    	node.removeEventListener(type, listener, eventListenerOptions);
    }

    function createEvent(type, chart, x, y, nativeEvent) {
    	return {
    		type: type,
    		chart: chart,
    		native: nativeEvent || null,
    		x: x !== undefined ? x : null,
    		y: y !== undefined ? y : null,
    	};
    }

    function fromNativeEvent(event, chart) {
    	var type = EVENT_TYPES[event.type] || event.type;
    	var pos = helpers$1.getRelativePosition(event, chart);
    	return createEvent(type, chart, pos.x, pos.y, event);
    }

    function throttled(fn, thisArg) {
    	var ticking = false;
    	var args = [];

    	return function() {
    		args = Array.prototype.slice.call(arguments);
    		thisArg = thisArg || this;

    		if (!ticking) {
    			ticking = true;
    			helpers$1.requestAnimFrame.call(window, function() {
    				ticking = false;
    				fn.apply(thisArg, args);
    			});
    		}
    	};
    }

    function createDiv(cls) {
    	var el = document.createElement('div');
    	el.className = cls || '';
    	return el;
    }

    // Implementation based on https://github.com/marcj/css-element-queries
    function createResizer(handler) {
    	var maxSize = 1000000;

    	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
    	// https://github.com/chartjs/Chart.js/issues/5902
    	var resizer = createDiv(CSS_SIZE_MONITOR);
    	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
    	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

    	expand.appendChild(createDiv());
    	shrink.appendChild(createDiv());

    	resizer.appendChild(expand);
    	resizer.appendChild(shrink);
    	resizer._reset = function() {
    		expand.scrollLeft = maxSize;
    		expand.scrollTop = maxSize;
    		shrink.scrollLeft = maxSize;
    		shrink.scrollTop = maxSize;
    	};

    	var onScroll = function() {
    		resizer._reset();
    		handler();
    	};

    	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
    	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

    	return resizer;
    }

    // https://davidwalsh.name/detect-node-insertion
    function watchForRender(node, handler) {
    	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
    	var proxy = expando.renderProxy = function(e) {
    		if (e.animationName === CSS_RENDER_ANIMATION) {
    			handler();
    		}
    	};

    	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
    		addListener(node, type, proxy);
    	});

    	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
    	// is removed then added back immediately (same animation frame?). Accessing the
    	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
    	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
    	// https://github.com/chartjs/Chart.js/issues/4737
    	expando.reflow = !!node.offsetParent;

    	node.classList.add(CSS_RENDER_MONITOR);
    }

    function unwatchForRender(node) {
    	var expando = node[EXPANDO_KEY] || {};
    	var proxy = expando.renderProxy;

    	if (proxy) {
    		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
    			removeListener(node, type, proxy);
    		});

    		delete expando.renderProxy;
    	}

    	node.classList.remove(CSS_RENDER_MONITOR);
    }

    function addResizeListener(node, listener, chart) {
    	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

    	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
    	var resizer = expando.resizer = createResizer(throttled(function() {
    		if (expando.resizer) {
    			var container = chart.options.maintainAspectRatio && node.parentNode;
    			var w = container ? container.clientWidth : 0;
    			listener(createEvent('resize', chart));
    			if (container && container.clientWidth < w && chart.canvas) {
    				// If the container size shrank during chart resize, let's assume
    				// scrollbar appeared. So we resize again with the scrollbar visible -
    				// effectively making chart smaller and the scrollbar hidden again.
    				// Because we are inside `throttled`, and currently `ticking`, scroll
    				// events are ignored during this whole 2 resize process.
    				// If we assumed wrong and something else happened, we are resizing
    				// twice in a frame (potential performance issue)
    				listener(createEvent('resize', chart));
    			}
    		}
    	}));

    	// The resizer needs to be attached to the node parent, so we first need to be
    	// sure that `node` is attached to the DOM before injecting the resizer element.
    	watchForRender(node, function() {
    		if (expando.resizer) {
    			var container = node.parentNode;
    			if (container && container !== resizer.parentNode) {
    				container.insertBefore(resizer, container.firstChild);
    			}

    			// The container size might have changed, let's reset the resizer state.
    			resizer._reset();
    		}
    	});
    }

    function removeResizeListener(node) {
    	var expando = node[EXPANDO_KEY] || {};
    	var resizer = expando.resizer;

    	delete expando.resizer;
    	unwatchForRender(node);

    	if (resizer && resizer.parentNode) {
    		resizer.parentNode.removeChild(resizer);
    	}
    }

    /**
     * Injects CSS styles inline if the styles are not already present.
     * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
     * @param {string} css - the CSS to be injected.
     */
    function injectCSS(rootNode, css) {
    	// https://stackoverflow.com/q/3922139
    	var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
    	if (!expando.containsStyles) {
    		expando.containsStyles = true;
    		css = '/* Chart.js */\n' + css;
    		var style = document.createElement('style');
    		style.setAttribute('type', 'text/css');
    		style.appendChild(document.createTextNode(css));
    		rootNode.appendChild(style);
    	}
    }

    var platform_dom$2 = {
    	/**
    	 * When `true`, prevents the automatic injection of the stylesheet required to
    	 * correctly detect when the chart is added to the DOM and then resized. This
    	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
    	 * to be manually imported to make this library compatible with any CSP.
    	 * See https://github.com/chartjs/Chart.js/issues/5208
    	 */
    	disableCSSInjection: false,

    	/**
    	 * This property holds whether this platform is enabled for the current environment.
    	 * Currently used by platform.js to select the proper implementation.
    	 * @private
    	 */
    	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

    	/**
    	 * Initializes resources that depend on platform options.
    	 * @param {HTMLCanvasElement} canvas - The Canvas element.
    	 * @private
    	 */
    	_ensureLoaded: function(canvas) {
    		if (!this.disableCSSInjection) {
    			// If the canvas is in a shadow DOM, then the styles must also be inserted
    			// into the same shadow DOM.
    			// https://github.com/chartjs/Chart.js/issues/5763
    			var root = canvas.getRootNode ? canvas.getRootNode() : document;
    			var targetNode = root.host ? root : document.head;
    			injectCSS(targetNode, stylesheet);
    		}
    	},

    	acquireContext: function(item, config) {
    		if (typeof item === 'string') {
    			item = document.getElementById(item);
    		} else if (item.length) {
    			// Support for array based queries (such as jQuery)
    			item = item[0];
    		}

    		if (item && item.canvas) {
    			// Support for any object associated to a canvas (including a context2d)
    			item = item.canvas;
    		}

    		// To prevent canvas fingerprinting, some add-ons undefine the getContext
    		// method, for example: https://github.com/kkapsner/CanvasBlocker
    		// https://github.com/chartjs/Chart.js/issues/2807
    		var context = item && item.getContext && item.getContext('2d');

    		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
    		// inside an iframe or when running in a protected environment. We could guess the
    		// types from their toString() value but let's keep things flexible and assume it's
    		// a sufficient condition if the item has a context2D which has item as `canvas`.
    		// https://github.com/chartjs/Chart.js/issues/3887
    		// https://github.com/chartjs/Chart.js/issues/4102
    		// https://github.com/chartjs/Chart.js/issues/4152
    		if (context && context.canvas === item) {
    			// Load platform resources on first chart creation, to make it possible to
    			// import the library before setting platform options.
    			this._ensureLoaded(item);
    			initCanvas(item, config);
    			return context;
    		}

    		return null;
    	},

    	releaseContext: function(context) {
    		var canvas = context.canvas;
    		if (!canvas[EXPANDO_KEY]) {
    			return;
    		}

    		var initial = canvas[EXPANDO_KEY].initial;
    		['height', 'width'].forEach(function(prop) {
    			var value = initial[prop];
    			if (helpers$1.isNullOrUndef(value)) {
    				canvas.removeAttribute(prop);
    			} else {
    				canvas.setAttribute(prop, value);
    			}
    		});

    		helpers$1.each(initial.style || {}, function(value, key) {
    			canvas.style[key] = value;
    		});

    		// The canvas render size might have been changed (and thus the state stack discarded),
    		// we can't use save() and restore() to restore the initial state. So make sure that at
    		// least the canvas context is reset to the default state by setting the canvas width.
    		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
    		// eslint-disable-next-line no-self-assign
    		canvas.width = canvas.width;

    		delete canvas[EXPANDO_KEY];
    	},

    	addEventListener: function(chart, type, listener) {
    		var canvas = chart.canvas;
    		if (type === 'resize') {
    			// Note: the resize event is not supported on all browsers.
    			addResizeListener(canvas, listener, chart);
    			return;
    		}

    		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
    		var proxies = expando.proxies || (expando.proxies = {});
    		var proxy = proxies[chart.id + '_' + type] = function(event) {
    			listener(fromNativeEvent(event, chart));
    		};

    		addListener(canvas, type, proxy);
    	},

    	removeEventListener: function(chart, type, listener) {
    		var canvas = chart.canvas;
    		if (type === 'resize') {
    			// Note: the resize event is not supported on all browsers.
    			removeResizeListener(canvas);
    			return;
    		}

    		var expando = listener[EXPANDO_KEY] || {};
    		var proxies = expando.proxies || {};
    		var proxy = proxies[chart.id + '_' + type];
    		if (!proxy) {
    			return;
    		}

    		removeListener(canvas, type, proxy);
    	}
    };

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use EventTarget.addEventListener instead.
     * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
     * @function Chart.helpers.addEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.addEvent = addListener;

    /**
     * Provided for backward compatibility, use EventTarget.removeEventListener instead.
     * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
     * @function Chart.helpers.removeEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.removeEvent = removeListener;

    // @TODO Make possible to select another platform at build time.
    var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

    /**
     * @namespace Chart.platform
     * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
     * @since 2.4.0
     */
    var platform = helpers$1.extend({
    	/**
    	 * @since 2.7.0
    	 */
    	initialize: function() {},

    	/**
    	 * Called at chart construction time, returns a context2d instance implementing
    	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
    	 * @param {*} item - The native item from which to acquire context (platform specific)
    	 * @param {object} options - The chart options
    	 * @returns {CanvasRenderingContext2D} context2d instance
    	 */
    	acquireContext: function() {},

    	/**
    	 * Called at chart destruction time, releases any resources associated to the context
    	 * previously returned by the acquireContext() method.
    	 * @param {CanvasRenderingContext2D} context - The context2d instance
    	 * @returns {boolean} true if the method succeeded, else false
    	 */
    	releaseContext: function() {},

    	/**
    	 * Registers the specified listener on the given chart.
    	 * @param {Chart} chart - Chart from which to listen for event
    	 * @param {string} type - The ({@link IEvent}) type to listen for
    	 * @param {function} listener - Receives a notification (an object that implements
    	 * the {@link IEvent} interface) when an event of the specified type occurs.
    	 */
    	addEventListener: function() {},

    	/**
    	 * Removes the specified listener previously registered with addEventListener.
    	 * @param {Chart} chart - Chart from which to remove the listener
    	 * @param {string} type - The ({@link IEvent}) type to remove
    	 * @param {function} listener - The listener function to remove from the event target.
    	 */
    	removeEventListener: function() {}

    }, implementation);

    core_defaults._set('global', {
    	plugins: {}
    });

    /**
     * The plugin service singleton
     * @namespace Chart.plugins
     * @since 2.1.0
     */
    var core_plugins = {
    	/**
    	 * Globally registered plugins.
    	 * @private
    	 */
    	_plugins: [],

    	/**
    	 * This identifier is used to invalidate the descriptors cache attached to each chart
    	 * when a global plugin is registered or unregistered. In this case, the cache ID is
    	 * incremented and descriptors are regenerated during following API calls.
    	 * @private
    	 */
    	_cacheId: 0,

    	/**
    	 * Registers the given plugin(s) if not already registered.
    	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
    	 */
    	register: function(plugins) {
    		var p = this._plugins;
    		([]).concat(plugins).forEach(function(plugin) {
    			if (p.indexOf(plugin) === -1) {
    				p.push(plugin);
    			}
    		});

    		this._cacheId++;
    	},

    	/**
    	 * Unregisters the given plugin(s) only if registered.
    	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
    	 */
    	unregister: function(plugins) {
    		var p = this._plugins;
    		([]).concat(plugins).forEach(function(plugin) {
    			var idx = p.indexOf(plugin);
    			if (idx !== -1) {
    				p.splice(idx, 1);
    			}
    		});

    		this._cacheId++;
    	},

    	/**
    	 * Remove all registered plugins.
    	 * @since 2.1.5
    	 */
    	clear: function() {
    		this._plugins = [];
    		this._cacheId++;
    	},

    	/**
    	 * Returns the number of registered plugins?
    	 * @returns {number}
    	 * @since 2.1.5
    	 */
    	count: function() {
    		return this._plugins.length;
    	},

    	/**
    	 * Returns all registered plugin instances.
    	 * @returns {IPlugin[]} array of plugin objects.
    	 * @since 2.1.5
    	 */
    	getAll: function() {
    		return this._plugins;
    	},

    	/**
    	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
    	 * This method immediately returns as soon as a plugin explicitly returns false. The
    	 * returned value can be used, for instance, to interrupt the current action.
    	 * @param {Chart} chart - The chart instance for which plugins should be called.
    	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
    	 * @param {Array} [args] - Extra arguments to apply to the hook call.
    	 * @returns {boolean} false if any of the plugins return false, else returns true.
    	 */
    	notify: function(chart, hook, args) {
    		var descriptors = this.descriptors(chart);
    		var ilen = descriptors.length;
    		var i, descriptor, plugin, params, method;

    		for (i = 0; i < ilen; ++i) {
    			descriptor = descriptors[i];
    			plugin = descriptor.plugin;
    			method = plugin[hook];
    			if (typeof method === 'function') {
    				params = [chart].concat(args || []);
    				params.push(descriptor.options);
    				if (method.apply(plugin, params) === false) {
    					return false;
    				}
    			}
    		}

    		return true;
    	},

    	/**
    	 * Returns descriptors of enabled plugins for the given chart.
    	 * @returns {object[]} [{ plugin, options }]
    	 * @private
    	 */
    	descriptors: function(chart) {
    		var cache = chart.$plugins || (chart.$plugins = {});
    		if (cache.id === this._cacheId) {
    			return cache.descriptors;
    		}

    		var plugins = [];
    		var descriptors = [];
    		var config = (chart && chart.config) || {};
    		var options = (config.options && config.options.plugins) || {};

    		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
    			var idx = plugins.indexOf(plugin);
    			if (idx !== -1) {
    				return;
    			}

    			var id = plugin.id;
    			var opts = options[id];
    			if (opts === false) {
    				return;
    			}

    			if (opts === true) {
    				opts = helpers$1.clone(core_defaults.global.plugins[id]);
    			}

    			plugins.push(plugin);
    			descriptors.push({
    				plugin: plugin,
    				options: opts || {}
    			});
    		});

    		cache.descriptors = descriptors;
    		cache.id = this._cacheId;
    		return descriptors;
    	},

    	/**
    	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
    	 * but in some cases, this reference can be changed by the user when updating options.
    	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
    	 * @private
    	 */
    	_invalidate: function(chart) {
    		delete chart.$plugins;
    	}
    };

    var core_scaleService = {
    	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
    	// use the new chart options to grab the correct scale
    	constructors: {},
    	// Use a registration function so that we can move to an ES6 map when we no longer need to support
    	// old browsers

    	// Scale config defaults
    	defaults: {},
    	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
    		this.constructors[type] = scaleConstructor;
    		this.defaults[type] = helpers$1.clone(scaleDefaults);
    	},
    	getScaleConstructor: function(type) {
    		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
    	},
    	getScaleDefaults: function(type) {
    		// Return the scale defaults merged with the global settings so that we always use the latest ones
    		return this.defaults.hasOwnProperty(type) ? helpers$1.merge(Object.create(null), [core_defaults.scale, this.defaults[type]]) : {};
    	},
    	updateScaleDefaults: function(type, additions) {
    		var me = this;
    		if (me.defaults.hasOwnProperty(type)) {
    			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
    		}
    	},
    	addScalesToLayout: function(chart) {
    		// Adds each scale to the chart.boxes array to be sized accordingly
    		helpers$1.each(chart.scales, function(scale) {
    			// Set ILayoutItem parameters for backwards compatibility
    			scale.fullWidth = scale.options.fullWidth;
    			scale.position = scale.options.position;
    			scale.weight = scale.options.weight;
    			core_layouts.addBox(chart, scale);
    		});
    	}
    };

    var valueOrDefault$8 = helpers$1.valueOrDefault;
    var getRtlHelper = helpers$1.rtl.getRtlAdapter;

    core_defaults._set('global', {
    	tooltips: {
    		enabled: true,
    		custom: null,
    		mode: 'nearest',
    		position: 'average',
    		intersect: true,
    		backgroundColor: 'rgba(0,0,0,0.8)',
    		titleFontStyle: 'bold',
    		titleSpacing: 2,
    		titleMarginBottom: 6,
    		titleFontColor: '#fff',
    		titleAlign: 'left',
    		bodySpacing: 2,
    		bodyFontColor: '#fff',
    		bodyAlign: 'left',
    		footerFontStyle: 'bold',
    		footerSpacing: 2,
    		footerMarginTop: 6,
    		footerFontColor: '#fff',
    		footerAlign: 'left',
    		yPadding: 6,
    		xPadding: 6,
    		caretPadding: 2,
    		caretSize: 5,
    		cornerRadius: 6,
    		multiKeyBackground: '#fff',
    		displayColors: true,
    		borderColor: 'rgba(0,0,0,0)',
    		borderWidth: 0,
    		callbacks: {
    			// Args are: (tooltipItems, data)
    			beforeTitle: helpers$1.noop,
    			title: function(tooltipItems, data) {
    				var title = '';
    				var labels = data.labels;
    				var labelCount = labels ? labels.length : 0;

    				if (tooltipItems.length > 0) {
    					var item = tooltipItems[0];
    					if (item.label) {
    						title = item.label;
    					} else if (item.xLabel) {
    						title = item.xLabel;
    					} else if (labelCount > 0 && item.index < labelCount) {
    						title = labels[item.index];
    					}
    				}

    				return title;
    			},
    			afterTitle: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			beforeBody: helpers$1.noop,

    			// Args are: (tooltipItem, data)
    			beforeLabel: helpers$1.noop,
    			label: function(tooltipItem, data) {
    				var label = data.datasets[tooltipItem.datasetIndex].label || '';

    				if (label) {
    					label += ': ';
    				}
    				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
    					label += tooltipItem.value;
    				} else {
    					label += tooltipItem.yLabel;
    				}
    				return label;
    			},
    			labelColor: function(tooltipItem, chart) {
    				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
    				var activeElement = meta.data[tooltipItem.index];
    				var view = activeElement._view;
    				return {
    					borderColor: view.borderColor,
    					backgroundColor: view.backgroundColor
    				};
    			},
    			labelTextColor: function() {
    				return this._options.bodyFontColor;
    			},
    			afterLabel: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			afterBody: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			beforeFooter: helpers$1.noop,
    			footer: helpers$1.noop,
    			afterFooter: helpers$1.noop
    		}
    	}
    });

    var positioners = {
    	/**
    	 * Average mode places the tooltip at the average position of the elements shown
    	 * @function Chart.Tooltip.positioners.average
    	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
    	 * @returns {object} tooltip position
    	 */
    	average: function(elements) {
    		if (!elements.length) {
    			return false;
    		}

    		var i, len;
    		var x = 0;
    		var y = 0;
    		var count = 0;

    		for (i = 0, len = elements.length; i < len; ++i) {
    			var el = elements[i];
    			if (el && el.hasValue()) {
    				var pos = el.tooltipPosition();
    				x += pos.x;
    				y += pos.y;
    				++count;
    			}
    		}

    		return {
    			x: x / count,
    			y: y / count
    		};
    	},

    	/**
    	 * Gets the tooltip position nearest of the item nearest to the event position
    	 * @function Chart.Tooltip.positioners.nearest
    	 * @param elements {Chart.Element[]} the tooltip elements
    	 * @param eventPosition {object} the position of the event in canvas coordinates
    	 * @returns {object} the tooltip position
    	 */
    	nearest: function(elements, eventPosition) {
    		var x = eventPosition.x;
    		var y = eventPosition.y;
    		var minDistance = Number.POSITIVE_INFINITY;
    		var i, len, nearestElement;

    		for (i = 0, len = elements.length; i < len; ++i) {
    			var el = elements[i];
    			if (el && el.hasValue()) {
    				var center = el.getCenterPoint();
    				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

    				if (d < minDistance) {
    					minDistance = d;
    					nearestElement = el;
    				}
    			}
    		}

    		if (nearestElement) {
    			var tp = nearestElement.tooltipPosition();
    			x = tp.x;
    			y = tp.y;
    		}

    		return {
    			x: x,
    			y: y
    		};
    	}
    };

    // Helper to push or concat based on if the 2nd parameter is an array or not
    function pushOrConcat(base, toPush) {
    	if (toPush) {
    		if (helpers$1.isArray(toPush)) {
    			// base = base.concat(toPush);
    			Array.prototype.push.apply(base, toPush);
    		} else {
    			base.push(toPush);
    		}
    	}

    	return base;
    }

    /**
     * Returns array of strings split by newline
     * @param {string} value - The value to split by newline.
     * @returns {string[]} value if newline present - Returned from String split() method
     * @function
     */
    function splitNewlines(str) {
    	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
    		return str.split('\n');
    	}
    	return str;
    }


    /**
     * Private helper to create a tooltip item model
     * @param element - the chart element (point, arc, bar) to create the tooltip item for
     * @return new tooltip item
     */
    function createTooltipItem(element) {
    	var xScale = element._xScale;
    	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
    	var index = element._index;
    	var datasetIndex = element._datasetIndex;
    	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
    	var indexScale = controller._getIndexScale();
    	var valueScale = controller._getValueScale();

    	return {
    		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
    		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
    		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
    		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
    		index: index,
    		datasetIndex: datasetIndex,
    		x: element._model.x,
    		y: element._model.y
    	};
    }

    /**
     * Helper to get the reset model for the tooltip
     * @param tooltipOpts {object} the tooltip options
     */
    function getBaseModel(tooltipOpts) {
    	var globalDefaults = core_defaults.global;

    	return {
    		// Positioning
    		xPadding: tooltipOpts.xPadding,
    		yPadding: tooltipOpts.yPadding,
    		xAlign: tooltipOpts.xAlign,
    		yAlign: tooltipOpts.yAlign,

    		// Drawing direction and text direction
    		rtl: tooltipOpts.rtl,
    		textDirection: tooltipOpts.textDirection,

    		// Body
    		bodyFontColor: tooltipOpts.bodyFontColor,
    		_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
    		_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
    		_bodyAlign: tooltipOpts.bodyAlign,
    		bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
    		bodySpacing: tooltipOpts.bodySpacing,

    		// Title
    		titleFontColor: tooltipOpts.titleFontColor,
    		_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
    		_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
    		titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
    		_titleAlign: tooltipOpts.titleAlign,
    		titleSpacing: tooltipOpts.titleSpacing,
    		titleMarginBottom: tooltipOpts.titleMarginBottom,

    		// Footer
    		footerFontColor: tooltipOpts.footerFontColor,
    		_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
    		_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
    		footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
    		_footerAlign: tooltipOpts.footerAlign,
    		footerSpacing: tooltipOpts.footerSpacing,
    		footerMarginTop: tooltipOpts.footerMarginTop,

    		// Appearance
    		caretSize: tooltipOpts.caretSize,
    		cornerRadius: tooltipOpts.cornerRadius,
    		backgroundColor: tooltipOpts.backgroundColor,
    		opacity: 0,
    		legendColorBackground: tooltipOpts.multiKeyBackground,
    		displayColors: tooltipOpts.displayColors,
    		borderColor: tooltipOpts.borderColor,
    		borderWidth: tooltipOpts.borderWidth
    	};
    }

    /**
     * Get the size of the tooltip
     */
    function getTooltipSize(tooltip, model) {
    	var ctx = tooltip._chart.ctx;

    	var height = model.yPadding * 2; // Tooltip Padding
    	var width = 0;

    	// Count of all lines in the body
    	var body = model.body;
    	var combinedBodyLength = body.reduce(function(count, bodyItem) {
    		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
    	}, 0);
    	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

    	var titleLineCount = model.title.length;
    	var footerLineCount = model.footer.length;
    	var titleFontSize = model.titleFontSize;
    	var bodyFontSize = model.bodyFontSize;
    	var footerFontSize = model.footerFontSize;

    	height += titleLineCount * titleFontSize; // Title Lines
    	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
    	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
    	height += combinedBodyLength * bodyFontSize; // Body Lines
    	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
    	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
    	height += footerLineCount * (footerFontSize); // Footer Lines
    	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

    	// Title width
    	var widthPadding = 0;
    	var maxLineWidth = function(line) {
    		width = Math.max(width, ctx.measureText(line).width + widthPadding);
    	};

    	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
    	helpers$1.each(model.title, maxLineWidth);

    	// Body width
    	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
    	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

    	// Body lines may include some extra width due to the color box
    	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
    	helpers$1.each(body, function(bodyItem) {
    		helpers$1.each(bodyItem.before, maxLineWidth);
    		helpers$1.each(bodyItem.lines, maxLineWidth);
    		helpers$1.each(bodyItem.after, maxLineWidth);
    	});

    	// Reset back to 0
    	widthPadding = 0;

    	// Footer width
    	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
    	helpers$1.each(model.footer, maxLineWidth);

    	// Add padding
    	width += 2 * model.xPadding;

    	return {
    		width: width,
    		height: height
    	};
    }

    /**
     * Helper to get the alignment of a tooltip given the size
     */
    function determineAlignment(tooltip, size) {
    	var model = tooltip._model;
    	var chart = tooltip._chart;
    	var chartArea = tooltip._chart.chartArea;
    	var xAlign = 'center';
    	var yAlign = 'center';

    	if (model.y < size.height) {
    		yAlign = 'top';
    	} else if (model.y > (chart.height - size.height)) {
    		yAlign = 'bottom';
    	}

    	var lf, rf; // functions to determine left, right alignment
    	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
    	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
    	var midX = (chartArea.left + chartArea.right) / 2;
    	var midY = (chartArea.top + chartArea.bottom) / 2;

    	if (yAlign === 'center') {
    		lf = function(x) {
    			return x <= midX;
    		};
    		rf = function(x) {
    			return x > midX;
    		};
    	} else {
    		lf = function(x) {
    			return x <= (size.width / 2);
    		};
    		rf = function(x) {
    			return x >= (chart.width - (size.width / 2));
    		};
    	}

    	olf = function(x) {
    		return x + size.width + model.caretSize + model.caretPadding > chart.width;
    	};
    	orf = function(x) {
    		return x - size.width - model.caretSize - model.caretPadding < 0;
    	};
    	yf = function(y) {
    		return y <= midY ? 'top' : 'bottom';
    	};

    	if (lf(model.x)) {
    		xAlign = 'left';

    		// Is tooltip too wide and goes over the right side of the chart.?
    		if (olf(model.x)) {
    			xAlign = 'center';
    			yAlign = yf(model.y);
    		}
    	} else if (rf(model.x)) {
    		xAlign = 'right';

    		// Is tooltip too wide and goes outside left edge of canvas?
    		if (orf(model.x)) {
    			xAlign = 'center';
    			yAlign = yf(model.y);
    		}
    	}

    	var opts = tooltip._options;
    	return {
    		xAlign: opts.xAlign ? opts.xAlign : xAlign,
    		yAlign: opts.yAlign ? opts.yAlign : yAlign
    	};
    }

    /**
     * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
     */
    function getBackgroundPoint(vm, size, alignment, chart) {
    	// Background Position
    	var x = vm.x;
    	var y = vm.y;

    	var caretSize = vm.caretSize;
    	var caretPadding = vm.caretPadding;
    	var cornerRadius = vm.cornerRadius;
    	var xAlign = alignment.xAlign;
    	var yAlign = alignment.yAlign;
    	var paddingAndSize = caretSize + caretPadding;
    	var radiusAndPadding = cornerRadius + caretPadding;

    	if (xAlign === 'right') {
    		x -= size.width;
    	} else if (xAlign === 'center') {
    		x -= (size.width / 2);
    		if (x + size.width > chart.width) {
    			x = chart.width - size.width;
    		}
    		if (x < 0) {
    			x = 0;
    		}
    	}

    	if (yAlign === 'top') {
    		y += paddingAndSize;
    	} else if (yAlign === 'bottom') {
    		y -= size.height + paddingAndSize;
    	} else {
    		y -= (size.height / 2);
    	}

    	if (yAlign === 'center') {
    		if (xAlign === 'left') {
    			x += paddingAndSize;
    		} else if (xAlign === 'right') {
    			x -= paddingAndSize;
    		}
    	} else if (xAlign === 'left') {
    		x -= radiusAndPadding;
    	} else if (xAlign === 'right') {
    		x += radiusAndPadding;
    	}

    	return {
    		x: x,
    		y: y
    	};
    }

    function getAlignedX(vm, align) {
    	return align === 'center'
    		? vm.x + vm.width / 2
    		: align === 'right'
    			? vm.x + vm.width - vm.xPadding
    			: vm.x + vm.xPadding;
    }

    /**
     * Helper to build before and after body lines
     */
    function getBeforeAfterBodyLines(callback) {
    	return pushOrConcat([], splitNewlines(callback));
    }

    var exports$4 = core_element.extend({
    	initialize: function() {
    		this._model = getBaseModel(this._options);
    		this._lastActive = [];
    	},

    	// Get the title
    	// Args are: (tooltipItem, data)
    	getTitle: function() {
    		var me = this;
    		var opts = me._options;
    		var callbacks = opts.callbacks;

    		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
    		var title = callbacks.title.apply(me, arguments);
    		var afterTitle = callbacks.afterTitle.apply(me, arguments);

    		var lines = [];
    		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    		lines = pushOrConcat(lines, splitNewlines(title));
    		lines = pushOrConcat(lines, splitNewlines(afterTitle));

    		return lines;
    	},

    	// Args are: (tooltipItem, data)
    	getBeforeBody: function() {
    		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
    	},

    	// Args are: (tooltipItem, data)
    	getBody: function(tooltipItems, data) {
    		var me = this;
    		var callbacks = me._options.callbacks;
    		var bodyItems = [];

    		helpers$1.each(tooltipItems, function(tooltipItem) {
    			var bodyItem = {
    				before: [],
    				lines: [],
    				after: []
    			};
    			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
    			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
    			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

    			bodyItems.push(bodyItem);
    		});

    		return bodyItems;
    	},

    	// Args are: (tooltipItem, data)
    	getAfterBody: function() {
    		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
    	},

    	// Get the footer and beforeFooter and afterFooter lines
    	// Args are: (tooltipItem, data)
    	getFooter: function() {
    		var me = this;
    		var callbacks = me._options.callbacks;

    		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
    		var footer = callbacks.footer.apply(me, arguments);
    		var afterFooter = callbacks.afterFooter.apply(me, arguments);

    		var lines = [];
    		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    		lines = pushOrConcat(lines, splitNewlines(footer));
    		lines = pushOrConcat(lines, splitNewlines(afterFooter));

    		return lines;
    	},

    	update: function(changed) {
    		var me = this;
    		var opts = me._options;

    		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
    		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
    		// which breaks any animations.
    		var existingModel = me._model;
    		var model = me._model = getBaseModel(opts);
    		var active = me._active;

    		var data = me._data;

    		// In the case where active.length === 0 we need to keep these at existing values for good animations
    		var alignment = {
    			xAlign: existingModel.xAlign,
    			yAlign: existingModel.yAlign
    		};
    		var backgroundPoint = {
    			x: existingModel.x,
    			y: existingModel.y
    		};
    		var tooltipSize = {
    			width: existingModel.width,
    			height: existingModel.height
    		};
    		var tooltipPosition = {
    			x: existingModel.caretX,
    			y: existingModel.caretY
    		};

    		var i, len;

    		if (active.length) {
    			model.opacity = 1;

    			var labelColors = [];
    			var labelTextColors = [];
    			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

    			var tooltipItems = [];
    			for (i = 0, len = active.length; i < len; ++i) {
    				tooltipItems.push(createTooltipItem(active[i]));
    			}

    			// If the user provided a filter function, use it to modify the tooltip items
    			if (opts.filter) {
    				tooltipItems = tooltipItems.filter(function(a) {
    					return opts.filter(a, data);
    				});
    			}

    			// If the user provided a sorting function, use it to modify the tooltip items
    			if (opts.itemSort) {
    				tooltipItems = tooltipItems.sort(function(a, b) {
    					return opts.itemSort(a, b, data);
    				});
    			}

    			// Determine colors for boxes
    			helpers$1.each(tooltipItems, function(tooltipItem) {
    				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
    				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
    			});


    			// Build the Text Lines
    			model.title = me.getTitle(tooltipItems, data);
    			model.beforeBody = me.getBeforeBody(tooltipItems, data);
    			model.body = me.getBody(tooltipItems, data);
    			model.afterBody = me.getAfterBody(tooltipItems, data);
    			model.footer = me.getFooter(tooltipItems, data);

    			// Initial positioning and colors
    			model.x = tooltipPosition.x;
    			model.y = tooltipPosition.y;
    			model.caretPadding = opts.caretPadding;
    			model.labelColors = labelColors;
    			model.labelTextColors = labelTextColors;

    			// data points
    			model.dataPoints = tooltipItems;

    			// We need to determine alignment of the tooltip
    			tooltipSize = getTooltipSize(this, model);
    			alignment = determineAlignment(this, tooltipSize);
    			// Final Size and Position
    			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
    		} else {
    			model.opacity = 0;
    		}

    		model.xAlign = alignment.xAlign;
    		model.yAlign = alignment.yAlign;
    		model.x = backgroundPoint.x;
    		model.y = backgroundPoint.y;
    		model.width = tooltipSize.width;
    		model.height = tooltipSize.height;

    		// Point where the caret on the tooltip points to
    		model.caretX = tooltipPosition.x;
    		model.caretY = tooltipPosition.y;

    		me._model = model;

    		if (changed && opts.custom) {
    			opts.custom.call(me, model);
    		}

    		return me;
    	},

    	drawCaret: function(tooltipPoint, size) {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

    		ctx.lineTo(caretPosition.x1, caretPosition.y1);
    		ctx.lineTo(caretPosition.x2, caretPosition.y2);
    		ctx.lineTo(caretPosition.x3, caretPosition.y3);
    	},
    	getCaretPosition: function(tooltipPoint, size, vm) {
    		var x1, x2, x3, y1, y2, y3;
    		var caretSize = vm.caretSize;
    		var cornerRadius = vm.cornerRadius;
    		var xAlign = vm.xAlign;
    		var yAlign = vm.yAlign;
    		var ptX = tooltipPoint.x;
    		var ptY = tooltipPoint.y;
    		var width = size.width;
    		var height = size.height;

    		if (yAlign === 'center') {
    			y2 = ptY + (height / 2);

    			if (xAlign === 'left') {
    				x1 = ptX;
    				x2 = x1 - caretSize;
    				x3 = x1;

    				y1 = y2 + caretSize;
    				y3 = y2 - caretSize;
    			} else {
    				x1 = ptX + width;
    				x2 = x1 + caretSize;
    				x3 = x1;

    				y1 = y2 - caretSize;
    				y3 = y2 + caretSize;
    			}
    		} else {
    			if (xAlign === 'left') {
    				x2 = ptX + cornerRadius + (caretSize);
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			} else if (xAlign === 'right') {
    				x2 = ptX + width - cornerRadius - caretSize;
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			} else {
    				x2 = vm.caretX;
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			}
    			if (yAlign === 'top') {
    				y1 = ptY;
    				y2 = y1 - caretSize;
    				y3 = y1;
    			} else {
    				y1 = ptY + height;
    				y2 = y1 + caretSize;
    				y3 = y1;
    				// invert drawing order
    				var tmp = x3;
    				x3 = x1;
    				x1 = tmp;
    			}
    		}
    		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
    	},

    	drawTitle: function(pt, vm, ctx) {
    		var title = vm.title;
    		var length = title.length;
    		var titleFontSize, titleSpacing, i;

    		if (length) {
    			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    			pt.x = getAlignedX(vm, vm._titleAlign);

    			ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
    			ctx.textBaseline = 'middle';

    			titleFontSize = vm.titleFontSize;
    			titleSpacing = vm.titleSpacing;

    			ctx.fillStyle = vm.titleFontColor;
    			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

    			for (i = 0; i < length; ++i) {
    				ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
    				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

    				if (i + 1 === length) {
    					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
    				}
    			}
    		}
    	},

    	drawBody: function(pt, vm, ctx) {
    		var bodyFontSize = vm.bodyFontSize;
    		var bodySpacing = vm.bodySpacing;
    		var bodyAlign = vm._bodyAlign;
    		var body = vm.body;
    		var drawColorBoxes = vm.displayColors;
    		var xLinePadding = 0;
    		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;

    		var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    		var fillLineOfText = function(line) {
    			ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
    			pt.y += bodyFontSize + bodySpacing;
    		};

    		var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
    		var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);

    		ctx.textAlign = bodyAlign;
    		ctx.textBaseline = 'middle';
    		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

    		pt.x = getAlignedX(vm, bodyAlignForCalculation);

    		// Before body lines
    		ctx.fillStyle = vm.bodyFontColor;
    		helpers$1.each(vm.beforeBody, fillLineOfText);

    		xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
    			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
    			: 0;

    		// Draw body lines now
    		for (i = 0, ilen = body.length; i < ilen; ++i) {
    			bodyItem = body[i];
    			textColor = vm.labelTextColors[i];
    			labelColors = vm.labelColors[i];

    			ctx.fillStyle = textColor;
    			helpers$1.each(bodyItem.before, fillLineOfText);

    			lines = bodyItem.lines;
    			for (j = 0, jlen = lines.length; j < jlen; ++j) {
    				// Draw Legend-like boxes if needed
    				if (drawColorBoxes) {
    					var rtlColorX = rtlHelper.x(colorX);

    					// Fill a white rect so that colours merge nicely if the opacity is < 1
    					ctx.fillStyle = vm.legendColorBackground;
    					ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

    					// Border
    					ctx.lineWidth = 1;
    					ctx.strokeStyle = labelColors.borderColor;
    					ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

    					// Inner square
    					ctx.fillStyle = labelColors.backgroundColor;
    					ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
    					ctx.fillStyle = textColor;
    				}

    				fillLineOfText(lines[j]);
    			}

    			helpers$1.each(bodyItem.after, fillLineOfText);
    		}

    		// Reset back to 0 for after body
    		xLinePadding = 0;

    		// After body lines
    		helpers$1.each(vm.afterBody, fillLineOfText);
    		pt.y -= bodySpacing; // Remove last body spacing
    	},

    	drawFooter: function(pt, vm, ctx) {
    		var footer = vm.footer;
    		var length = footer.length;
    		var footerFontSize, i;

    		if (length) {
    			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    			pt.x = getAlignedX(vm, vm._footerAlign);
    			pt.y += vm.footerMarginTop;

    			ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
    			ctx.textBaseline = 'middle';

    			footerFontSize = vm.footerFontSize;

    			ctx.fillStyle = vm.footerFontColor;
    			ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

    			for (i = 0; i < length; ++i) {
    				ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
    				pt.y += footerFontSize + vm.footerSpacing;
    			}
    		}
    	},

    	drawBackground: function(pt, vm, ctx, tooltipSize) {
    		ctx.fillStyle = vm.backgroundColor;
    		ctx.strokeStyle = vm.borderColor;
    		ctx.lineWidth = vm.borderWidth;
    		var xAlign = vm.xAlign;
    		var yAlign = vm.yAlign;
    		var x = pt.x;
    		var y = pt.y;
    		var width = tooltipSize.width;
    		var height = tooltipSize.height;
    		var radius = vm.cornerRadius;

    		ctx.beginPath();
    		ctx.moveTo(x + radius, y);
    		if (yAlign === 'top') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + width - radius, y);
    		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    		if (yAlign === 'center' && xAlign === 'right') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + width, y + height - radius);
    		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    		if (yAlign === 'bottom') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + radius, y + height);
    		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    		if (yAlign === 'center' && xAlign === 'left') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x, y + radius);
    		ctx.quadraticCurveTo(x, y, x + radius, y);
    		ctx.closePath();

    		ctx.fill();

    		if (vm.borderWidth > 0) {
    			ctx.stroke();
    		}
    	},

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;

    		if (vm.opacity === 0) {
    			return;
    		}

    		var tooltipSize = {
    			width: vm.width,
    			height: vm.height
    		};
    		var pt = {
    			x: vm.x,
    			y: vm.y
    		};

    		// IE11/Edge does not like very small opacities, so snap to 0
    		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

    		// Truthy/falsey value for empty tooltip
    		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

    		if (this._options.enabled && hasTooltipContent) {
    			ctx.save();
    			ctx.globalAlpha = opacity;

    			// Draw Background
    			this.drawBackground(pt, vm, ctx, tooltipSize);

    			// Draw Title, Body, and Footer
    			pt.y += vm.yPadding;

    			helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);

    			// Titles
    			this.drawTitle(pt, vm, ctx);

    			// Body
    			this.drawBody(pt, vm, ctx);

    			// Footer
    			this.drawFooter(pt, vm, ctx);

    			helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);

    			ctx.restore();
    		}
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event - The event to handle
    	 * @returns {boolean} true if the tooltip changed
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var options = me._options;
    		var changed = false;

    		me._lastActive = me._lastActive || [];

    		// Find Active Elements for tooltips
    		if (e.type === 'mouseout') {
    			me._active = [];
    		} else {
    			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
    			if (options.reverse) {
    				me._active.reverse();
    			}
    		}

    		// Remember Last Actives
    		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

    		// Only handle target event on tooltip change
    		if (changed) {
    			me._lastActive = me._active;

    			if (options.enabled || options.custom) {
    				me._eventPosition = {
    					x: e.x,
    					y: e.y
    				};

    				me.update(true);
    				me.pivot();
    			}
    		}

    		return changed;
    	}
    });

    /**
     * @namespace Chart.Tooltip.positioners
     */
    var positioners_1 = positioners;

    var core_tooltip = exports$4;
    core_tooltip.positioners = positioners_1;

    var valueOrDefault$9 = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	elements: {},
    	events: [
    		'mousemove',
    		'mouseout',
    		'click',
    		'touchstart',
    		'touchmove'
    	],
    	hover: {
    		onHover: null,
    		mode: 'nearest',
    		intersect: true,
    		animationDuration: 400
    	},
    	onClick: null,
    	maintainAspectRatio: true,
    	responsive: true,
    	responsiveAnimationDuration: 0
    });

    /**
     * Recursively merge the given config objects representing the `scales` option
     * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
     * returns a deep copy of the result, thus doesn't alter inputs.
     */
    function mergeScaleConfig(/* config objects ... */) {
    	return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
    		merger: function(key, target, source, options) {
    			if (key === 'xAxes' || key === 'yAxes') {
    				var slen = source[key].length;
    				var i, type, scale;

    				if (!target[key]) {
    					target[key] = [];
    				}

    				for (i = 0; i < slen; ++i) {
    					scale = source[key][i];
    					type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

    					if (i >= target[key].length) {
    						target[key].push({});
    					}

    					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
    						// new/untyped scale or type changed: let's apply the new defaults
    						// then merge source scale to correctly overwrite the defaults.
    						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
    					} else {
    						// scales type are the same
    						helpers$1.merge(target[key][i], scale);
    					}
    				}
    			} else {
    				helpers$1._merger(key, target, source, options);
    			}
    		}
    	});
    }

    /**
     * Recursively merge the given config objects as the root options by handling
     * default scale options for the `scales` and `scale` properties, then returns
     * a deep copy of the result, thus doesn't alter inputs.
     */
    function mergeConfig(/* config objects ... */) {
    	return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
    		merger: function(key, target, source, options) {
    			var tval = target[key] || Object.create(null);
    			var sval = source[key];

    			if (key === 'scales') {
    				// scale config merging is complex. Add our own function here for that
    				target[key] = mergeScaleConfig(tval, sval);
    			} else if (key === 'scale') {
    				// used in polar area & radar charts since there is only one scale
    				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
    			} else {
    				helpers$1._merger(key, target, source, options);
    			}
    		}
    	});
    }

    function initConfig(config) {
    	config = config || Object.create(null);

    	// Do NOT use mergeConfig for the data object because this method merges arrays
    	// and so would change references to labels and datasets, preventing data updates.
    	var data = config.data = config.data || {};
    	data.datasets = data.datasets || [];
    	data.labels = data.labels || [];

    	config.options = mergeConfig(
    		core_defaults.global,
    		core_defaults[config.type],
    		config.options || {});

    	return config;
    }

    function updateConfig(chart) {
    	var newOptions = chart.options;

    	helpers$1.each(chart.scales, function(scale) {
    		core_layouts.removeBox(chart, scale);
    	});

    	newOptions = mergeConfig(
    		core_defaults.global,
    		core_defaults[chart.config.type],
    		newOptions);

    	chart.options = chart.config.options = newOptions;
    	chart.ensureScalesHaveIDs();
    	chart.buildOrUpdateScales();

    	// Tooltip
    	chart.tooltip._options = newOptions.tooltips;
    	chart.tooltip.initialize();
    }

    function nextAvailableScaleId(axesOpts, prefix, index) {
    	var id;
    	var hasId = function(obj) {
    		return obj.id === id;
    	};

    	do {
    		id = prefix + index++;
    	} while (helpers$1.findIndex(axesOpts, hasId) >= 0);

    	return id;
    }

    function positionIsHorizontal(position) {
    	return position === 'top' || position === 'bottom';
    }

    function compare2Level(l1, l2) {
    	return function(a, b) {
    		return a[l1] === b[l1]
    			? a[l2] - b[l2]
    			: a[l1] - b[l1];
    	};
    }

    var Chart = function(item, config) {
    	this.construct(item, config);
    	return this;
    };

    helpers$1.extend(Chart.prototype, /** @lends Chart */ {
    	/**
    	 * @private
    	 */
    	construct: function(item, config) {
    		var me = this;

    		config = initConfig(config);

    		var context = platform.acquireContext(item, config);
    		var canvas = context && context.canvas;
    		var height = canvas && canvas.height;
    		var width = canvas && canvas.width;

    		me.id = helpers$1.uid();
    		me.ctx = context;
    		me.canvas = canvas;
    		me.config = config;
    		me.width = width;
    		me.height = height;
    		me.aspectRatio = height ? width / height : null;
    		me.options = config.options;
    		me._bufferedRender = false;
    		me._layers = [];

    		/**
    		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
    		 * the "instance" still need to be defined since it might be called from plugins.
    		 * @prop Chart#chart
    		 * @deprecated since version 2.6.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		me.chart = me;
    		me.controller = me; // chart.chart.controller #inception

    		// Add the chart instance to the global namespace
    		Chart.instances[me.id] = me;

    		// Define alias to the config data: `chart.data === chart.config.data`
    		Object.defineProperty(me, 'data', {
    			get: function() {
    				return me.config.data;
    			},
    			set: function(value) {
    				me.config.data = value;
    			}
    		});

    		if (!context || !canvas) {
    			// The given item is not a compatible context2d element, let's return before finalizing
    			// the chart initialization but after setting basic chart / controller properties that
    			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
    			// https://github.com/chartjs/Chart.js/issues/2807
    			console.error("Failed to create chart: can't acquire context from the given item");
    			return;
    		}

    		me.initialize();
    		me.update();
    	},

    	/**
    	 * @private
    	 */
    	initialize: function() {
    		var me = this;

    		// Before init plugin notification
    		core_plugins.notify(me, 'beforeInit');

    		helpers$1.retinaScale(me, me.options.devicePixelRatio);

    		me.bindEvents();

    		if (me.options.responsive) {
    			// Initial resize before chart draws (must be silent to preserve initial animations).
    			me.resize(true);
    		}

    		me.initToolTip();

    		// After init plugin notification
    		core_plugins.notify(me, 'afterInit');

    		return me;
    	},

    	clear: function() {
    		helpers$1.canvas.clear(this);
    		return this;
    	},

    	stop: function() {
    		// Stops any current animation loop occurring
    		core_animations.cancelAnimation(this);
    		return this;
    	},

    	resize: function(silent) {
    		var me = this;
    		var options = me.options;
    		var canvas = me.canvas;
    		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

    		// the canvas render width and height will be casted to integers so make sure that
    		// the canvas display style uses the same integer values to avoid blurring effect.

    		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
    		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
    		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

    		if (me.width === newWidth && me.height === newHeight) {
    			return;
    		}

    		canvas.width = me.width = newWidth;
    		canvas.height = me.height = newHeight;
    		canvas.style.width = newWidth + 'px';
    		canvas.style.height = newHeight + 'px';

    		helpers$1.retinaScale(me, options.devicePixelRatio);

    		if (!silent) {
    			// Notify any plugins about the resize
    			var newSize = {width: newWidth, height: newHeight};
    			core_plugins.notify(me, 'resize', [newSize]);

    			// Notify of resize
    			if (options.onResize) {
    				options.onResize(me, newSize);
    			}

    			me.stop();
    			me.update({
    				duration: options.responsiveAnimationDuration
    			});
    		}
    	},

    	ensureScalesHaveIDs: function() {
    		var options = this.options;
    		var scalesOptions = options.scales || {};
    		var scaleOptions = options.scale;

    		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
    			if (!xAxisOptions.id) {
    				xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
    			}
    		});

    		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
    			if (!yAxisOptions.id) {
    				yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
    			}
    		});

    		if (scaleOptions) {
    			scaleOptions.id = scaleOptions.id || 'scale';
    		}
    	},

    	/**
    	 * Builds a map of scale ID to scale object for future lookup.
    	 */
    	buildOrUpdateScales: function() {
    		var me = this;
    		var options = me.options;
    		var scales = me.scales || {};
    		var items = [];
    		var updated = Object.keys(scales).reduce(function(obj, id) {
    			obj[id] = false;
    			return obj;
    		}, {});

    		if (options.scales) {
    			items = items.concat(
    				(options.scales.xAxes || []).map(function(xAxisOptions) {
    					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
    				}),
    				(options.scales.yAxes || []).map(function(yAxisOptions) {
    					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
    				})
    			);
    		}

    		if (options.scale) {
    			items.push({
    				options: options.scale,
    				dtype: 'radialLinear',
    				isDefault: true,
    				dposition: 'chartArea'
    			});
    		}

    		helpers$1.each(items, function(item) {
    			var scaleOptions = item.options;
    			var id = scaleOptions.id;
    			var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

    			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
    				scaleOptions.position = item.dposition;
    			}

    			updated[id] = true;
    			var scale = null;
    			if (id in scales && scales[id].type === scaleType) {
    				scale = scales[id];
    				scale.options = scaleOptions;
    				scale.ctx = me.ctx;
    				scale.chart = me;
    			} else {
    				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
    				if (!scaleClass) {
    					return;
    				}
    				scale = new scaleClass({
    					id: id,
    					type: scaleType,
    					options: scaleOptions,
    					ctx: me.ctx,
    					chart: me
    				});
    				scales[scale.id] = scale;
    			}

    			scale.mergeTicksOptions();

    			// TODO(SB): I think we should be able to remove this custom case (options.scale)
    			// and consider it as a regular scale part of the "scales"" map only! This would
    			// make the logic easier and remove some useless? custom code.
    			if (item.isDefault) {
    				me.scale = scale;
    			}
    		});
    		// clear up discarded scales
    		helpers$1.each(updated, function(hasUpdated, id) {
    			if (!hasUpdated) {
    				delete scales[id];
    			}
    		});

    		me.scales = scales;

    		core_scaleService.addScalesToLayout(this);
    	},

    	buildOrUpdateControllers: function() {
    		var me = this;
    		var newControllers = [];
    		var datasets = me.data.datasets;
    		var i, ilen;

    		for (i = 0, ilen = datasets.length; i < ilen; i++) {
    			var dataset = datasets[i];
    			var meta = me.getDatasetMeta(i);
    			var type = dataset.type || me.config.type;

    			if (meta.type && meta.type !== type) {
    				me.destroyDatasetMeta(i);
    				meta = me.getDatasetMeta(i);
    			}
    			meta.type = type;
    			meta.order = dataset.order || 0;
    			meta.index = i;

    			if (meta.controller) {
    				meta.controller.updateIndex(i);
    				meta.controller.linkScales();
    			} else {
    				var ControllerClass = controllers[meta.type];
    				if (ControllerClass === undefined) {
    					throw new Error('"' + meta.type + '" is not a chart type.');
    				}

    				meta.controller = new ControllerClass(me, i);
    				newControllers.push(meta.controller);
    			}
    		}

    		return newControllers;
    	},

    	/**
    	 * Reset the elements of all datasets
    	 * @private
    	 */
    	resetElements: function() {
    		var me = this;
    		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
    			me.getDatasetMeta(datasetIndex).controller.reset();
    		}, me);
    	},

    	/**
    	* Resets the chart back to it's state before the initial animation
    	*/
    	reset: function() {
    		this.resetElements();
    		this.tooltip.initialize();
    	},

    	update: function(config) {
    		var me = this;
    		var i, ilen;

    		if (!config || typeof config !== 'object') {
    			// backwards compatibility
    			config = {
    				duration: config,
    				lazy: arguments[1]
    			};
    		}

    		updateConfig(me);

    		// plugins options references might have change, let's invalidate the cache
    		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
    		core_plugins._invalidate(me);

    		if (core_plugins.notify(me, 'beforeUpdate') === false) {
    			return;
    		}

    		// In case the entire data object changed
    		me.tooltip._data = me.data;

    		// Make sure dataset controllers are updated and new controllers are reset
    		var newControllers = me.buildOrUpdateControllers();

    		// Make sure all dataset controllers have correct meta data counts
    		for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
    			me.getDatasetMeta(i).controller.buildOrUpdateElements();
    		}

    		me.updateLayout();

    		// Can only reset the new controllers after the scales have been updated
    		if (me.options.animation && me.options.animation.duration) {
    			helpers$1.each(newControllers, function(controller) {
    				controller.reset();
    			});
    		}

    		me.updateDatasets();

    		// Need to reset tooltip in case it is displayed with elements that are removed
    		// after update.
    		me.tooltip.initialize();

    		// Last active contains items that were previously in the tooltip.
    		// When we reset the tooltip, we need to clear it
    		me.lastActive = [];

    		// Do this before render so that any plugins that need final scale updates can use it
    		core_plugins.notify(me, 'afterUpdate');

    		me._layers.sort(compare2Level('z', '_idx'));

    		if (me._bufferedRender) {
    			me._bufferedRequest = {
    				duration: config.duration,
    				easing: config.easing,
    				lazy: config.lazy
    			};
    		} else {
    			me.render(config);
    		}
    	},

    	/**
    	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
    	 * hook, in which case, plugins will not be called on `afterLayout`.
    	 * @private
    	 */
    	updateLayout: function() {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeLayout') === false) {
    			return;
    		}

    		core_layouts.update(this, this.width, this.height);

    		me._layers = [];
    		helpers$1.each(me.boxes, function(box) {
    			// _configure is called twice, once in core.scale.update and once here.
    			// Here the boxes are fully updated and at their final positions.
    			if (box._configure) {
    				box._configure();
    			}
    			me._layers.push.apply(me._layers, box._layers());
    		}, me);

    		me._layers.forEach(function(item, index) {
    			item._idx = index;
    		});

    		/**
    		 * Provided for backward compatibility, use `afterLayout` instead.
    		 * @method IPlugin#afterScaleUpdate
    		 * @deprecated since version 2.5.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		core_plugins.notify(me, 'afterScaleUpdate');
    		core_plugins.notify(me, 'afterLayout');
    	},

    	/**
    	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
    	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
    	 * @private
    	 */
    	updateDatasets: function() {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
    			return;
    		}

    		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    			me.updateDataset(i);
    		}

    		core_plugins.notify(me, 'afterDatasetsUpdate');
    	},

    	/**
    	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
    	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
    	 * @private
    	 */
    	updateDataset: function(index) {
    		var me = this;
    		var meta = me.getDatasetMeta(index);
    		var args = {
    			meta: meta,
    			index: index
    		};

    		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
    			return;
    		}

    		meta.controller._update();

    		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
    	},

    	render: function(config) {
    		var me = this;

    		if (!config || typeof config !== 'object') {
    			// backwards compatibility
    			config = {
    				duration: config,
    				lazy: arguments[1]
    			};
    		}

    		var animationOptions = me.options.animation;
    		var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
    		var lazy = config.lazy;

    		if (core_plugins.notify(me, 'beforeRender') === false) {
    			return;
    		}

    		var onComplete = function(animation) {
    			core_plugins.notify(me, 'afterRender');
    			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
    		};

    		if (animationOptions && duration) {
    			var animation = new core_animation({
    				numSteps: duration / 16.66, // 60 fps
    				easing: config.easing || animationOptions.easing,

    				render: function(chart, animationObject) {
    					var easingFunction = helpers$1.easing.effects[animationObject.easing];
    					var currentStep = animationObject.currentStep;
    					var stepDecimal = currentStep / animationObject.numSteps;

    					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
    				},

    				onAnimationProgress: animationOptions.onProgress,
    				onAnimationComplete: onComplete
    			});

    			core_animations.addAnimation(me, animation, duration, lazy);
    		} else {
    			me.draw();

    			// See https://github.com/chartjs/Chart.js/issues/3781
    			onComplete(new core_animation({numSteps: 0, chart: me}));
    		}

    		return me;
    	},

    	draw: function(easingValue) {
    		var me = this;
    		var i, layers;

    		me.clear();

    		if (helpers$1.isNullOrUndef(easingValue)) {
    			easingValue = 1;
    		}

    		me.transition(easingValue);

    		if (me.width <= 0 || me.height <= 0) {
    			return;
    		}

    		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
    			return;
    		}

    		// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
    		// currently be part of layers. Instead, we draw
    		// layers <= 0 before(default, backward compat), and the rest after
    		layers = me._layers;
    		for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
    			layers[i].draw(me.chartArea);
    		}

    		me.drawDatasets(easingValue);

    		// Rest of layers
    		for (; i < layers.length; ++i) {
    			layers[i].draw(me.chartArea);
    		}

    		me._drawTooltip(easingValue);

    		core_plugins.notify(me, 'afterDraw', [easingValue]);
    	},

    	/**
    	 * @private
    	 */
    	transition: function(easingValue) {
    		var me = this;

    		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
    			if (me.isDatasetVisible(i)) {
    				me.getDatasetMeta(i).controller.transition(easingValue);
    			}
    		}

    		me.tooltip.transition(easingValue);
    	},

    	/**
    	 * @private
    	 */
    	_getSortedDatasetMetas: function(filterVisible) {
    		var me = this;
    		var datasets = me.data.datasets || [];
    		var result = [];
    		var i, ilen;

    		for (i = 0, ilen = datasets.length; i < ilen; ++i) {
    			if (!filterVisible || me.isDatasetVisible(i)) {
    				result.push(me.getDatasetMeta(i));
    			}
    		}

    		result.sort(compare2Level('order', 'index'));

    		return result;
    	},

    	/**
    	 * @private
    	 */
    	_getSortedVisibleDatasetMetas: function() {
    		return this._getSortedDatasetMetas(true);
    	},

    	/**
    	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
    	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
    	 * @private
    	 */
    	drawDatasets: function(easingValue) {
    		var me = this;
    		var metasets, i;

    		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
    			return;
    		}

    		metasets = me._getSortedVisibleDatasetMetas();
    		for (i = metasets.length - 1; i >= 0; --i) {
    			me.drawDataset(metasets[i], easingValue);
    		}

    		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
    	},

    	/**
    	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
    	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
    	 * @private
    	 */
    	drawDataset: function(meta, easingValue) {
    		var me = this;
    		var args = {
    			meta: meta,
    			index: meta.index,
    			easingValue: easingValue
    		};

    		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
    			return;
    		}

    		meta.controller.draw(easingValue);

    		core_plugins.notify(me, 'afterDatasetDraw', [args]);
    	},

    	/**
    	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
    	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
    	 * @private
    	 */
    	_drawTooltip: function(easingValue) {
    		var me = this;
    		var tooltip = me.tooltip;
    		var args = {
    			tooltip: tooltip,
    			easingValue: easingValue
    		};

    		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
    			return;
    		}

    		tooltip.draw();

    		core_plugins.notify(me, 'afterTooltipDraw', [args]);
    	},

    	/**
    	 * Get the single element that was clicked on
    	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
    	 */
    	getElementAtEvent: function(e) {
    		return core_interaction.modes.single(this, e);
    	},

    	getElementsAtEvent: function(e) {
    		return core_interaction.modes.label(this, e, {intersect: true});
    	},

    	getElementsAtXAxis: function(e) {
    		return core_interaction.modes['x-axis'](this, e, {intersect: true});
    	},

    	getElementsAtEventForMode: function(e, mode, options) {
    		var method = core_interaction.modes[mode];
    		if (typeof method === 'function') {
    			return method(this, e, options);
    		}

    		return [];
    	},

    	getDatasetAtEvent: function(e) {
    		return core_interaction.modes.dataset(this, e, {intersect: true});
    	},

    	getDatasetMeta: function(datasetIndex) {
    		var me = this;
    		var dataset = me.data.datasets[datasetIndex];
    		if (!dataset._meta) {
    			dataset._meta = {};
    		}

    		var meta = dataset._meta[me.id];
    		if (!meta) {
    			meta = dataset._meta[me.id] = {
    				type: null,
    				data: [],
    				dataset: null,
    				controller: null,
    				hidden: null,			// See isDatasetVisible() comment
    				xAxisID: null,
    				yAxisID: null,
    				order: dataset.order || 0,
    				index: datasetIndex
    			};
    		}

    		return meta;
    	},

    	getVisibleDatasetCount: function() {
    		var count = 0;
    		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
    			if (this.isDatasetVisible(i)) {
    				count++;
    			}
    		}
    		return count;
    	},

    	isDatasetVisible: function(datasetIndex) {
    		var meta = this.getDatasetMeta(datasetIndex);

    		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
    		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
    		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
    	},

    	generateLegend: function() {
    		return this.options.legendCallback(this);
    	},

    	/**
    	 * @private
    	 */
    	destroyDatasetMeta: function(datasetIndex) {
    		var id = this.id;
    		var dataset = this.data.datasets[datasetIndex];
    		var meta = dataset._meta && dataset._meta[id];

    		if (meta) {
    			meta.controller.destroy();
    			delete dataset._meta[id];
    		}
    	},

    	destroy: function() {
    		var me = this;
    		var canvas = me.canvas;
    		var i, ilen;

    		me.stop();

    		// dataset controllers need to cleanup associated data
    		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    			me.destroyDatasetMeta(i);
    		}

    		if (canvas) {
    			me.unbindEvents();
    			helpers$1.canvas.clear(me);
    			platform.releaseContext(me.ctx);
    			me.canvas = null;
    			me.ctx = null;
    		}

    		core_plugins.notify(me, 'destroy');

    		delete Chart.instances[me.id];
    	},

    	toBase64Image: function() {
    		return this.canvas.toDataURL.apply(this.canvas, arguments);
    	},

    	initToolTip: function() {
    		var me = this;
    		me.tooltip = new core_tooltip({
    			_chart: me,
    			_chartInstance: me, // deprecated, backward compatibility
    			_data: me.data,
    			_options: me.options.tooltips
    		}, me);
    	},

    	/**
    	 * @private
    	 */
    	bindEvents: function() {
    		var me = this;
    		var listeners = me._listeners = {};
    		var listener = function() {
    			me.eventHandler.apply(me, arguments);
    		};

    		helpers$1.each(me.options.events, function(type) {
    			platform.addEventListener(me, type, listener);
    			listeners[type] = listener;
    		});

    		// Elements used to detect size change should not be injected for non responsive charts.
    		// See https://github.com/chartjs/Chart.js/issues/2210
    		if (me.options.responsive) {
    			listener = function() {
    				me.resize();
    			};

    			platform.addEventListener(me, 'resize', listener);
    			listeners.resize = listener;
    		}
    	},

    	/**
    	 * @private
    	 */
    	unbindEvents: function() {
    		var me = this;
    		var listeners = me._listeners;
    		if (!listeners) {
    			return;
    		}

    		delete me._listeners;
    		helpers$1.each(listeners, function(listener, type) {
    			platform.removeEventListener(me, type, listener);
    		});
    	},

    	updateHoverStyle: function(elements, mode, enabled) {
    		var prefix = enabled ? 'set' : 'remove';
    		var element, i, ilen;

    		for (i = 0, ilen = elements.length; i < ilen; ++i) {
    			element = elements[i];
    			if (element) {
    				this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
    			}
    		}

    		if (mode === 'dataset') {
    			this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
    		}
    	},

    	/**
    	 * @private
    	 */
    	eventHandler: function(e) {
    		var me = this;
    		var tooltip = me.tooltip;

    		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
    			return;
    		}

    		// Buffer any update calls so that renders do not occur
    		me._bufferedRender = true;
    		me._bufferedRequest = null;

    		var changed = me.handleEvent(e);
    		// for smooth tooltip animations issue #4989
    		// the tooltip should be the source of change
    		// Animation check workaround:
    		// tooltip._start will be null when tooltip isn't animating
    		if (tooltip) {
    			changed = tooltip._start
    				? tooltip.handleEvent(e)
    				: changed | tooltip.handleEvent(e);
    		}

    		core_plugins.notify(me, 'afterEvent', [e]);

    		var bufferedRequest = me._bufferedRequest;
    		if (bufferedRequest) {
    			// If we have an update that was triggered, we need to do a normal render
    			me.render(bufferedRequest);
    		} else if (changed && !me.animating) {
    			// If entering, leaving, or changing elements, animate the change via pivot
    			me.stop();

    			// We only need to render at this point. Updating will cause scales to be
    			// recomputed generating flicker & using more memory than necessary.
    			me.render({
    				duration: me.options.hover.animationDuration,
    				lazy: true
    			});
    		}

    		me._bufferedRender = false;
    		me._bufferedRequest = null;

    		return me;
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event the event to handle
    	 * @return {boolean} true if the chart needs to re-render
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var options = me.options || {};
    		var hoverOptions = options.hover;
    		var changed = false;

    		me.lastActive = me.lastActive || [];

    		// Find Active Elements for hover and tooltips
    		if (e.type === 'mouseout') {
    			me.active = [];
    		} else {
    			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
    		}

    		// Invoke onHover hook
    		// Need to call with native event here to not break backwards compatibility
    		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

    		if (e.type === 'mouseup' || e.type === 'click') {
    			if (options.onClick) {
    				// Use e.native here for backwards compatibility
    				options.onClick.call(me, e.native, me.active);
    			}
    		}

    		// Remove styling for last active (even if it may still be active)
    		if (me.lastActive.length) {
    			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
    		}

    		// Built in hover styling
    		if (me.active.length && hoverOptions.mode) {
    			me.updateHoverStyle(me.active, hoverOptions.mode, true);
    		}

    		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

    		// Remember Last Actives
    		me.lastActive = me.active;

    		return changed;
    	}
    });

    /**
     * NOTE(SB) We actually don't use this container anymore but we need to keep it
     * for backward compatibility. Though, it can still be useful for plugins that
     * would need to work on multiple charts?!
     */
    Chart.instances = {};

    var core_controller = Chart;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart instead.
     * @class Chart.Controller
     * @deprecated since version 2.6
     * @todo remove at version 3
     * @private
     */
    Chart.Controller = Chart;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart
     * @deprecated since version 2.8
     * @todo remove at version 3
     * @private
     */
    Chart.types = {};

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.helpers.configMerge
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.configMerge = mergeConfig;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.helpers.scaleMerge
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.scaleMerge = mergeScaleConfig;

    var core_helpers = function() {

    	// -- Basic js utility methods

    	helpers$1.where = function(collection, filterCallback) {
    		if (helpers$1.isArray(collection) && Array.prototype.filter) {
    			return collection.filter(filterCallback);
    		}
    		var filtered = [];

    		helpers$1.each(collection, function(item) {
    			if (filterCallback(item)) {
    				filtered.push(item);
    			}
    		});

    		return filtered;
    	};
    	helpers$1.findIndex = Array.prototype.findIndex ?
    		function(array, callback, scope) {
    			return array.findIndex(callback, scope);
    		} :
    		function(array, callback, scope) {
    			scope = scope === undefined ? array : scope;
    			for (var i = 0, ilen = array.length; i < ilen; ++i) {
    				if (callback.call(scope, array[i], i, array)) {
    					return i;
    				}
    			}
    			return -1;
    		};
    	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
    		// Default to start of the array
    		if (helpers$1.isNullOrUndef(startIndex)) {
    			startIndex = -1;
    		}
    		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
    			var currentItem = arrayToSearch[i];
    			if (filterCallback(currentItem)) {
    				return currentItem;
    			}
    		}
    	};
    	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
    		// Default to end of the array
    		if (helpers$1.isNullOrUndef(startIndex)) {
    			startIndex = arrayToSearch.length;
    		}
    		for (var i = startIndex - 1; i >= 0; i--) {
    			var currentItem = arrayToSearch[i];
    			if (filterCallback(currentItem)) {
    				return currentItem;
    			}
    		}
    	};

    	// -- Math methods
    	helpers$1.isNumber = function(n) {
    		return !isNaN(parseFloat(n)) && isFinite(n);
    	};
    	helpers$1.almostEquals = function(x, y, epsilon) {
    		return Math.abs(x - y) < epsilon;
    	};
    	helpers$1.almostWhole = function(x, epsilon) {
    		var rounded = Math.round(x);
    		return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
    	};
    	helpers$1.max = function(array) {
    		return array.reduce(function(max, value) {
    			if (!isNaN(value)) {
    				return Math.max(max, value);
    			}
    			return max;
    		}, Number.NEGATIVE_INFINITY);
    	};
    	helpers$1.min = function(array) {
    		return array.reduce(function(min, value) {
    			if (!isNaN(value)) {
    				return Math.min(min, value);
    			}
    			return min;
    		}, Number.POSITIVE_INFINITY);
    	};
    	helpers$1.sign = Math.sign ?
    		function(x) {
    			return Math.sign(x);
    		} :
    		function(x) {
    			x = +x; // convert to a number
    			if (x === 0 || isNaN(x)) {
    				return x;
    			}
    			return x > 0 ? 1 : -1;
    		};
    	helpers$1.toRadians = function(degrees) {
    		return degrees * (Math.PI / 180);
    	};
    	helpers$1.toDegrees = function(radians) {
    		return radians * (180 / Math.PI);
    	};

    	/**
    	 * Returns the number of decimal places
    	 * i.e. the number of digits after the decimal point, of the value of this Number.
    	 * @param {number} x - A number.
    	 * @returns {number} The number of decimal places.
    	 * @private
    	 */
    	helpers$1._decimalPlaces = function(x) {
    		if (!helpers$1.isFinite(x)) {
    			return;
    		}
    		var e = 1;
    		var p = 0;
    		while (Math.round(x * e) / e !== x) {
    			e *= 10;
    			p++;
    		}
    		return p;
    	};

    	// Gets the angle from vertical upright to the point about a centre.
    	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
    		var distanceFromXCenter = anglePoint.x - centrePoint.x;
    		var distanceFromYCenter = anglePoint.y - centrePoint.y;
    		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

    		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

    		if (angle < (-0.5 * Math.PI)) {
    			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
    		}

    		return {
    			angle: angle,
    			distance: radialDistanceFromCenter
    		};
    	};
    	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
    		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    	};

    	/**
    	 * Provided for backward compatibility, not available anymore
    	 * @function Chart.helpers.aliasPixel
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 */
    	helpers$1.aliasPixel = function(pixelWidth) {
    		return (pixelWidth % 2 === 0) ? 0 : 0.5;
    	};

    	/**
    	 * Returns the aligned pixel value to avoid anti-aliasing blur
    	 * @param {Chart} chart - The chart instance.
    	 * @param {number} pixel - A pixel value.
    	 * @param {number} width - The width of the element.
    	 * @returns {number} The aligned pixel value.
    	 * @private
    	 */
    	helpers$1._alignPixel = function(chart, pixel, width) {
    		var devicePixelRatio = chart.currentDevicePixelRatio;
    		var halfWidth = width / 2;
    		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
    	};

    	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
    		// Props to Rob Spencer at scaled innovation for his post on splining between points
    		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

    		// This function must also respect "skipped" points

    		var previous = firstPoint.skip ? middlePoint : firstPoint;
    		var current = middlePoint;
    		var next = afterPoint.skip ? middlePoint : afterPoint;

    		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
    		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

    		var s01 = d01 / (d01 + d12);
    		var s12 = d12 / (d01 + d12);

    		// If all points are the same, s01 & s02 will be inf
    		s01 = isNaN(s01) ? 0 : s01;
    		s12 = isNaN(s12) ? 0 : s12;

    		var fa = t * s01; // scaling factor for triangle Ta
    		var fb = t * s12;

    		return {
    			previous: {
    				x: current.x - fa * (next.x - previous.x),
    				y: current.y - fa * (next.y - previous.y)
    			},
    			next: {
    				x: current.x + fb * (next.x - previous.x),
    				y: current.y + fb * (next.y - previous.y)
    			}
    		};
    	};
    	helpers$1.EPSILON = Number.EPSILON || 1e-14;
    	helpers$1.splineCurveMonotone = function(points) {
    		// This function calculates Bézier control points in a similar way than |splineCurve|,
    		// but preserves monotonicity of the provided data and ensures no local extremums are added
    		// between the dataset discrete points due to the interpolation.
    		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

    		var pointsWithTangents = (points || []).map(function(point) {
    			return {
    				model: point._model,
    				deltaK: 0,
    				mK: 0
    			};
    		});

    		// Calculate slopes (deltaK) and initialize tangents (mK)
    		var pointsLen = pointsWithTangents.length;
    		var i, pointBefore, pointCurrent, pointAfter;
    		for (i = 0; i < pointsLen; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			if (pointCurrent.model.skip) {
    				continue;
    			}

    			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    			if (pointAfter && !pointAfter.model.skip) {
    				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

    				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
    				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
    			}

    			if (!pointBefore || pointBefore.model.skip) {
    				pointCurrent.mK = pointCurrent.deltaK;
    			} else if (!pointAfter || pointAfter.model.skip) {
    				pointCurrent.mK = pointBefore.deltaK;
    			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
    				pointCurrent.mK = 0;
    			} else {
    				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
    			}
    		}

    		// Adjust tangents to ensure monotonic properties
    		var alphaK, betaK, tauK, squaredMagnitude;
    		for (i = 0; i < pointsLen - 1; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			pointAfter = pointsWithTangents[i + 1];
    			if (pointCurrent.model.skip || pointAfter.model.skip) {
    				continue;
    			}

    			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
    				pointCurrent.mK = pointAfter.mK = 0;
    				continue;
    			}

    			alphaK = pointCurrent.mK / pointCurrent.deltaK;
    			betaK = pointAfter.mK / pointCurrent.deltaK;
    			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    			if (squaredMagnitude <= 9) {
    				continue;
    			}

    			tauK = 3 / Math.sqrt(squaredMagnitude);
    			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
    			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
    		}

    		// Compute control points
    		var deltaX;
    		for (i = 0; i < pointsLen; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			if (pointCurrent.model.skip) {
    				continue;
    			}

    			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    			if (pointBefore && !pointBefore.model.skip) {
    				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
    				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
    				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
    			}
    			if (pointAfter && !pointAfter.model.skip) {
    				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
    				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
    				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
    			}
    		}
    	};
    	helpers$1.nextItem = function(collection, index, loop) {
    		if (loop) {
    			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
    		}
    		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
    	};
    	helpers$1.previousItem = function(collection, index, loop) {
    		if (loop) {
    			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
    		}
    		return index <= 0 ? collection[0] : collection[index - 1];
    	};
    	// Implementation of the nice number algorithm used in determining where axis labels will go
    	helpers$1.niceNum = function(range, round) {
    		var exponent = Math.floor(helpers$1.log10(range));
    		var fraction = range / Math.pow(10, exponent);
    		var niceFraction;

    		if (round) {
    			if (fraction < 1.5) {
    				niceFraction = 1;
    			} else if (fraction < 3) {
    				niceFraction = 2;
    			} else if (fraction < 7) {
    				niceFraction = 5;
    			} else {
    				niceFraction = 10;
    			}
    		} else if (fraction <= 1.0) {
    			niceFraction = 1;
    		} else if (fraction <= 2) {
    			niceFraction = 2;
    		} else if (fraction <= 5) {
    			niceFraction = 5;
    		} else {
    			niceFraction = 10;
    		}

    		return niceFraction * Math.pow(10, exponent);
    	};
    	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    	helpers$1.requestAnimFrame = (function() {
    		if (typeof window === 'undefined') {
    			return function(callback) {
    				callback();
    			};
    		}
    		return window.requestAnimationFrame ||
    			window.webkitRequestAnimationFrame ||
    			window.mozRequestAnimationFrame ||
    			window.oRequestAnimationFrame ||
    			window.msRequestAnimationFrame ||
    			function(callback) {
    				return window.setTimeout(callback, 1000 / 60);
    			};
    	}());
    	// -- DOM methods
    	helpers$1.getRelativePosition = function(evt, chart) {
    		var mouseX, mouseY;
    		var e = evt.originalEvent || evt;
    		var canvas = evt.target || evt.srcElement;
    		var boundingRect = canvas.getBoundingClientRect();

    		var touches = e.touches;
    		if (touches && touches.length > 0) {
    			mouseX = touches[0].clientX;
    			mouseY = touches[0].clientY;

    		} else {
    			mouseX = e.clientX;
    			mouseY = e.clientY;
    		}

    		// Scale mouse coordinates into canvas coordinates
    		// by following the pattern laid out by 'jerryj' in the comments of
    		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
    		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
    		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
    		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
    		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
    		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
    		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

    		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
    		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
    		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
    		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

    		return {
    			x: mouseX,
    			y: mouseY
    		};

    	};

    	// Private helper function to convert max-width/max-height values that may be percentages into a number
    	function parseMaxStyle(styleValue, node, parentProperty) {
    		var valueInPixels;
    		if (typeof styleValue === 'string') {
    			valueInPixels = parseInt(styleValue, 10);

    			if (styleValue.indexOf('%') !== -1) {
    				// percentage * size in dimension
    				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    			}
    		} else {
    			valueInPixels = styleValue;
    		}

    		return valueInPixels;
    	}

    	/**
    	 * Returns if the given value contains an effective constraint.
    	 * @private
    	 */
    	function isConstrainedValue(value) {
    		return value !== undefined && value !== null && value !== 'none';
    	}

    	/**
    	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
    	 * @param {HTMLElement} domNode - the node to check the constraint on
    	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
    	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
    	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
    	 */
    	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
    		var view = document.defaultView;
    		var parentNode = helpers$1._getParentNode(domNode);
    		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
    		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
    		var hasCNode = isConstrainedValue(constrainedNode);
    		var hasCContainer = isConstrainedValue(constrainedContainer);
    		var infinity = Number.POSITIVE_INFINITY;

    		if (hasCNode || hasCContainer) {
    			return Math.min(
    				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
    				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
    		}

    		return 'none';
    	}
    	// returns Number or undefined if no constraint
    	helpers$1.getConstraintWidth = function(domNode) {
    		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
    	};
    	// returns Number or undefined if no constraint
    	helpers$1.getConstraintHeight = function(domNode) {
    		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
    	};
    	/**
    	 * @private
     	 */
    	helpers$1._calculatePadding = function(container, padding, parentDimension) {
    		padding = helpers$1.getStyle(container, padding);

    		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
    	};
    	/**
    	 * @private
    	 */
    	helpers$1._getParentNode = function(domNode) {
    		var parent = domNode.parentNode;
    		if (parent && parent.toString() === '[object ShadowRoot]') {
    			parent = parent.host;
    		}
    		return parent;
    	};
    	helpers$1.getMaximumWidth = function(domNode) {
    		var container = helpers$1._getParentNode(domNode);
    		if (!container) {
    			return domNode.clientWidth;
    		}

    		var clientWidth = container.clientWidth;
    		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
    		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

    		var w = clientWidth - paddingLeft - paddingRight;
    		var cw = helpers$1.getConstraintWidth(domNode);
    		return isNaN(cw) ? w : Math.min(w, cw);
    	};
    	helpers$1.getMaximumHeight = function(domNode) {
    		var container = helpers$1._getParentNode(domNode);
    		if (!container) {
    			return domNode.clientHeight;
    		}

    		var clientHeight = container.clientHeight;
    		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
    		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

    		var h = clientHeight - paddingTop - paddingBottom;
    		var ch = helpers$1.getConstraintHeight(domNode);
    		return isNaN(ch) ? h : Math.min(h, ch);
    	};
    	helpers$1.getStyle = function(el, property) {
    		return el.currentStyle ?
    			el.currentStyle[property] :
    			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
    	};
    	helpers$1.retinaScale = function(chart, forceRatio) {
    		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
    		if (pixelRatio === 1) {
    			return;
    		}

    		var canvas = chart.canvas;
    		var height = chart.height;
    		var width = chart.width;

    		canvas.height = height * pixelRatio;
    		canvas.width = width * pixelRatio;
    		chart.ctx.scale(pixelRatio, pixelRatio);

    		// If no style has been set on the canvas, the render size is used as display size,
    		// making the chart visually bigger, so let's enforce it to the "correct" values.
    		// See https://github.com/chartjs/Chart.js/issues/3575
    		if (!canvas.style.height && !canvas.style.width) {
    			canvas.style.height = height + 'px';
    			canvas.style.width = width + 'px';
    		}
    	};
    	// -- Canvas methods
    	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
    		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
    	};
    	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
    		cache = cache || {};
    		var data = cache.data = cache.data || {};
    		var gc = cache.garbageCollect = cache.garbageCollect || [];

    		if (cache.font !== font) {
    			data = cache.data = {};
    			gc = cache.garbageCollect = [];
    			cache.font = font;
    		}

    		ctx.font = font;
    		var longest = 0;
    		var ilen = arrayOfThings.length;
    		var i, j, jlen, thing, nestedThing;
    		for (i = 0; i < ilen; i++) {
    			thing = arrayOfThings[i];

    			// Undefined strings and arrays should not be measured
    			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
    				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
    			} else if (helpers$1.isArray(thing)) {
    				// if it is an array lets measure each element
    				// to do maybe simplify this function a bit so we can do this more recursively?
    				for (j = 0, jlen = thing.length; j < jlen; j++) {
    					nestedThing = thing[j];
    					// Undefined strings and arrays should not be measured
    					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
    						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
    					}
    				}
    			}
    		}

    		var gcLen = gc.length / 2;
    		if (gcLen > arrayOfThings.length) {
    			for (i = 0; i < gcLen; i++) {
    				delete data[gc[i]];
    			}
    			gc.splice(0, gcLen);
    		}
    		return longest;
    	};
    	helpers$1.measureText = function(ctx, data, gc, longest, string) {
    		var textWidth = data[string];
    		if (!textWidth) {
    			textWidth = data[string] = ctx.measureText(string).width;
    			gc.push(string);
    		}
    		if (textWidth > longest) {
    			longest = textWidth;
    		}
    		return longest;
    	};

    	/**
    	 * @deprecated
    	 */
    	helpers$1.numberOfLabelLines = function(arrayOfThings) {
    		var numberOfLines = 1;
    		helpers$1.each(arrayOfThings, function(thing) {
    			if (helpers$1.isArray(thing)) {
    				if (thing.length > numberOfLines) {
    					numberOfLines = thing.length;
    				}
    			}
    		});
    		return numberOfLines;
    	};

    	helpers$1.color = !chartjsColor ?
    		function(value) {
    			console.error('Color.js not found!');
    			return value;
    		} :
    		function(value) {
    			/* global CanvasGradient */
    			if (value instanceof CanvasGradient) {
    				value = core_defaults.global.defaultColor;
    			}

    			return chartjsColor(value);
    		};

    	helpers$1.getHoverColor = function(colorValue) {
    		/* global CanvasPattern */
    		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
    			colorValue :
    			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
    	};
    };

    function abstract() {
    	throw new Error(
    		'This method is not implemented: either no adapter can ' +
    		'be found or an incomplete integration was provided.'
    	);
    }

    /**
     * Date adapter (current used by the time scale)
     * @namespace Chart._adapters._date
     * @memberof Chart._adapters
     * @private
     */

    /**
     * Currently supported unit string values.
     * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
     * @memberof Chart._adapters._date
     * @name Unit
     */

    /**
     * @class
     */
    function DateAdapter(options) {
    	this.options = options || {};
    }

    helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
    	/**
    	 * Returns a map of time formats for the supported formatting units defined
    	 * in Unit as well as 'datetime' representing a detailed date/time string.
    	 * @returns {{string: string}}
    	 */
    	formats: abstract,

    	/**
    	 * Parses the given `value` and return the associated timestamp.
    	 * @param {any} value - the value to parse (usually comes from the data)
    	 * @param {string} [format] - the expected data format
    	 * @returns {(number|null)}
    	 * @function
    	 */
    	parse: abstract,

    	/**
    	 * Returns the formatted date in the specified `format` for a given `timestamp`.
    	 * @param {number} timestamp - the timestamp to format
    	 * @param {string} format - the date/time token
    	 * @return {string}
    	 * @function
    	 */
    	format: abstract,

    	/**
    	 * Adds the specified `amount` of `unit` to the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {number} amount - the amount to add
    	 * @param {Unit} unit - the unit as string
    	 * @return {number}
    	 * @function
    	 */
    	add: abstract,

    	/**
    	 * Returns the number of `unit` between the given timestamps.
    	 * @param {number} max - the input timestamp (reference)
    	 * @param {number} min - the timestamp to substract
    	 * @param {Unit} unit - the unit as string
    	 * @return {number}
    	 * @function
    	 */
    	diff: abstract,

    	/**
    	 * Returns start of `unit` for the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {Unit} unit - the unit as string
    	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
    	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
    	 * @function
    	 */
    	startOf: abstract,

    	/**
    	 * Returns end of `unit` for the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {Unit} unit - the unit as string
    	 * @function
    	 */
    	endOf: abstract,

    	// DEPRECATIONS

    	/**
    	 * Provided for backward compatibility for scale.getValueForPixel(),
    	 * this method should be overridden only by the moment adapter.
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 * @private
    	 */
    	_create: function(value) {
    		return value;
    	}
    });

    DateAdapter.override = function(members) {
    	helpers$1.extend(DateAdapter.prototype, members);
    };

    var _date = DateAdapter;

    var core_adapters = {
    	_date: _date
    };

    /**
     * Namespace to hold static tick generation functions
     * @namespace Chart.Ticks
     */
    var core_ticks = {
    	/**
    	 * Namespace to hold formatters for different types of ticks
    	 * @namespace Chart.Ticks.formatters
    	 */
    	formatters: {
    		/**
    		 * Formatter for value labels
    		 * @method Chart.Ticks.formatters.values
    		 * @param value the value to display
    		 * @return {string|string[]} the label to display
    		 */
    		values: function(value) {
    			return helpers$1.isArray(value) ? value : '' + value;
    		},

    		/**
    		 * Formatter for linear numeric ticks
    		 * @method Chart.Ticks.formatters.linear
    		 * @param tickValue {number} the value to be formatted
    		 * @param index {number} the position of the tickValue parameter in the ticks array
    		 * @param ticks {number[]} the list of ticks being converted
    		 * @return {string} string representation of the tickValue parameter
    		 */
    		linear: function(tickValue, index, ticks) {
    			// If we have lots of ticks, don't use the ones
    			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

    			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
    			if (Math.abs(delta) > 1) {
    				if (tickValue !== Math.floor(tickValue)) {
    					// not an integer
    					delta = tickValue - Math.floor(tickValue);
    				}
    			}

    			var logDelta = helpers$1.log10(Math.abs(delta));
    			var tickString = '';

    			if (tickValue !== 0) {
    				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
    				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
    					var logTick = helpers$1.log10(Math.abs(tickValue));
    					var numExponential = Math.floor(logTick) - Math.floor(logDelta);
    					numExponential = Math.max(Math.min(numExponential, 20), 0);
    					tickString = tickValue.toExponential(numExponential);
    				} else {
    					var numDecimal = -1 * Math.floor(logDelta);
    					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
    					tickString = tickValue.toFixed(numDecimal);
    				}
    			} else {
    				tickString = '0'; // never show decimal places for 0
    			}

    			return tickString;
    		},

    		logarithmic: function(tickValue, index, ticks) {
    			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

    			if (tickValue === 0) {
    				return '0';
    			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
    				return tickValue.toExponential();
    			}
    			return '';
    		}
    	}
    };

    var isArray = helpers$1.isArray;
    var isNullOrUndef = helpers$1.isNullOrUndef;
    var valueOrDefault$a = helpers$1.valueOrDefault;
    var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

    core_defaults._set('scale', {
    	display: true,
    	position: 'left',
    	offset: false,

    	// grid line settings
    	gridLines: {
    		display: true,
    		color: 'rgba(0,0,0,0.1)',
    		lineWidth: 1,
    		drawBorder: true,
    		drawOnChartArea: true,
    		drawTicks: true,
    		tickMarkLength: 10,
    		zeroLineWidth: 1,
    		zeroLineColor: 'rgba(0,0,0,0.25)',
    		zeroLineBorderDash: [],
    		zeroLineBorderDashOffset: 0.0,
    		offsetGridLines: false,
    		borderDash: [],
    		borderDashOffset: 0.0
    	},

    	// scale label
    	scaleLabel: {
    		// display property
    		display: false,

    		// actual label
    		labelString: '',

    		// top/bottom padding
    		padding: {
    			top: 4,
    			bottom: 4
    		}
    	},

    	// label settings
    	ticks: {
    		beginAtZero: false,
    		minRotation: 0,
    		maxRotation: 50,
    		mirror: false,
    		padding: 0,
    		reverse: false,
    		display: true,
    		autoSkip: true,
    		autoSkipPadding: 0,
    		labelOffset: 0,
    		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
    		callback: core_ticks.formatters.values,
    		minor: {},
    		major: {}
    	}
    });

    /** Returns a new array containing numItems from arr */
    function sample(arr, numItems) {
    	var result = [];
    	var increment = arr.length / numItems;
    	var i = 0;
    	var len = arr.length;

    	for (; i < len; i += increment) {
    		result.push(arr[Math.floor(i)]);
    	}
    	return result;
    }

    function getPixelForGridLine(scale, index, offsetGridLines) {
    	var length = scale.getTicks().length;
    	var validIndex = Math.min(index, length - 1);
    	var lineValue = scale.getPixelForTick(validIndex);
    	var start = scale._startPixel;
    	var end = scale._endPixel;
    	var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
    	var offset;

    	if (offsetGridLines) {
    		if (length === 1) {
    			offset = Math.max(lineValue - start, end - lineValue);
    		} else if (index === 0) {
    			offset = (scale.getPixelForTick(1) - lineValue) / 2;
    		} else {
    			offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
    		}
    		lineValue += validIndex < index ? offset : -offset;

    		// Return undefined if the pixel is out of the range
    		if (lineValue < start - epsilon || lineValue > end + epsilon) {
    			return;
    		}
    	}
    	return lineValue;
    }

    function garbageCollect(caches, length) {
    	helpers$1.each(caches, function(cache) {
    		var gc = cache.gc;
    		var gcLen = gc.length / 2;
    		var i;
    		if (gcLen > length) {
    			for (i = 0; i < gcLen; ++i) {
    				delete cache.data[gc[i]];
    			}
    			gc.splice(0, gcLen);
    		}
    	});
    }

    /**
     * Returns {width, height, offset} objects for the first, last, widest, highest tick
     * labels where offset indicates the anchor point offset from the top in pixels.
     */
    function computeLabelSizes(ctx, tickFonts, ticks, caches) {
    	var length = ticks.length;
    	var widths = [];
    	var heights = [];
    	var offsets = [];
    	var widestLabelSize = 0;
    	var highestLabelSize = 0;
    	var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

    	for (i = 0; i < length; ++i) {
    		label = ticks[i].label;
    		tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
    		ctx.font = fontString = tickFont.string;
    		cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
    		lineHeight = tickFont.lineHeight;
    		width = height = 0;
    		// Undefined labels and arrays should not be measured
    		if (!isNullOrUndef(label) && !isArray(label)) {
    			width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
    			height = lineHeight;
    		} else if (isArray(label)) {
    			// if it is an array let's measure each element
    			for (j = 0, jlen = label.length; j < jlen; ++j) {
    				nestedLabel = label[j];
    				// Undefined labels and arrays should not be measured
    				if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
    					width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
    					height += lineHeight;
    				}
    			}
    		}
    		widths.push(width);
    		heights.push(height);
    		offsets.push(lineHeight / 2);
    		widestLabelSize = Math.max(width, widestLabelSize);
    		highestLabelSize = Math.max(height, highestLabelSize);
    	}
    	garbageCollect(caches, length);

    	widest = widths.indexOf(widestLabelSize);
    	highest = heights.indexOf(highestLabelSize);

    	function valueAt(idx) {
    		return {
    			width: widths[idx] || 0,
    			height: heights[idx] || 0,
    			offset: offsets[idx] || 0
    		};
    	}

    	return {
    		first: valueAt(0),
    		last: valueAt(length - 1),
    		widest: valueAt(widest),
    		highest: valueAt(highest)
    	};
    }

    function getTickMarkLength(options) {
    	return options.drawTicks ? options.tickMarkLength : 0;
    }

    function getScaleLabelHeight(options) {
    	var font, padding;

    	if (!options.display) {
    		return 0;
    	}

    	font = helpers$1.options._parseFont(options);
    	padding = helpers$1.options.toPadding(options.padding);

    	return font.lineHeight + padding.height;
    }

    function parseFontOptions(options, nestedOpts) {
    	return helpers$1.extend(helpers$1.options._parseFont({
    		fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
    		fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
    		fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
    		lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
    	}), {
    		color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
    	});
    }

    function parseTickFontOptions(options) {
    	var minor = parseFontOptions(options, options.minor);
    	var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;

    	return {minor: minor, major: major};
    }

    function nonSkipped(ticksToFilter) {
    	var filtered = [];
    	var item, index, len;
    	for (index = 0, len = ticksToFilter.length; index < len; ++index) {
    		item = ticksToFilter[index];
    		if (typeof item._index !== 'undefined') {
    			filtered.push(item);
    		}
    	}
    	return filtered;
    }

    function getEvenSpacing(arr) {
    	var len = arr.length;
    	var i, diff;

    	if (len < 2) {
    		return false;
    	}

    	for (diff = arr[0], i = 1; i < len; ++i) {
    		if (arr[i] - arr[i - 1] !== diff) {
    			return false;
    		}
    	}
    	return diff;
    }

    function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
    	var evenMajorSpacing = getEvenSpacing(majorIndices);
    	var spacing = (ticks.length - 1) / ticksLimit;
    	var factors, factor, i, ilen;

    	// If the major ticks are evenly spaced apart, place the minor ticks
    	// so that they divide the major ticks into even chunks
    	if (!evenMajorSpacing) {
    		return Math.max(spacing, 1);
    	}

    	factors = helpers$1.math._factorize(evenMajorSpacing);
    	for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
    		factor = factors[i];
    		if (factor > spacing) {
    			return factor;
    		}
    	}
    	return Math.max(spacing, 1);
    }

    function getMajorIndices(ticks) {
    	var result = [];
    	var i, ilen;
    	for (i = 0, ilen = ticks.length; i < ilen; i++) {
    		if (ticks[i].major) {
    			result.push(i);
    		}
    	}
    	return result;
    }

    function skipMajors(ticks, majorIndices, spacing) {
    	var count = 0;
    	var next = majorIndices[0];
    	var i, tick;

    	spacing = Math.ceil(spacing);
    	for (i = 0; i < ticks.length; i++) {
    		tick = ticks[i];
    		if (i === next) {
    			tick._index = i;
    			count++;
    			next = majorIndices[count * spacing];
    		} else {
    			delete tick.label;
    		}
    	}
    }

    function skip(ticks, spacing, majorStart, majorEnd) {
    	var start = valueOrDefault$a(majorStart, 0);
    	var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
    	var count = 0;
    	var length, i, tick, next;

    	spacing = Math.ceil(spacing);
    	if (majorEnd) {
    		length = majorEnd - majorStart;
    		spacing = length / Math.floor(length / spacing);
    	}

    	next = start;

    	while (next < 0) {
    		count++;
    		next = Math.round(start + count * spacing);
    	}

    	for (i = Math.max(start, 0); i < end; i++) {
    		tick = ticks[i];
    		if (i === next) {
    			tick._index = i;
    			count++;
    			next = Math.round(start + count * spacing);
    		} else {
    			delete tick.label;
    		}
    	}
    }

    var Scale = core_element.extend({

    	zeroLineIndex: 0,

    	/**
    	 * Get the padding needed for the scale
    	 * @method getPadding
    	 * @private
    	 * @returns {Padding} the necessary padding
    	 */
    	getPadding: function() {
    		var me = this;
    		return {
    			left: me.paddingLeft || 0,
    			top: me.paddingTop || 0,
    			right: me.paddingRight || 0,
    			bottom: me.paddingBottom || 0
    		};
    	},

    	/**
    	 * Returns the scale tick objects ({label, major})
    	 * @since 2.7
    	 */
    	getTicks: function() {
    		return this._ticks;
    	},

    	/**
    	* @private
    	*/
    	_getLabels: function() {
    		var data = this.chart.data;
    		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    	},

    	// These methods are ordered by lifecyle. Utilities then follow.
    	// Any function defined here is inherited by all scale types.
    	// Any function can be extended by the scale type

    	/**
    	 * Provided for backward compatibility, not available anymore
    	 * @function Chart.Scale.mergeTicksOptions
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 */
    	mergeTicksOptions: function() {
    		// noop
    	},

    	beforeUpdate: function() {
    		helpers$1.callback(this.options.beforeUpdate, [this]);
    	},

    	/**
    	 * @param {number} maxWidth - the max width in pixels
    	 * @param {number} maxHeight - the max height in pixels
    	 * @param {object} margins - the space between the edge of the other scales and edge of the chart
    	 *   This space comes from two sources:
    	 *     - padding - space that's required to show the labels at the edges of the scale
    	 *     - thickness of scales or legends in another orientation
    	 */
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var sampleSize = tickOpts.sampleSize;
    		var i, ilen, labels, ticks, samplingEnabled;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = helpers$1.extend({
    			left: 0,
    			right: 0,
    			top: 0,
    			bottom: 0
    		}, margins);

    		me._ticks = null;
    		me.ticks = null;
    		me._labelSizes = null;
    		me._maxLabelLines = 0;
    		me.longestLabelWidth = 0;
    		me.longestTextCache = me.longestTextCache || {};
    		me._gridLineItems = null;
    		me._labelItems = null;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();

    		// Data min/max
    		me.beforeDataLimits();
    		me.determineDataLimits();
    		me.afterDataLimits();

    		// Ticks - `this.ticks` is now DEPRECATED!
    		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
    		// and must not be accessed directly from outside this class. `this.ticks` being
    		// around for long time and not marked as private, we can't change its structure
    		// without unexpected breaking changes. If you need to access the scale ticks,
    		// use scale.getTicks() instead.

    		me.beforeBuildTicks();

    		// New implementations should return an array of objects but for BACKWARD COMPAT,
    		// we still support no return (`this.ticks` internally set by calling this method).
    		ticks = me.buildTicks() || [];

    		// Allow modification of ticks in callback.
    		ticks = me.afterBuildTicks(ticks) || ticks;

    		// Ensure ticks contains ticks in new tick format
    		if ((!ticks || !ticks.length) && me.ticks) {
    			ticks = [];
    			for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
    				ticks.push({
    					value: me.ticks[i],
    					major: false
    				});
    			}
    		}

    		me._ticks = ticks;

    		// Compute tick rotation and fit using a sampled subset of labels
    		// We generally don't need to compute the size of every single label for determining scale size
    		samplingEnabled = sampleSize < ticks.length;
    		labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);

    		// _configure is called twice, once here, once from core.controller.updateLayout.
    		// Here we haven't been positioned yet, but dimensions are correct.
    		// Variables set in _configure are needed for calculateTickRotation, and
    		// it's ok that coordinates are not correct there, only dimensions matter.
    		me._configure();

    		// Tick Rotation
    		me.beforeCalculateTickRotation();
    		me.calculateTickRotation();
    		me.afterCalculateTickRotation();

    		me.beforeFit();
    		me.fit();
    		me.afterFit();

    		// Auto-skip
    		me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

    		if (samplingEnabled) {
    			// Generate labels using all non-skipped ticks
    			labels = me._convertTicksToLabels(me._ticksToDraw);
    		}

    		me.ticks = labels;   // BACKWARD COMPATIBILITY

    		// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

    		me.afterUpdate();

    		// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
    		// make maxWidth and maxHeight private
    		return me.minSize;
    	},

    	/**
    	 * @private
    	 */
    	_configure: function() {
    		var me = this;
    		var reversePixels = me.options.ticks.reverse;
    		var startPixel, endPixel;

    		if (me.isHorizontal()) {
    			startPixel = me.left;
    			endPixel = me.right;
    		} else {
    			startPixel = me.top;
    			endPixel = me.bottom;
    			// by default vertical scales are from bottom to top, so pixels are reversed
    			reversePixels = !reversePixels;
    		}
    		me._startPixel = startPixel;
    		me._endPixel = endPixel;
    		me._reversePixels = reversePixels;
    		me._length = endPixel - startPixel;
    	},

    	afterUpdate: function() {
    		helpers$1.callback(this.options.afterUpdate, [this]);
    	},

    	//

    	beforeSetDimensions: function() {
    		helpers$1.callback(this.options.beforeSetDimensions, [this]);
    	},
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;
    	},
    	afterSetDimensions: function() {
    		helpers$1.callback(this.options.afterSetDimensions, [this]);
    	},

    	// Data limits
    	beforeDataLimits: function() {
    		helpers$1.callback(this.options.beforeDataLimits, [this]);
    	},
    	determineDataLimits: helpers$1.noop,
    	afterDataLimits: function() {
    		helpers$1.callback(this.options.afterDataLimits, [this]);
    	},

    	//
    	beforeBuildTicks: function() {
    		helpers$1.callback(this.options.beforeBuildTicks, [this]);
    	},
    	buildTicks: helpers$1.noop,
    	afterBuildTicks: function(ticks) {
    		var me = this;
    		// ticks is empty for old axis implementations here
    		if (isArray(ticks) && ticks.length) {
    			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
    		}
    		// Support old implementations (that modified `this.ticks` directly in buildTicks)
    		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
    		return ticks;
    	},

    	beforeTickToLabelConversion: function() {
    		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
    	},
    	convertTicksToLabels: function() {
    		var me = this;
    		// Convert ticks to strings
    		var tickOpts = me.options.ticks;
    		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
    	},
    	afterTickToLabelConversion: function() {
    		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
    	},

    	//

    	beforeCalculateTickRotation: function() {
    		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
    	},
    	calculateTickRotation: function() {
    		var me = this;
    		var options = me.options;
    		var tickOpts = options.ticks;
    		var numTicks = me.getTicks().length;
    		var minRotation = tickOpts.minRotation || 0;
    		var maxRotation = tickOpts.maxRotation;
    		var labelRotation = minRotation;
    		var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

    		if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
    			me.labelRotation = minRotation;
    			return;
    		}

    		labelSizes = me._getLabelSizes();
    		maxLabelWidth = labelSizes.widest.width;
    		maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;

    		// Estimate the width of each grid based on the canvas width, the maximum
    		// label width and the number of tick intervals
    		maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
    		tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

    		// Allow 3 pixels x2 padding either side for label readability
    		if (maxLabelWidth + 6 > tickWidth) {
    			tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
    			maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
    				- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
    			maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
    			labelRotation = helpers$1.toDegrees(Math.min(
    				Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
    				Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
    			));
    			labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    		}

    		me.labelRotation = labelRotation;
    	},
    	afterCalculateTickRotation: function() {
    		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
    	},

    	//

    	beforeFit: function() {
    		helpers$1.callback(this.options.beforeFit, [this]);
    	},
    	fit: function() {
    		var me = this;
    		// Reset
    		var minSize = me.minSize = {
    			width: 0,
    			height: 0
    		};

    		var chart = me.chart;
    		var opts = me.options;
    		var tickOpts = opts.ticks;
    		var scaleLabelOpts = opts.scaleLabel;
    		var gridLineOpts = opts.gridLines;
    		var display = me._isVisible();
    		var isBottom = opts.position === 'bottom';
    		var isHorizontal = me.isHorizontal();

    		// Width
    		if (isHorizontal) {
    			minSize.width = me.maxWidth;
    		} else if (display) {
    			minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
    		}

    		// height
    		if (!isHorizontal) {
    			minSize.height = me.maxHeight; // fill all the height
    		} else if (display) {
    			minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
    		}

    		// Don't bother fitting the ticks if we are not showing the labels
    		if (tickOpts.display && display) {
    			var tickFonts = parseTickFontOptions(tickOpts);
    			var labelSizes = me._getLabelSizes();
    			var firstLabelSize = labelSizes.first;
    			var lastLabelSize = labelSizes.last;
    			var widestLabelSize = labelSizes.widest;
    			var highestLabelSize = labelSizes.highest;
    			var lineSpace = tickFonts.minor.lineHeight * 0.4;
    			var tickPadding = tickOpts.padding;

    			if (isHorizontal) {
    				// A horizontal axis is more constrained by the height.
    				var isRotated = me.labelRotation !== 0;
    				var angleRadians = helpers$1.toRadians(me.labelRotation);
    				var cosRotation = Math.cos(angleRadians);
    				var sinRotation = Math.sin(angleRadians);

    				var labelHeight = sinRotation * widestLabelSize.width
    					+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
    					+ (isRotated ? 0 : lineSpace); // padding

    				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

    				var offsetLeft = me.getPixelForTick(0) - me.left;
    				var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
    				var paddingLeft, paddingRight;

    				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
    				// which means that the right padding is dominated by the font height
    				if (isRotated) {
    					paddingLeft = isBottom ?
    						cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
    						sinRotation * (firstLabelSize.height - firstLabelSize.offset);
    					paddingRight = isBottom ?
    						sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
    						cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
    				} else {
    					paddingLeft = firstLabelSize.width / 2;
    					paddingRight = lastLabelSize.width / 2;
    				}

    				// Adjust padding taking into account changes in offsets
    				// and add 3 px to move away from canvas edges
    				me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
    				me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
    			} else {
    				// A vertical axis is more constrained by the width. Labels are the
    				// dominant factor here, so get that length first and account for padding
    				var labelWidth = tickOpts.mirror ? 0 :
    					// use lineSpace for consistency with horizontal axis
    					// tickPadding is not implemented for horizontal
    					widestLabelSize.width + tickPadding + lineSpace;

    				minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);

    				me.paddingTop = firstLabelSize.height / 2;
    				me.paddingBottom = lastLabelSize.height / 2;
    			}
    		}

    		me.handleMargins();

    		if (isHorizontal) {
    			me.width = me._length = chart.width - me.margins.left - me.margins.right;
    			me.height = minSize.height;
    		} else {
    			me.width = minSize.width;
    			me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
    		}
    	},

    	/**
    	 * Handle margins and padding interactions
    	 * @private
    	 */
    	handleMargins: function() {
    		var me = this;
    		if (me.margins) {
    			me.margins.left = Math.max(me.paddingLeft, me.margins.left);
    			me.margins.top = Math.max(me.paddingTop, me.margins.top);
    			me.margins.right = Math.max(me.paddingRight, me.margins.right);
    			me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
    		}
    	},

    	afterFit: function() {
    		helpers$1.callback(this.options.afterFit, [this]);
    	},

    	// Shared Methods
    	isHorizontal: function() {
    		var pos = this.options.position;
    		return pos === 'top' || pos === 'bottom';
    	},
    	isFullWidth: function() {
    		return this.options.fullWidth;
    	},

    	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
    	getRightValue: function(rawValue) {
    		// Null and undefined values first
    		if (isNullOrUndef(rawValue)) {
    			return NaN;
    		}
    		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
    		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
    			return NaN;
    		}

    		// If it is in fact an object, dive in one more level
    		if (rawValue) {
    			if (this.isHorizontal()) {
    				if (rawValue.x !== undefined) {
    					return this.getRightValue(rawValue.x);
    				}
    			} else if (rawValue.y !== undefined) {
    				return this.getRightValue(rawValue.y);
    			}
    		}

    		// Value is good, return it
    		return rawValue;
    	},

    	_convertTicksToLabels: function(ticks) {
    		var me = this;
    		var labels, i, ilen;

    		me.ticks = ticks.map(function(tick) {
    			return tick.value;
    		});

    		me.beforeTickToLabelConversion();

    		// New implementations should return the formatted tick labels but for BACKWARD
    		// COMPAT, we still support no return (`this.ticks` internally changed by calling
    		// this method and supposed to contain only string values).
    		labels = me.convertTicksToLabels(ticks) || me.ticks;

    		me.afterTickToLabelConversion();

    		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			ticks[i].label = labels[i];
    		}

    		return labels;
    	},

    	/**
    	 * @private
    	 */
    	_getLabelSizes: function() {
    		var me = this;
    		var labelSizes = me._labelSizes;

    		if (!labelSizes) {
    			me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
    			me.longestLabelWidth = labelSizes.widest.width;
    		}

    		return labelSizes;
    	},

    	/**
    	 * @private
    	 */
    	_parseValue: function(value) {
    		var start, end, min, max;

    		if (isArray(value)) {
    			start = +this.getRightValue(value[0]);
    			end = +this.getRightValue(value[1]);
    			min = Math.min(start, end);
    			max = Math.max(start, end);
    		} else {
    			value = +this.getRightValue(value);
    			start = undefined;
    			end = value;
    			min = value;
    			max = value;
    		}

    		return {
    			min: min,
    			max: max,
    			start: start,
    			end: end
    		};
    	},

    	/**
    	* @private
    	*/
    	_getScaleLabel: function(rawValue) {
    		var v = this._parseValue(rawValue);
    		if (v.start !== undefined) {
    			return '[' + v.start + ', ' + v.end + ']';
    		}

    		return +this.getRightValue(rawValue);
    	},

    	/**
    	 * Used to get the value to display in the tooltip for the data at the given index
    	 * @param index
    	 * @param datasetIndex
    	 */
    	getLabelForIndex: helpers$1.noop,

    	/**
    	 * Returns the location of the given data point. Value can either be an index or a numerical value
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 * @param value
    	 * @param index
    	 * @param datasetIndex
    	 */
    	getPixelForValue: helpers$1.noop,

    	/**
    	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 * @param pixel
    	 */
    	getValueForPixel: helpers$1.noop,

    	/**
    	 * Returns the location of the tick at the given index
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getPixelForTick: function(index) {
    		var me = this;
    		var offset = me.options.offset;
    		var numTicks = me._ticks.length;
    		var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);

    		return index < 0 || index > numTicks - 1
    			? null
    			: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
    	},

    	/**
    	 * Utility for getting the pixel location of a percentage of scale
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getPixelForDecimal: function(decimal) {
    		var me = this;

    		if (me._reversePixels) {
    			decimal = 1 - decimal;
    		}

    		return me._startPixel + decimal * me._length;
    	},

    	getDecimalForPixel: function(pixel) {
    		var decimal = (pixel - this._startPixel) / this._length;
    		return this._reversePixels ? 1 - decimal : decimal;
    	},

    	/**
    	 * Returns the pixel for the minimum chart value
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getBasePixel: function() {
    		return this.getPixelForValue(this.getBaseValue());
    	},

    	getBaseValue: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;

    		return me.beginAtZero ? 0 :
    			min < 0 && max < 0 ? max :
    			min > 0 && max > 0 ? min :
    			0;
    	},

    	/**
    	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
    	 * @private
    	 */
    	_autoSkip: function(ticks) {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var axisLength = me._length;
    		var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
    		var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
    		var numMajorIndices = majorIndices.length;
    		var first = majorIndices[0];
    		var last = majorIndices[numMajorIndices - 1];
    		var i, ilen, spacing, avgMajorSpacing;

    		// If there are too many major ticks to display them all
    		if (numMajorIndices > ticksLimit) {
    			skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
    			return nonSkipped(ticks);
    		}

    		spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

    		if (numMajorIndices > 0) {
    			for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
    				skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
    			}
    			avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
    			skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    			skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    			return nonSkipped(ticks);
    		}
    		skip(ticks, spacing);
    		return nonSkipped(ticks);
    	},

    	/**
    	 * @private
    	 */
    	_tickSize: function() {
    		var me = this;
    		var optionTicks = me.options.ticks;

    		// Calculate space needed by label in axis direction.
    		var rot = helpers$1.toRadians(me.labelRotation);
    		var cos = Math.abs(Math.cos(rot));
    		var sin = Math.abs(Math.sin(rot));

    		var labelSizes = me._getLabelSizes();
    		var padding = optionTicks.autoSkipPadding || 0;
    		var w = labelSizes ? labelSizes.widest.width + padding : 0;
    		var h = labelSizes ? labelSizes.highest.height + padding : 0;

    		// Calculate space needed for 1 tick in axis direction.
    		return me.isHorizontal()
    			? h * cos > w * sin ? w / cos : h / sin
    			: h * sin < w * cos ? h / cos : w / sin;
    	},

    	/**
    	 * @private
    	 */
    	_isVisible: function() {
    		var me = this;
    		var chart = me.chart;
    		var display = me.options.display;
    		var i, ilen, meta;

    		if (display !== 'auto') {
    			return !!display;
    		}

    		// When 'auto', the scale is visible if at least one associated dataset is visible.
    		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
    			if (chart.isDatasetVisible(i)) {
    				meta = chart.getDatasetMeta(i);
    				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
    					return true;
    				}
    			}
    		}

    		return false;
    	},

    	/**
    	 * @private
    	 */
    	_computeGridLineItems: function(chartArea) {
    		var me = this;
    		var chart = me.chart;
    		var options = me.options;
    		var gridLines = options.gridLines;
    		var position = options.position;
    		var offsetGridLines = gridLines.offsetGridLines;
    		var isHorizontal = me.isHorizontal();
    		var ticks = me._ticksToDraw;
    		var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);

    		var tl = getTickMarkLength(gridLines);
    		var items = [];
    		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
    		var axisHalfWidth = axisWidth / 2;
    		var alignPixel = helpers$1._alignPixel;
    		var alignBorderValue = function(pixel) {
    			return alignPixel(chart, pixel, axisWidth);
    		};
    		var borderValue, i, tick, lineValue, alignedLineValue;
    		var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

    		if (position === 'top') {
    			borderValue = alignBorderValue(me.bottom);
    			ty1 = me.bottom - tl;
    			ty2 = borderValue - axisHalfWidth;
    			y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
    			y2 = chartArea.bottom;
    		} else if (position === 'bottom') {
    			borderValue = alignBorderValue(me.top);
    			y1 = chartArea.top;
    			y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
    			ty1 = borderValue + axisHalfWidth;
    			ty2 = me.top + tl;
    		} else if (position === 'left') {
    			borderValue = alignBorderValue(me.right);
    			tx1 = me.right - tl;
    			tx2 = borderValue - axisHalfWidth;
    			x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
    			x2 = chartArea.right;
    		} else {
    			borderValue = alignBorderValue(me.left);
    			x1 = chartArea.left;
    			x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
    			tx1 = borderValue + axisHalfWidth;
    			tx2 = me.left + tl;
    		}

    		for (i = 0; i < ticksLength; ++i) {
    			tick = ticks[i] || {};

    			// autoskipper skipped this tick (#4635)
    			if (isNullOrUndef(tick.label) && i < ticks.length) {
    				continue;
    			}

    			if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
    				// Draw the first index specially
    				lineWidth = gridLines.zeroLineWidth;
    				lineColor = gridLines.zeroLineColor;
    				borderDash = gridLines.zeroLineBorderDash || [];
    				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
    			} else {
    				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
    				lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
    				borderDash = gridLines.borderDash || [];
    				borderDashOffset = gridLines.borderDashOffset || 0.0;
    			}

    			lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);

    			// Skip if the pixel is out of the range
    			if (lineValue === undefined) {
    				continue;
    			}

    			alignedLineValue = alignPixel(chart, lineValue, lineWidth);

    			if (isHorizontal) {
    				tx1 = tx2 = x1 = x2 = alignedLineValue;
    			} else {
    				ty1 = ty2 = y1 = y2 = alignedLineValue;
    			}

    			items.push({
    				tx1: tx1,
    				ty1: ty1,
    				tx2: tx2,
    				ty2: ty2,
    				x1: x1,
    				y1: y1,
    				x2: x2,
    				y2: y2,
    				width: lineWidth,
    				color: lineColor,
    				borderDash: borderDash,
    				borderDashOffset: borderDashOffset,
    			});
    		}

    		items.ticksLength = ticksLength;
    		items.borderValue = borderValue;

    		return items;
    	},

    	/**
    	 * @private
    	 */
    	_computeLabelItems: function() {
    		var me = this;
    		var options = me.options;
    		var optionTicks = options.ticks;
    		var position = options.position;
    		var isMirrored = optionTicks.mirror;
    		var isHorizontal = me.isHorizontal();
    		var ticks = me._ticksToDraw;
    		var fonts = parseTickFontOptions(optionTicks);
    		var tickPadding = optionTicks.padding;
    		var tl = getTickMarkLength(options.gridLines);
    		var rotation = -helpers$1.toRadians(me.labelRotation);
    		var items = [];
    		var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

    		if (position === 'top') {
    			y = me.bottom - tl - tickPadding;
    			textAlign = !rotation ? 'center' : 'left';
    		} else if (position === 'bottom') {
    			y = me.top + tl + tickPadding;
    			textAlign = !rotation ? 'center' : 'right';
    		} else if (position === 'left') {
    			x = me.right - (isMirrored ? 0 : tl) - tickPadding;
    			textAlign = isMirrored ? 'left' : 'right';
    		} else {
    			x = me.left + (isMirrored ? 0 : tl) + tickPadding;
    			textAlign = isMirrored ? 'right' : 'left';
    		}

    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			tick = ticks[i];
    			label = tick.label;

    			// autoskipper skipped this tick (#4635)
    			if (isNullOrUndef(label)) {
    				continue;
    			}

    			pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
    			font = tick.major ? fonts.major : fonts.minor;
    			lineHeight = font.lineHeight;
    			lineCount = isArray(label) ? label.length : 1;

    			if (isHorizontal) {
    				x = pixel;
    				textOffset = position === 'top'
    					? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
    					: (!rotation ? 0.5 : 0) * lineHeight;
    			} else {
    				y = pixel;
    				textOffset = (1 - lineCount) * lineHeight / 2;
    			}

    			items.push({
    				x: x,
    				y: y,
    				rotation: rotation,
    				label: label,
    				font: font,
    				textOffset: textOffset,
    				textAlign: textAlign
    			});
    		}

    		return items;
    	},

    	/**
    	 * @private
    	 */
    	_drawGrid: function(chartArea) {
    		var me = this;
    		var gridLines = me.options.gridLines;

    		if (!gridLines.display) {
    			return;
    		}

    		var ctx = me.ctx;
    		var chart = me.chart;
    		var alignPixel = helpers$1._alignPixel;
    		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
    		var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
    		var width, color, i, ilen, item;

    		for (i = 0, ilen = items.length; i < ilen; ++i) {
    			item = items[i];
    			width = item.width;
    			color = item.color;

    			if (width && color) {
    				ctx.save();
    				ctx.lineWidth = width;
    				ctx.strokeStyle = color;
    				if (ctx.setLineDash) {
    					ctx.setLineDash(item.borderDash);
    					ctx.lineDashOffset = item.borderDashOffset;
    				}

    				ctx.beginPath();

    				if (gridLines.drawTicks) {
    					ctx.moveTo(item.tx1, item.ty1);
    					ctx.lineTo(item.tx2, item.ty2);
    				}

    				if (gridLines.drawOnChartArea) {
    					ctx.moveTo(item.x1, item.y1);
    					ctx.lineTo(item.x2, item.y2);
    				}

    				ctx.stroke();
    				ctx.restore();
    			}
    		}

    		if (axisWidth) {
    			// Draw the line at the edge of the axis
    			var firstLineWidth = axisWidth;
    			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
    			var borderValue = items.borderValue;
    			var x1, x2, y1, y2;

    			if (me.isHorizontal()) {
    				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
    				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
    				y1 = y2 = borderValue;
    			} else {
    				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
    				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
    				x1 = x2 = borderValue;
    			}

    			ctx.lineWidth = axisWidth;
    			ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
    			ctx.beginPath();
    			ctx.moveTo(x1, y1);
    			ctx.lineTo(x2, y2);
    			ctx.stroke();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawLabels: function() {
    		var me = this;
    		var optionTicks = me.options.ticks;

    		if (!optionTicks.display) {
    			return;
    		}

    		var ctx = me.ctx;
    		var items = me._labelItems || (me._labelItems = me._computeLabelItems());
    		var i, j, ilen, jlen, item, tickFont, label, y;

    		for (i = 0, ilen = items.length; i < ilen; ++i) {
    			item = items[i];
    			tickFont = item.font;

    			// Make sure we draw text in the correct color and font
    			ctx.save();
    			ctx.translate(item.x, item.y);
    			ctx.rotate(item.rotation);
    			ctx.font = tickFont.string;
    			ctx.fillStyle = tickFont.color;
    			ctx.textBaseline = 'middle';
    			ctx.textAlign = item.textAlign;

    			label = item.label;
    			y = item.textOffset;
    			if (isArray(label)) {
    				for (j = 0, jlen = label.length; j < jlen; ++j) {
    					// We just make sure the multiline element is a string here..
    					ctx.fillText('' + label[j], 0, y);
    					y += tickFont.lineHeight;
    				}
    			} else {
    				ctx.fillText(label, 0, y);
    			}
    			ctx.restore();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawTitle: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var options = me.options;
    		var scaleLabel = options.scaleLabel;

    		if (!scaleLabel.display) {
    			return;
    		}

    		var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
    		var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
    		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
    		var halfLineHeight = scaleLabelFont.lineHeight / 2;
    		var position = options.position;
    		var rotation = 0;
    		var scaleLabelX, scaleLabelY;

    		if (me.isHorizontal()) {
    			scaleLabelX = me.left + me.width / 2; // midpoint of the width
    			scaleLabelY = position === 'bottom'
    				? me.bottom - halfLineHeight - scaleLabelPadding.bottom
    				: me.top + halfLineHeight + scaleLabelPadding.top;
    		} else {
    			var isLeft = position === 'left';
    			scaleLabelX = isLeft
    				? me.left + halfLineHeight + scaleLabelPadding.top
    				: me.right - halfLineHeight - scaleLabelPadding.top;
    			scaleLabelY = me.top + me.height / 2;
    			rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
    		}

    		ctx.save();
    		ctx.translate(scaleLabelX, scaleLabelY);
    		ctx.rotate(rotation);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';
    		ctx.fillStyle = scaleLabelFontColor; // render in correct colour
    		ctx.font = scaleLabelFont.string;
    		ctx.fillText(scaleLabel.labelString, 0, 0);
    		ctx.restore();
    	},

    	draw: function(chartArea) {
    		var me = this;

    		if (!me._isVisible()) {
    			return;
    		}

    		me._drawGrid(chartArea);
    		me._drawTitle();
    		me._drawLabels();
    	},

    	/**
    	 * @private
    	 */
    	_layers: function() {
    		var me = this;
    		var opts = me.options;
    		var tz = opts.ticks && opts.ticks.z || 0;
    		var gz = opts.gridLines && opts.gridLines.z || 0;

    		if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
    			// backward compatibility: draw has been overridden by custom scale
    			return [{
    				z: tz,
    				draw: function() {
    					me.draw.apply(me, arguments);
    				}
    			}];
    		}

    		return [{
    			z: gz,
    			draw: function() {
    				me._drawGrid.apply(me, arguments);
    				me._drawTitle.apply(me, arguments);
    			}
    		}, {
    			z: tz,
    			draw: function() {
    				me._drawLabels.apply(me, arguments);
    			}
    		}];
    	},

    	/**
    	 * @private
    	 */
    	_getMatchingVisibleMetas: function(type) {
    		var me = this;
    		var isHorizontal = me.isHorizontal();
    		return me.chart._getSortedVisibleDatasetMetas()
    			.filter(function(meta) {
    				return (!type || meta.type === type)
    					&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
    			});
    	}
    });

    Scale.prototype._draw = Scale.prototype.draw;

    var core_scale = Scale;

    var isNullOrUndef$1 = helpers$1.isNullOrUndef;

    var defaultConfig = {
    	position: 'bottom'
    };

    var scale_category = core_scale.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var labels = me._getLabels();
    		var ticksOpts = me.options.ticks;
    		var min = ticksOpts.min;
    		var max = ticksOpts.max;
    		var minIndex = 0;
    		var maxIndex = labels.length - 1;
    		var findIndex;

    		if (min !== undefined) {
    			// user specified min value
    			findIndex = labels.indexOf(min);
    			if (findIndex >= 0) {
    				minIndex = findIndex;
    			}
    		}

    		if (max !== undefined) {
    			// user specified max value
    			findIndex = labels.indexOf(max);
    			if (findIndex >= 0) {
    				maxIndex = findIndex;
    			}
    		}

    		me.minIndex = minIndex;
    		me.maxIndex = maxIndex;
    		me.min = labels[minIndex];
    		me.max = labels[maxIndex];
    	},

    	buildTicks: function() {
    		var me = this;
    		var labels = me._getLabels();
    		var minIndex = me.minIndex;
    		var maxIndex = me.maxIndex;

    		// If we are viewing some subset of labels, slice the original array
    		me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		var me = this;
    		var chart = me.chart;

    		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
    			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
    		}

    		return me._getLabels()[index];
    	},

    	_configure: function() {
    		var me = this;
    		var offset = me.options.offset;
    		var ticks = me.ticks;

    		core_scale.prototype._configure.call(me);

    		if (!me.isHorizontal()) {
    			// For backward compatibility, vertical category scale reverse is inverted.
    			me._reversePixels = !me._reversePixels;
    		}

    		if (!ticks) {
    			return;
    		}

    		me._startValue = me.minIndex - (offset ? 0.5 : 0);
    		me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
    	},

    	// Used to get data value locations.  Value can either be an index or a numerical value
    	getPixelForValue: function(value, index, datasetIndex) {
    		var me = this;
    		var valueCategory, labels, idx;

    		if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
    			value = me.chart.data.datasets[datasetIndex].data[index];
    		}

    		// If value is a data object, then index is the index in the data array,
    		// not the index of the scale. We need to change that.
    		if (!isNullOrUndef$1(value)) {
    			valueCategory = me.isHorizontal() ? value.x : value.y;
    		}
    		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
    			labels = me._getLabels();
    			value = helpers$1.valueOrDefault(valueCategory, value);
    			idx = labels.indexOf(value);
    			index = idx !== -1 ? idx : index;
    			if (isNaN(index)) {
    				index = value;
    			}
    		}
    		return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.ticks;
    		return index < 0 || index > ticks.length - 1
    			? null
    			: this.getPixelForValue(ticks[index], index + this.minIndex);
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
    		return Math.min(Math.max(value, 0), me.ticks.length - 1);
    	},

    	getBasePixel: function() {
    		return this.bottom;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults = defaultConfig;
    scale_category._defaults = _defaults;

    var noop = helpers$1.noop;
    var isNullOrUndef$2 = helpers$1.isNullOrUndef;

    /**
     * Generate a set of linear ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {number[]} array of tick values
     */
    function generateTicks(generationOptions, dataRange) {
    	var ticks = [];
    	// To get a "nice" value for the tick spacing, we will use the appropriately named
    	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
    	// for details.

    	var MIN_SPACING = 1e-14;
    	var stepSize = generationOptions.stepSize;
    	var unit = stepSize || 1;
    	var maxNumSpaces = generationOptions.maxTicks - 1;
    	var min = generationOptions.min;
    	var max = generationOptions.max;
    	var precision = generationOptions.precision;
    	var rmin = dataRange.min;
    	var rmax = dataRange.max;
    	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
    	var factor, niceMin, niceMax, numSpaces;

    	// Beyond MIN_SPACING floating point numbers being to lose precision
    	// such that we can't do the math necessary to generate ticks
    	if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
    		return [rmin, rmax];
    	}

    	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    	if (numSpaces > maxNumSpaces) {
    		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
    		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
    	}

    	if (stepSize || isNullOrUndef$2(precision)) {
    		// If a precision is not specified, calculate factor based on spacing
    		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
    	} else {
    		// If the user specified a precision, round to that number of decimal places
    		factor = Math.pow(10, precision);
    		spacing = Math.ceil(spacing * factor) / factor;
    	}

    	niceMin = Math.floor(rmin / spacing) * spacing;
    	niceMax = Math.ceil(rmax / spacing) * spacing;

    	// If min, max and stepSize is set and they make an evenly spaced scale use it.
    	if (stepSize) {
    		// If very close to our whole number, use it.
    		if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
    			niceMin = min;
    		}
    		if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
    			niceMax = max;
    		}
    	}

    	numSpaces = (niceMax - niceMin) / spacing;
    	// If very close to our rounded value, use it.
    	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
    		numSpaces = Math.round(numSpaces);
    	} else {
    		numSpaces = Math.ceil(numSpaces);
    	}

    	niceMin = Math.round(niceMin * factor) / factor;
    	niceMax = Math.round(niceMax * factor) / factor;
    	ticks.push(isNullOrUndef$2(min) ? niceMin : min);
    	for (var j = 1; j < numSpaces; ++j) {
    		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
    	}
    	ticks.push(isNullOrUndef$2(max) ? niceMax : max);

    	return ticks;
    }

    var scale_linearbase = core_scale.extend({
    	getRightValue: function(value) {
    		if (typeof value === 'string') {
    			return +value;
    		}
    		return core_scale.prototype.getRightValue.call(this, value);
    	},

    	handleTickRangeOptions: function() {
    		var me = this;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
    		// do nothing since that would make the chart weird. If the user really wants a weird chart
    		// axis, they can manually override it
    		if (tickOpts.beginAtZero) {
    			var minSign = helpers$1.sign(me.min);
    			var maxSign = helpers$1.sign(me.max);

    			if (minSign < 0 && maxSign < 0) {
    				// move the top up to 0
    				me.max = 0;
    			} else if (minSign > 0 && maxSign > 0) {
    				// move the bottom down to 0
    				me.min = 0;
    			}
    		}

    		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
    		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

    		if (tickOpts.min !== undefined) {
    			me.min = tickOpts.min;
    		} else if (tickOpts.suggestedMin !== undefined) {
    			if (me.min === null) {
    				me.min = tickOpts.suggestedMin;
    			} else {
    				me.min = Math.min(me.min, tickOpts.suggestedMin);
    			}
    		}

    		if (tickOpts.max !== undefined) {
    			me.max = tickOpts.max;
    		} else if (tickOpts.suggestedMax !== undefined) {
    			if (me.max === null) {
    				me.max = tickOpts.suggestedMax;
    			} else {
    				me.max = Math.max(me.max, tickOpts.suggestedMax);
    			}
    		}

    		if (setMin !== setMax) {
    			// We set the min or the max but not both.
    			// So ensure that our range is good
    			// Inverted or 0 length range can happen when
    			// ticks.min is set, and no datasets are visible
    			if (me.min >= me.max) {
    				if (setMin) {
    					me.max = me.min + 1;
    				} else {
    					me.min = me.max - 1;
    				}
    			}
    		}

    		if (me.min === me.max) {
    			me.max++;

    			if (!tickOpts.beginAtZero) {
    				me.min--;
    			}
    		}
    	},

    	getTickLimit: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var stepSize = tickOpts.stepSize;
    		var maxTicksLimit = tickOpts.maxTicksLimit;
    		var maxTicks;

    		if (stepSize) {
    			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
    		} else {
    			maxTicks = me._computeTickLimit();
    			maxTicksLimit = maxTicksLimit || 11;
    		}

    		if (maxTicksLimit) {
    			maxTicks = Math.min(maxTicksLimit, maxTicks);
    		}

    		return maxTicks;
    	},

    	_computeTickLimit: function() {
    		return Number.POSITIVE_INFINITY;
    	},

    	handleDirectionalChanges: noop,

    	buildTicks: function() {
    		var me = this;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		// Figure out what the max number of ticks we can support it is based on the size of
    		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
    		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
    		// the graph. Make sure we always have at least 2 ticks
    		var maxTicks = me.getTickLimit();
    		maxTicks = Math.max(2, maxTicks);

    		var numericGeneratorOptions = {
    			maxTicks: maxTicks,
    			min: tickOpts.min,
    			max: tickOpts.max,
    			precision: tickOpts.precision,
    			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
    		};
    		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

    		me.handleDirectionalChanges();

    		// At this point, we need to update our max and min given the tick values since we have expanded the
    		// range of the scale
    		me.max = helpers$1.max(ticks);
    		me.min = helpers$1.min(ticks);

    		if (tickOpts.reverse) {
    			ticks.reverse();

    			me.start = me.max;
    			me.end = me.min;
    		} else {
    			me.start = me.min;
    			me.end = me.max;
    		}
    	},

    	convertTicksToLabels: function() {
    		var me = this;
    		me.ticksAsNumbers = me.ticks.slice();
    		me.zeroLineIndex = me.ticks.indexOf(0);

    		core_scale.prototype.convertTicksToLabels.call(me);
    	},

    	_configure: function() {
    		var me = this;
    		var ticks = me.getTicks();
    		var start = me.min;
    		var end = me.max;
    		var offset;

    		core_scale.prototype._configure.call(me);

    		if (me.options.offset && ticks.length) {
    			offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
    			start -= offset;
    			end += offset;
    		}
    		me._startValue = start;
    		me._endValue = end;
    		me._valueRange = end - start;
    	}
    });

    var defaultConfig$1 = {
    	position: 'left',
    	ticks: {
    		callback: core_ticks.formatters.linear
    	}
    };

    var DEFAULT_MIN = 0;
    var DEFAULT_MAX = 1;

    function getOrCreateStack(stacks, stacked, meta) {
    	var key = [
    		meta.type,
    		// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
    		stacked === undefined && meta.stack === undefined ? meta.index : '',
    		meta.stack
    	].join('.');

    	if (stacks[key] === undefined) {
    		stacks[key] = {
    			pos: [],
    			neg: []
    		};
    	}

    	return stacks[key];
    }

    function stackData(scale, stacks, meta, data) {
    	var opts = scale.options;
    	var stacked = opts.stacked;
    	var stack = getOrCreateStack(stacks, stacked, meta);
    	var pos = stack.pos;
    	var neg = stack.neg;
    	var ilen = data.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = scale._parseValue(data[i]);
    		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
    			continue;
    		}

    		pos[i] = pos[i] || 0;
    		neg[i] = neg[i] || 0;

    		if (opts.relativePoints) {
    			pos[i] = 100;
    		} else if (value.min < 0 || value.max < 0) {
    			neg[i] += value.min;
    		} else {
    			pos[i] += value.max;
    		}
    	}
    }

    function updateMinMax(scale, meta, data) {
    	var ilen = data.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = scale._parseValue(data[i]);
    		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
    			continue;
    		}

    		scale.min = Math.min(scale.min, value.min);
    		scale.max = Math.max(scale.max, value.max);
    	}
    }

    var scale_linear = scale_linearbase.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var opts = me.options;
    		var chart = me.chart;
    		var datasets = chart.data.datasets;
    		var metasets = me._getMatchingVisibleMetas();
    		var hasStacks = opts.stacked;
    		var stacks = {};
    		var ilen = metasets.length;
    		var i, meta, data, values;

    		me.min = Number.POSITIVE_INFINITY;
    		me.max = Number.NEGATIVE_INFINITY;

    		if (hasStacks === undefined) {
    			for (i = 0; !hasStacks && i < ilen; ++i) {
    				meta = metasets[i];
    				hasStacks = meta.stack !== undefined;
    			}
    		}

    		for (i = 0; i < ilen; ++i) {
    			meta = metasets[i];
    			data = datasets[meta.index].data;
    			if (hasStacks) {
    				stackData(me, stacks, meta, data);
    			} else {
    				updateMinMax(me, meta, data);
    			}
    		}

    		helpers$1.each(stacks, function(stackValues) {
    			values = stackValues.pos.concat(stackValues.neg);
    			me.min = Math.min(me.min, helpers$1.min(values));
    			me.max = Math.max(me.max, helpers$1.max(values));
    		});

    		me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
    		me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

    		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
    		me.handleTickRangeOptions();
    	},

    	// Returns the maximum number of ticks based on the scale dimension
    	_computeTickLimit: function() {
    		var me = this;
    		var tickFont;

    		if (me.isHorizontal()) {
    			return Math.ceil(me.width / 40);
    		}
    		tickFont = helpers$1.options._parseFont(me.options.ticks);
    		return Math.ceil(me.height / tickFont.lineHeight);
    	},

    	// Called after the ticks are built. We need
    	handleDirectionalChanges: function() {
    		if (!this.isHorizontal()) {
    			// We are in a vertical orientation. The top value is the highest. So reverse the array
    			this.ticks.reverse();
    		}
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	// Utils
    	getPixelForValue: function(value) {
    		var me = this;
    		return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
    	},

    	getValueForPixel: function(pixel) {
    		return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.ticksAsNumbers;
    		if (index < 0 || index > ticks.length - 1) {
    			return null;
    		}
    		return this.getPixelForValue(ticks[index]);
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$1 = defaultConfig$1;
    scale_linear._defaults = _defaults$1;

    var valueOrDefault$b = helpers$1.valueOrDefault;
    var log10 = helpers$1.math.log10;

    /**
     * Generate a set of logarithmic ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {number[]} array of tick values
     */
    function generateTicks$1(generationOptions, dataRange) {
    	var ticks = [];

    	var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));

    	var endExp = Math.floor(log10(dataRange.max));
    	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
    	var exp, significand;

    	if (tickVal === 0) {
    		exp = Math.floor(log10(dataRange.minNotZero));
    		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

    		ticks.push(tickVal);
    		tickVal = significand * Math.pow(10, exp);
    	} else {
    		exp = Math.floor(log10(tickVal));
    		significand = Math.floor(tickVal / Math.pow(10, exp));
    	}
    	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

    	do {
    		ticks.push(tickVal);

    		++significand;
    		if (significand === 10) {
    			significand = 1;
    			++exp;
    			precision = exp >= 0 ? 1 : precision;
    		}

    		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
    	} while (exp < endExp || (exp === endExp && significand < endSignificand));

    	var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
    	ticks.push(lastTick);

    	return ticks;
    }

    var defaultConfig$2 = {
    	position: 'left',

    	// label settings
    	ticks: {
    		callback: core_ticks.formatters.logarithmic
    	}
    };

    // TODO(v3): change this to positiveOrDefault
    function nonNegativeOrDefault(value, defaultValue) {
    	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
    }

    var scale_logarithmic = core_scale.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var opts = me.options;
    		var chart = me.chart;
    		var datasets = chart.data.datasets;
    		var isHorizontal = me.isHorizontal();
    		function IDMatches(meta) {
    			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
    		}
    		var datasetIndex, meta, value, data, i, ilen;

    		// Calculate Range
    		me.min = Number.POSITIVE_INFINITY;
    		me.max = Number.NEGATIVE_INFINITY;
    		me.minNotZero = Number.POSITIVE_INFINITY;

    		var hasStacks = opts.stacked;
    		if (hasStacks === undefined) {
    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
    					meta.stack !== undefined) {
    					hasStacks = true;
    					break;
    				}
    			}
    		}

    		if (opts.stacked || hasStacks) {
    			var valuesPerStack = {};

    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				var key = [
    					meta.type,
    					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
    					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
    					meta.stack
    				].join('.');

    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					if (valuesPerStack[key] === undefined) {
    						valuesPerStack[key] = [];
    					}

    					data = datasets[datasetIndex].data;
    					for (i = 0, ilen = data.length; i < ilen; i++) {
    						var values = valuesPerStack[key];
    						value = me._parseValue(data[i]);
    						// invalid, hidden and negative values are ignored
    						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
    							continue;
    						}
    						values[i] = values[i] || 0;
    						values[i] += value.max;
    					}
    				}
    			}

    			helpers$1.each(valuesPerStack, function(valuesForType) {
    				if (valuesForType.length > 0) {
    					var minVal = helpers$1.min(valuesForType);
    					var maxVal = helpers$1.max(valuesForType);
    					me.min = Math.min(me.min, minVal);
    					me.max = Math.max(me.max, maxVal);
    				}
    			});

    		} else {
    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					data = datasets[datasetIndex].data;
    					for (i = 0, ilen = data.length; i < ilen; i++) {
    						value = me._parseValue(data[i]);
    						// invalid, hidden and negative values are ignored
    						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
    							continue;
    						}

    						me.min = Math.min(value.min, me.min);
    						me.max = Math.max(value.max, me.max);

    						if (value.min !== 0) {
    							me.minNotZero = Math.min(value.min, me.minNotZero);
    						}
    					}
    				}
    			}
    		}

    		me.min = helpers$1.isFinite(me.min) ? me.min : null;
    		me.max = helpers$1.isFinite(me.max) ? me.max : null;
    		me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;

    		// Common base implementation to handle ticks.min, ticks.max
    		this.handleTickRangeOptions();
    	},

    	handleTickRangeOptions: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var DEFAULT_MIN = 1;
    		var DEFAULT_MAX = 10;

    		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
    		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

    		if (me.min === me.max) {
    			if (me.min !== 0 && me.min !== null) {
    				me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
    				me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
    			} else {
    				me.min = DEFAULT_MIN;
    				me.max = DEFAULT_MAX;
    			}
    		}
    		if (me.min === null) {
    			me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
    		}
    		if (me.max === null) {
    			me.max = me.min !== 0
    				? Math.pow(10, Math.floor(log10(me.min)) + 1)
    				: DEFAULT_MAX;
    		}
    		if (me.minNotZero === null) {
    			if (me.min > 0) {
    				me.minNotZero = me.min;
    			} else if (me.max < 1) {
    				me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
    			} else {
    				me.minNotZero = DEFAULT_MIN;
    			}
    		}
    	},

    	buildTicks: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var reverse = !me.isHorizontal();

    		var generationOptions = {
    			min: nonNegativeOrDefault(tickOpts.min),
    			max: nonNegativeOrDefault(tickOpts.max)
    		};
    		var ticks = me.ticks = generateTicks$1(generationOptions, me);

    		// At this point, we need to update our max and min given the tick values since we have expanded the
    		// range of the scale
    		me.max = helpers$1.max(ticks);
    		me.min = helpers$1.min(ticks);

    		if (tickOpts.reverse) {
    			reverse = !reverse;
    			me.start = me.max;
    			me.end = me.min;
    		} else {
    			me.start = me.min;
    			me.end = me.max;
    		}
    		if (reverse) {
    			ticks.reverse();
    		}
    	},

    	convertTicksToLabels: function() {
    		this.tickValues = this.ticks.slice();

    		core_scale.prototype.convertTicksToLabels.call(this);
    	},

    	// Get the correct tooltip label
    	getLabelForIndex: function(index, datasetIndex) {
    		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.tickValues;
    		if (index < 0 || index > ticks.length - 1) {
    			return null;
    		}
    		return this.getPixelForValue(ticks[index]);
    	},

    	/**
    	 * Returns the value of the first tick.
    	 * @param {number} value - The minimum not zero value.
    	 * @return {number} The first tick value.
    	 * @private
    	 */
    	_getFirstTickValue: function(value) {
    		var exp = Math.floor(log10(value));
    		var significand = Math.floor(value / Math.pow(10, exp));

    		return significand * Math.pow(10, exp);
    	},

    	_configure: function() {
    		var me = this;
    		var start = me.min;
    		var offset = 0;

    		core_scale.prototype._configure.call(me);

    		if (start === 0) {
    			start = me._getFirstTickValue(me.minNotZero);
    			offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
    		}

    		me._startValue = log10(start);
    		me._valueOffset = offset;
    		me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
    	},

    	getPixelForValue: function(value) {
    		var me = this;
    		var decimal = 0;

    		value = +me.getRightValue(value);

    		if (value > me.min && value > 0) {
    			decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
    		}
    		return me.getPixelForDecimal(decimal);
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var decimal = me.getDecimalForPixel(pixel);
    		return decimal === 0 && me.min === 0
    			? 0
    			: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$2 = defaultConfig$2;
    scale_logarithmic._defaults = _defaults$2;

    var valueOrDefault$c = helpers$1.valueOrDefault;
    var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
    var resolve$4 = helpers$1.options.resolve;

    var defaultConfig$3 = {
    	display: true,

    	// Boolean - Whether to animate scaling the chart from the centre
    	animate: true,
    	position: 'chartArea',

    	angleLines: {
    		display: true,
    		color: 'rgba(0,0,0,0.1)',
    		lineWidth: 1,
    		borderDash: [],
    		borderDashOffset: 0.0
    	},

    	gridLines: {
    		circular: false
    	},

    	// label settings
    	ticks: {
    		// Boolean - Show a backdrop to the scale label
    		showLabelBackdrop: true,

    		// String - The colour of the label backdrop
    		backdropColor: 'rgba(255,255,255,0.75)',

    		// Number - The backdrop padding above & below the label in pixels
    		backdropPaddingY: 2,

    		// Number - The backdrop padding to the side of the label in pixels
    		backdropPaddingX: 2,

    		callback: core_ticks.formatters.linear
    	},

    	pointLabels: {
    		// Boolean - if true, show point labels
    		display: true,

    		// Number - Point label font size in pixels
    		fontSize: 10,

    		// Function - Used to convert point labels
    		callback: function(label) {
    			return label;
    		}
    	}
    };

    function getTickBackdropHeight(opts) {
    	var tickOpts = opts.ticks;

    	if (tickOpts.display && opts.display) {
    		return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
    	}
    	return 0;
    }

    function measureLabelSize(ctx, lineHeight, label) {
    	if (helpers$1.isArray(label)) {
    		return {
    			w: helpers$1.longestText(ctx, ctx.font, label),
    			h: label.length * lineHeight
    		};
    	}

    	return {
    		w: ctx.measureText(label).width,
    		h: lineHeight
    	};
    }

    function determineLimits(angle, pos, size, min, max) {
    	if (angle === min || angle === max) {
    		return {
    			start: pos - (size / 2),
    			end: pos + (size / 2)
    		};
    	} else if (angle < min || angle > max) {
    		return {
    			start: pos - size,
    			end: pos
    		};
    	}

    	return {
    		start: pos,
    		end: pos + size
    	};
    }

    /**
     * Helper function to fit a radial linear scale with point labels
     */
    function fitWithPointLabels(scale) {

    	// Right, this is really confusing and there is a lot of maths going on here
    	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
    	//
    	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
    	//
    	// Solution:
    	//
    	// We assume the radius of the polygon is half the size of the canvas at first
    	// at each index we check if the text overlaps.
    	//
    	// Where it does, we store that angle and that index.
    	//
    	// After finding the largest index and angle we calculate how much we need to remove
    	// from the shape radius to move the point inwards by that x.
    	//
    	// We average the left and right distances to get the maximum shape radius that can fit in the box
    	// along with labels.
    	//
    	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
    	// on each side, removing that from the size, halving it and adding the left x protrusion width.
    	//
    	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
    	// and position it in the most space efficient manner
    	//
    	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

    	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

    	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
    	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
    	var furthestLimits = {
    		l: 0,
    		r: scale.width,
    		t: 0,
    		b: scale.height - scale.paddingTop
    	};
    	var furthestAngles = {};
    	var i, textSize, pointPosition;

    	scale.ctx.font = plFont.string;
    	scale._pointLabelSizes = [];

    	var valueCount = scale.chart.data.labels.length;
    	for (i = 0; i < valueCount; i++) {
    		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
    		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
    		scale._pointLabelSizes[i] = textSize;

    		// Add quarter circle to make degree 0 mean top of circle
    		var angleRadians = scale.getIndexAngle(i);
    		var angle = helpers$1.toDegrees(angleRadians) % 360;
    		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

    		if (hLimits.start < furthestLimits.l) {
    			furthestLimits.l = hLimits.start;
    			furthestAngles.l = angleRadians;
    		}

    		if (hLimits.end > furthestLimits.r) {
    			furthestLimits.r = hLimits.end;
    			furthestAngles.r = angleRadians;
    		}

    		if (vLimits.start < furthestLimits.t) {
    			furthestLimits.t = vLimits.start;
    			furthestAngles.t = angleRadians;
    		}

    		if (vLimits.end > furthestLimits.b) {
    			furthestLimits.b = vLimits.end;
    			furthestAngles.b = angleRadians;
    		}
    	}

    	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
    }

    function getTextAlignForAngle(angle) {
    	if (angle === 0 || angle === 180) {
    		return 'center';
    	} else if (angle < 180) {
    		return 'left';
    	}

    	return 'right';
    }

    function fillText(ctx, text, position, lineHeight) {
    	var y = position.y + lineHeight / 2;
    	var i, ilen;

    	if (helpers$1.isArray(text)) {
    		for (i = 0, ilen = text.length; i < ilen; ++i) {
    			ctx.fillText(text[i], position.x, y);
    			y += lineHeight;
    		}
    	} else {
    		ctx.fillText(text, position.x, y);
    	}
    }

    function adjustPointPositionForLabelHeight(angle, textSize, position) {
    	if (angle === 90 || angle === 270) {
    		position.y -= (textSize.h / 2);
    	} else if (angle > 270 || angle < 90) {
    		position.y -= textSize.h;
    	}
    }

    function drawPointLabels(scale) {
    	var ctx = scale.ctx;
    	var opts = scale.options;
    	var pointLabelOpts = opts.pointLabels;
    	var tickBackdropHeight = getTickBackdropHeight(opts);
    	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
    	var plFont = helpers$1.options._parseFont(pointLabelOpts);

    	ctx.save();

    	ctx.font = plFont.string;
    	ctx.textBaseline = 'middle';

    	for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
    		// Extra pixels out for some label spacing
    		var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
    		var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

    		// Keep this in loop since we may support array properties here
    		var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
    		ctx.fillStyle = pointLabelFontColor;

    		var angleRadians = scale.getIndexAngle(i);
    		var angle = helpers$1.toDegrees(angleRadians);
    		ctx.textAlign = getTextAlignForAngle(angle);
    		adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
    		fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
    	}
    	ctx.restore();
    }

    function drawRadiusLine(scale, gridLineOpts, radius, index) {
    	var ctx = scale.ctx;
    	var circular = gridLineOpts.circular;
    	var valueCount = scale.chart.data.labels.length;
    	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
    	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
    	var pointPosition;

    	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
    		return;
    	}

    	ctx.save();
    	ctx.strokeStyle = lineColor;
    	ctx.lineWidth = lineWidth;
    	if (ctx.setLineDash) {
    		ctx.setLineDash(gridLineOpts.borderDash || []);
    		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
    	}

    	ctx.beginPath();
    	if (circular) {
    		// Draw circular arcs between the points
    		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
    	} else {
    		// Draw straight lines connecting each index
    		pointPosition = scale.getPointPosition(0, radius);
    		ctx.moveTo(pointPosition.x, pointPosition.y);

    		for (var i = 1; i < valueCount; i++) {
    			pointPosition = scale.getPointPosition(i, radius);
    			ctx.lineTo(pointPosition.x, pointPosition.y);
    		}
    	}
    	ctx.closePath();
    	ctx.stroke();
    	ctx.restore();
    }

    function numberOrZero(param) {
    	return helpers$1.isNumber(param) ? param : 0;
    }

    var scale_radialLinear = scale_linearbase.extend({
    	setDimensions: function() {
    		var me = this;

    		// Set the unconstrained dimension before label rotation
    		me.width = me.maxWidth;
    		me.height = me.maxHeight;
    		me.paddingTop = getTickBackdropHeight(me.options) / 2;
    		me.xCenter = Math.floor(me.width / 2);
    		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
    		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var chart = me.chart;
    		var min = Number.POSITIVE_INFINITY;
    		var max = Number.NEGATIVE_INFINITY;

    		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
    			if (chart.isDatasetVisible(datasetIndex)) {
    				var meta = chart.getDatasetMeta(datasetIndex);

    				helpers$1.each(dataset.data, function(rawValue, index) {
    					var value = +me.getRightValue(rawValue);
    					if (isNaN(value) || meta.data[index].hidden) {
    						return;
    					}

    					min = Math.min(value, min);
    					max = Math.max(value, max);
    				});
    			}
    		});

    		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
    		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

    		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
    		me.handleTickRangeOptions();
    	},

    	// Returns the maximum number of ticks based on the scale dimension
    	_computeTickLimit: function() {
    		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    	},

    	convertTicksToLabels: function() {
    		var me = this;

    		scale_linearbase.prototype.convertTicksToLabels.call(me);

    		// Point labels
    		me.pointLabels = me.chart.data.labels.map(function() {
    			var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
    			return label || label === 0 ? label : '';
    		});
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	fit: function() {
    		var me = this;
    		var opts = me.options;

    		if (opts.display && opts.pointLabels.display) {
    			fitWithPointLabels(me);
    		} else {
    			me.setCenterPoint(0, 0, 0, 0);
    		}
    	},

    	/**
    	 * Set radius reductions and determine new radius and center point
    	 * @private
    	 */
    	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
    		var me = this;
    		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
    		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
    		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
    		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

    		radiusReductionLeft = numberOrZero(radiusReductionLeft);
    		radiusReductionRight = numberOrZero(radiusReductionRight);
    		radiusReductionTop = numberOrZero(radiusReductionTop);
    		radiusReductionBottom = numberOrZero(radiusReductionBottom);

    		me.drawingArea = Math.min(
    			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
    			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
    		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
    	},

    	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
    		var me = this;
    		var maxRight = me.width - rightMovement - me.drawingArea;
    		var maxLeft = leftMovement + me.drawingArea;
    		var maxTop = topMovement + me.drawingArea;
    		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

    		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
    		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
    	},

    	getIndexAngle: function(index) {
    		var chart = this.chart;
    		var angleMultiplier = 360 / chart.data.labels.length;
    		var options = chart.options || {};
    		var startAngle = options.startAngle || 0;

    		// Start from the top instead of right, so remove a quarter of the circle
    		var angle = (index * angleMultiplier + startAngle) % 360;

    		return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
    	},

    	getDistanceFromCenterForValue: function(value) {
    		var me = this;

    		if (helpers$1.isNullOrUndef(value)) {
    			return NaN;
    		}

    		// Take into account half font size + the yPadding of the top value
    		var scalingFactor = me.drawingArea / (me.max - me.min);
    		if (me.options.ticks.reverse) {
    			return (me.max - value) * scalingFactor;
    		}
    		return (value - me.min) * scalingFactor;
    	},

    	getPointPosition: function(index, distanceFromCenter) {
    		var me = this;
    		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
    		return {
    			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
    			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
    		};
    	},

    	getPointPositionForValue: function(index, value) {
    		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    	},

    	getBasePosition: function(index) {
    		var me = this;
    		var min = me.min;
    		var max = me.max;

    		return me.getPointPositionForValue(index || 0,
    			me.beginAtZero ? 0 :
    			min < 0 && max < 0 ? max :
    			min > 0 && max > 0 ? min :
    			0);
    	},

    	/**
    	 * @private
    	 */
    	_drawGrid: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;
    		var gridLineOpts = opts.gridLines;
    		var angleLineOpts = opts.angleLines;
    		var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
    		var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
    		var i, offset, position;

    		if (opts.pointLabels.display) {
    			drawPointLabels(me);
    		}

    		if (gridLineOpts.display) {
    			helpers$1.each(me.ticks, function(label, index) {
    				if (index !== 0) {
    					offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
    					drawRadiusLine(me, gridLineOpts, offset, index);
    				}
    			});
    		}

    		if (angleLineOpts.display && lineWidth && lineColor) {
    			ctx.save();
    			ctx.lineWidth = lineWidth;
    			ctx.strokeStyle = lineColor;
    			if (ctx.setLineDash) {
    				ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
    				ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
    			}

    			for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
    				offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
    				position = me.getPointPosition(i, offset);
    				ctx.beginPath();
    				ctx.moveTo(me.xCenter, me.yCenter);
    				ctx.lineTo(position.x, position.y);
    				ctx.stroke();
    			}

    			ctx.restore();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawLabels: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		if (!tickOpts.display) {
    			return;
    		}

    		var startAngle = me.getIndexAngle(0);
    		var tickFont = helpers$1.options._parseFont(tickOpts);
    		var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
    		var offset, width;

    		ctx.save();
    		ctx.font = tickFont.string;
    		ctx.translate(me.xCenter, me.yCenter);
    		ctx.rotate(startAngle);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';

    		helpers$1.each(me.ticks, function(label, index) {
    			if (index === 0 && !tickOpts.reverse) {
    				return;
    			}

    			offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

    			if (tickOpts.showLabelBackdrop) {
    				width = ctx.measureText(label).width;
    				ctx.fillStyle = tickOpts.backdropColor;

    				ctx.fillRect(
    					-width / 2 - tickOpts.backdropPaddingX,
    					-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
    					width + tickOpts.backdropPaddingX * 2,
    					tickFont.size + tickOpts.backdropPaddingY * 2
    				);
    			}

    			ctx.fillStyle = tickFontColor;
    			ctx.fillText(label, 0, -offset);
    		});

    		ctx.restore();
    	},

    	/**
    	 * @private
    	 */
    	_drawTitle: helpers$1.noop
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$3 = defaultConfig$3;
    scale_radialLinear._defaults = _defaults$3;

    var deprecated$1 = helpers$1._deprecated;
    var resolve$5 = helpers$1.options.resolve;
    var valueOrDefault$d = helpers$1.valueOrDefault;

    // Integer constants are from the ES6 spec.
    var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
    var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

    var INTERVALS = {
    	millisecond: {
    		common: true,
    		size: 1,
    		steps: 1000
    	},
    	second: {
    		common: true,
    		size: 1000,
    		steps: 60
    	},
    	minute: {
    		common: true,
    		size: 60000,
    		steps: 60
    	},
    	hour: {
    		common: true,
    		size: 3600000,
    		steps: 24
    	},
    	day: {
    		common: true,
    		size: 86400000,
    		steps: 30
    	},
    	week: {
    		common: false,
    		size: 604800000,
    		steps: 4
    	},
    	month: {
    		common: true,
    		size: 2.628e9,
    		steps: 12
    	},
    	quarter: {
    		common: false,
    		size: 7.884e9,
    		steps: 4
    	},
    	year: {
    		common: true,
    		size: 3.154e10
    	}
    };

    var UNITS = Object.keys(INTERVALS);

    function sorter(a, b) {
    	return a - b;
    }

    function arrayUnique(items) {
    	var hash = {};
    	var out = [];
    	var i, ilen, item;

    	for (i = 0, ilen = items.length; i < ilen; ++i) {
    		item = items[i];
    		if (!hash[item]) {
    			hash[item] = true;
    			out.push(item);
    		}
    	}

    	return out;
    }

    function getMin(options) {
    	return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
    }

    function getMax(options) {
    	return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
    }

    /**
     * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
     * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
     * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
     * extremity (left + width or top + height). Note that it would be more optimized to directly
     * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
     * to create the lookup table. The table ALWAYS contains at least two items: min and max.
     *
     * @param {number[]} timestamps - timestamps sorted from lowest to highest.
     * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
     * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
     * If 'series', timestamps will be positioned at the same distance from each other. In this
     * case, only timestamps that break the time linearity are registered, meaning that in the
     * best case, all timestamps are linear, the table contains only min and max.
     */
    function buildLookupTable(timestamps, min, max, distribution) {
    	if (distribution === 'linear' || !timestamps.length) {
    		return [
    			{time: min, pos: 0},
    			{time: max, pos: 1}
    		];
    	}

    	var table = [];
    	var items = [min];
    	var i, ilen, prev, curr, next;

    	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    		curr = timestamps[i];
    		if (curr > min && curr < max) {
    			items.push(curr);
    		}
    	}

    	items.push(max);

    	for (i = 0, ilen = items.length; i < ilen; ++i) {
    		next = items[i + 1];
    		prev = items[i - 1];
    		curr = items[i];

    		// only add points that breaks the scale linearity
    		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
    			table.push({time: curr, pos: i / (ilen - 1)});
    		}
    	}

    	return table;
    }

    // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
    function lookup(table, key, value) {
    	var lo = 0;
    	var hi = table.length - 1;
    	var mid, i0, i1;

    	while (lo >= 0 && lo <= hi) {
    		mid = (lo + hi) >> 1;
    		i0 = table[mid - 1] || null;
    		i1 = table[mid];

    		if (!i0) {
    			// given value is outside table (before first item)
    			return {lo: null, hi: i1};
    		} else if (i1[key] < value) {
    			lo = mid + 1;
    		} else if (i0[key] > value) {
    			hi = mid - 1;
    		} else {
    			return {lo: i0, hi: i1};
    		}
    	}

    	// given value is outside table (after last item)
    	return {lo: i1, hi: null};
    }

    /**
     * Linearly interpolates the given source `value` using the table items `skey` values and
     * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
     * returns the position for a timestamp equal to 42. If value is out of bounds, values at
     * index [0, 1] or [n - 1, n] are used for the interpolation.
     */
    function interpolate$1(table, skey, sval, tkey) {
    	var range = lookup(table, skey, sval);

    	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
    	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
    	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

    	var span = next[skey] - prev[skey];
    	var ratio = span ? (sval - prev[skey]) / span : 0;
    	var offset = (next[tkey] - prev[tkey]) * ratio;

    	return prev[tkey] + offset;
    }

    function toTimestamp(scale, input) {
    	var adapter = scale._adapter;
    	var options = scale.options.time;
    	var parser = options.parser;
    	var format = parser || options.format;
    	var value = input;

    	if (typeof parser === 'function') {
    		value = parser(value);
    	}

    	// Only parse if its not a timestamp already
    	if (!helpers$1.isFinite(value)) {
    		value = typeof format === 'string'
    			? adapter.parse(value, format)
    			: adapter.parse(value);
    	}

    	if (value !== null) {
    		return +value;
    	}

    	// Labels are in an incompatible format and no `parser` has been provided.
    	// The user might still use the deprecated `format` option for parsing.
    	if (!parser && typeof format === 'function') {
    		value = format(input);

    		// `format` could return something else than a timestamp, if so, parse it
    		if (!helpers$1.isFinite(value)) {
    			value = adapter.parse(value);
    		}
    	}

    	return value;
    }

    function parse(scale, input) {
    	if (helpers$1.isNullOrUndef(input)) {
    		return null;
    	}

    	var options = scale.options.time;
    	var value = toTimestamp(scale, scale.getRightValue(input));
    	if (value === null) {
    		return value;
    	}

    	if (options.round) {
    		value = +scale._adapter.startOf(value, options.round);
    	}

    	return value;
    }

    /**
     * Figures out what unit results in an appropriate number of auto-generated ticks
     */
    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    	var ilen = UNITS.length;
    	var i, interval, factor;

    	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    		interval = INTERVALS[UNITS[i]];
    		factor = interval.steps ? interval.steps : MAX_INTEGER;

    		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
    			return UNITS[i];
    		}
    	}

    	return UNITS[ilen - 1];
    }

    /**
     * Figures out what unit to format a set of ticks with
     */
    function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    	var i, unit;

    	for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    		unit = UNITS[i];
    		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
    			return unit;
    		}
    	}

    	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }

    function determineMajorUnit(unit) {
    	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    		if (INTERVALS[UNITS[i]].common) {
    			return UNITS[i];
    		}
    	}
    }

    /**
     * Generates a maximum of `capacity` timestamps between min and max, rounded to the
     * `minor` unit using the given scale time `options`.
     * Important: this method can return ticks outside the min and max range, it's the
     * responsibility of the calling code to clamp values if needed.
     */
    function generate(scale, min, max, capacity) {
    	var adapter = scale._adapter;
    	var options = scale.options;
    	var timeOpts = options.time;
    	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
    	var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
    	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
    	var first = min;
    	var ticks = [];
    	var time;

    	// For 'week' unit, handle the first day of week option
    	if (weekday) {
    		first = +adapter.startOf(first, 'isoWeek', weekday);
    	}

    	// Align first ticks on unit
    	first = +adapter.startOf(first, weekday ? 'day' : minor);

    	// Prevent browser from freezing in case user options request millions of milliseconds
    	if (adapter.diff(max, min, minor) > 100000 * stepSize) {
    		throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
    	}

    	for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
    		ticks.push(time);
    	}

    	if (time === max || options.bounds === 'ticks') {
    		ticks.push(time);
    	}

    	return ticks;
    }

    /**
     * Returns the start and end offsets from edges in the form of {start, end}
     * where each value is a relative width to the scale and ranges between 0 and 1.
     * They add extra margins on the both sides by scaling down the original scale.
     * Offsets are added when the `offset` option is true.
     */
    function computeOffsets(table, ticks, min, max, options) {
    	var start = 0;
    	var end = 0;
    	var first, last;

    	if (options.offset && ticks.length) {
    		first = interpolate$1(table, 'time', ticks[0], 'pos');
    		if (ticks.length === 1) {
    			start = 1 - first;
    		} else {
    			start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
    		}
    		last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
    		if (ticks.length === 1) {
    			end = last;
    		} else {
    			end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
    		}
    	}

    	return {start: start, end: end, factor: 1 / (start + 1 + end)};
    }

    function setMajorTicks(scale, ticks, map, majorUnit) {
    	var adapter = scale._adapter;
    	var first = +adapter.startOf(ticks[0].value, majorUnit);
    	var last = ticks[ticks.length - 1].value;
    	var major, index;

    	for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    		index = map[major];
    		if (index >= 0) {
    			ticks[index].major = true;
    		}
    	}
    	return ticks;
    }

    function ticksFromTimestamps(scale, values, majorUnit) {
    	var ticks = [];
    	var map = {};
    	var ilen = values.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = values[i];
    		map[value] = i;

    		ticks.push({
    			value: value,
    			major: false
    		});
    	}

    	// We set the major ticks separately from the above loop because calling startOf for every tick
    	// is expensive when there is a large number of ticks
    	return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
    }

    var defaultConfig$4 = {
    	position: 'bottom',

    	/**
    	 * Data distribution along the scale:
    	 * - 'linear': data are spread according to their time (distances can vary),
    	 * - 'series': data are spread at the same distance from each other.
    	 * @see https://github.com/chartjs/Chart.js/pull/4507
    	 * @since 2.7.0
    	 */
    	distribution: 'linear',

    	/**
    	 * Scale boundary strategy (bypassed by min/max time options)
    	 * - `data`: make sure data are fully visible, ticks outside are removed
    	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
    	 * @see https://github.com/chartjs/Chart.js/pull/4556
    	 * @since 2.7.0
    	 */
    	bounds: 'data',

    	adapters: {},
    	time: {
    		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
    		unit: false, // false == automatic or override with week, month, year, etc.
    		round: false, // none, or override with week, month, year, etc.
    		displayFormat: false, // DEPRECATED
    		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
    		minUnit: 'millisecond',
    		displayFormats: {}
    	},
    	ticks: {
    		autoSkip: false,

    		/**
    		 * Ticks generation input values:
    		 * - 'auto': generates "optimal" ticks based on scale size and time options.
    		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
    		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
    		 * @see https://github.com/chartjs/Chart.js/pull/4507
    		 * @since 2.7.0
    		 */
    		source: 'auto',

    		major: {
    			enabled: false
    		}
    	}
    };

    var scale_time = core_scale.extend({
    	initialize: function() {
    		this.mergeTicksOptions();
    		core_scale.prototype.initialize.call(this);
    	},

    	update: function() {
    		var me = this;
    		var options = me.options;
    		var time = options.time || (options.time = {});
    		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

    		// DEPRECATIONS: output a message only one time per update
    		deprecated$1('time scale', time.format, 'time.format', 'time.parser');
    		deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
    		deprecated$1('time scale', time.max, 'time.max', 'ticks.max');

    		// Backward compatibility: before introducing adapter, `displayFormats` was
    		// supposed to contain *all* unit/string pairs but this can't be resolved
    		// when loading the scale (adapters are loaded afterward), so let's populate
    		// missing formats on update
    		helpers$1.mergeIf(time.displayFormats, adapter.formats());

    		return core_scale.prototype.update.apply(me, arguments);
    	},

    	/**
    	 * Allows data to be referenced via 't' attribute
    	 */
    	getRightValue: function(rawValue) {
    		if (rawValue && rawValue.t !== undefined) {
    			rawValue = rawValue.t;
    		}
    		return core_scale.prototype.getRightValue.call(this, rawValue);
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var chart = me.chart;
    		var adapter = me._adapter;
    		var options = me.options;
    		var unit = options.time.unit || 'day';
    		var min = MAX_INTEGER;
    		var max = MIN_INTEGER;
    		var timestamps = [];
    		var datasets = [];
    		var labels = [];
    		var i, j, ilen, jlen, data, timestamp, labelsAdded;
    		var dataLabels = me._getLabels();

    		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
    			labels.push(parse(me, dataLabels[i]));
    		}

    		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    			if (chart.isDatasetVisible(i)) {
    				data = chart.data.datasets[i].data;

    				// Let's consider that all data have the same format.
    				if (helpers$1.isObject(data[0])) {
    					datasets[i] = [];

    					for (j = 0, jlen = data.length; j < jlen; ++j) {
    						timestamp = parse(me, data[j]);
    						timestamps.push(timestamp);
    						datasets[i][j] = timestamp;
    					}
    				} else {
    					datasets[i] = labels.slice(0);
    					if (!labelsAdded) {
    						timestamps = timestamps.concat(labels);
    						labelsAdded = true;
    					}
    				}
    			} else {
    				datasets[i] = [];
    			}
    		}

    		if (labels.length) {
    			min = Math.min(min, labels[0]);
    			max = Math.max(max, labels[labels.length - 1]);
    		}

    		if (timestamps.length) {
    			timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
    			min = Math.min(min, timestamps[0]);
    			max = Math.max(max, timestamps[timestamps.length - 1]);
    		}

    		min = parse(me, getMin(options)) || min;
    		max = parse(me, getMax(options)) || max;

    		// In case there is no valid min/max, set limits based on unit time option
    		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
    		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

    		// Make sure that max is strictly higher than min (required by the lookup table)
    		me.min = Math.min(min, max);
    		me.max = Math.max(min + 1, max);

    		// PRIVATE
    		me._table = [];
    		me._timestamps = {
    			data: timestamps,
    			datasets: datasets,
    			labels: labels
    		};
    	},

    	buildTicks: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;
    		var options = me.options;
    		var tickOpts = options.ticks;
    		var timeOpts = options.time;
    		var timestamps = me._timestamps;
    		var ticks = [];
    		var capacity = me.getLabelCapacity(min);
    		var source = tickOpts.source;
    		var distribution = options.distribution;
    		var i, ilen, timestamp;

    		if (source === 'data' || (source === 'auto' && distribution === 'series')) {
    			timestamps = timestamps.data;
    		} else if (source === 'labels') {
    			timestamps = timestamps.labels;
    		} else {
    			timestamps = generate(me, min, max, capacity);
    		}

    		if (options.bounds === 'ticks' && timestamps.length) {
    			min = timestamps[0];
    			max = timestamps[timestamps.length - 1];
    		}

    		// Enforce limits with user min/max options
    		min = parse(me, getMin(options)) || min;
    		max = parse(me, getMax(options)) || max;

    		// Remove ticks outside the min/max range
    		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    			timestamp = timestamps[i];
    			if (timestamp >= min && timestamp <= max) {
    				ticks.push(timestamp);
    			}
    		}

    		me.min = min;
    		me.max = max;

    		// PRIVATE
    		// determineUnitForFormatting relies on the number of ticks so we don't use it when
    		// autoSkip is enabled because we don't yet know what the final number of ticks will be
    		me._unit = timeOpts.unit || (tickOpts.autoSkip
    			? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
    			: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
    		me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
    			: determineMajorUnit(me._unit);
    		me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
    		me._offsets = computeOffsets(me._table, ticks, min, max, options);

    		if (tickOpts.reverse) {
    			ticks.reverse();
    		}

    		return ticksFromTimestamps(me, ticks, me._majorUnit);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		var me = this;
    		var adapter = me._adapter;
    		var data = me.chart.data;
    		var timeOpts = me.options.time;
    		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
    		var value = data.datasets[datasetIndex].data[index];

    		if (helpers$1.isObject(value)) {
    			label = me.getRightValue(value);
    		}
    		if (timeOpts.tooltipFormat) {
    			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
    		}
    		if (typeof label === 'string') {
    			return label;
    		}
    		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
    	},

    	/**
    	 * Function to format an individual tick mark
    	 * @private
    	 */
    	tickFormatFunction: function(time, index, ticks, format) {
    		var me = this;
    		var adapter = me._adapter;
    		var options = me.options;
    		var formats = options.time.displayFormats;
    		var minorFormat = formats[me._unit];
    		var majorUnit = me._majorUnit;
    		var majorFormat = formats[majorUnit];
    		var tick = ticks[index];
    		var tickOpts = options.ticks;
    		var major = majorUnit && majorFormat && tick && tick.major;
    		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
    		var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
    		var formatter = resolve$5([
    			nestedTickOpts.callback,
    			nestedTickOpts.userCallback,
    			tickOpts.callback,
    			tickOpts.userCallback
    		]);

    		return formatter ? formatter(label, index, ticks) : label;
    	},

    	convertTicksToLabels: function(ticks) {
    		var labels = [];
    		var i, ilen;

    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
    		}

    		return labels;
    	},

    	/**
    	 * @private
    	 */
    	getPixelForOffset: function(time) {
    		var me = this;
    		var offsets = me._offsets;
    		var pos = interpolate$1(me._table, 'time', time, 'pos');
    		return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    	},

    	getPixelForValue: function(value, index, datasetIndex) {
    		var me = this;
    		var time = null;

    		if (index !== undefined && datasetIndex !== undefined) {
    			time = me._timestamps.datasets[datasetIndex][index];
    		}

    		if (time === null) {
    			time = parse(me, value);
    		}

    		if (time !== null) {
    			return me.getPixelForOffset(time);
    		}
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.getTicks();
    		return index >= 0 && index < ticks.length ?
    			this.getPixelForOffset(ticks[index].value) :
    			null;
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var offsets = me._offsets;
    		var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    		var time = interpolate$1(me._table, 'pos', pos, 'time');

    		// DEPRECATION, we should return time directly
    		return me._adapter._create(time);
    	},

    	/**
    	 * @private
    	 */
    	_getLabelSize: function(label) {
    		var me = this;
    		var ticksOpts = me.options.ticks;
    		var tickLabelWidth = me.ctx.measureText(label).width;
    		var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    		var cosRotation = Math.cos(angle);
    		var sinRotation = Math.sin(angle);
    		var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

    		return {
    			w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
    			h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
    		};
    	},

    	/**
    	 * Crude approximation of what the label width might be
    	 * @private
    	 */
    	getLabelWidth: function(label) {
    		return this._getLabelSize(label).w;
    	},

    	/**
    	 * @private
    	 */
    	getLabelCapacity: function(exampleTime) {
    		var me = this;
    		var timeOpts = me.options.time;
    		var displayFormats = timeOpts.displayFormats;

    		// pick the longest format (milliseconds) for guestimation
    		var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    		var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
    		var size = me._getLabelSize(exampleLabel);
    		var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

    		if (me.options.offset) {
    			capacity--;
    		}

    		return capacity > 0 ? capacity : 1;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$4 = defaultConfig$4;
    scale_time._defaults = _defaults$4;

    var scales = {
    	category: scale_category,
    	linear: scale_linear,
    	logarithmic: scale_logarithmic,
    	radialLinear: scale_radialLinear,
    	time: scale_time
    };

    var FORMATS = {
    	datetime: 'MMM D, YYYY, h:mm:ss a',
    	millisecond: 'h:mm:ss.SSS a',
    	second: 'h:mm:ss a',
    	minute: 'h:mm a',
    	hour: 'hA',
    	day: 'MMM D',
    	week: 'll',
    	month: 'MMM YYYY',
    	quarter: '[Q]Q - YYYY',
    	year: 'YYYY'
    };

    core_adapters._date.override(typeof moment === 'function' ? {
    	_id: 'moment', // DEBUG ONLY

    	formats: function() {
    		return FORMATS;
    	},

    	parse: function(value, format) {
    		if (typeof value === 'string' && typeof format === 'string') {
    			value = moment(value, format);
    		} else if (!(value instanceof moment)) {
    			value = moment(value);
    		}
    		return value.isValid() ? value.valueOf() : null;
    	},

    	format: function(time, format) {
    		return moment(time).format(format);
    	},

    	add: function(time, amount, unit) {
    		return moment(time).add(amount, unit).valueOf();
    	},

    	diff: function(max, min, unit) {
    		return moment(max).diff(moment(min), unit);
    	},

    	startOf: function(time, unit, weekday) {
    		time = moment(time);
    		if (unit === 'isoWeek') {
    			return time.isoWeekday(weekday).valueOf();
    		}
    		return time.startOf(unit).valueOf();
    	},

    	endOf: function(time, unit) {
    		return moment(time).endOf(unit).valueOf();
    	},

    	// DEPRECATIONS

    	/**
    	 * Provided for backward compatibility with scale.getValueForPixel().
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 * @private
    	 */
    	_create: function(time) {
    		return moment(time);
    	},
    } : {});

    core_defaults._set('global', {
    	plugins: {
    		filler: {
    			propagate: true
    		}
    	}
    });

    var mappers = {
    	dataset: function(source) {
    		var index = source.fill;
    		var chart = source.chart;
    		var meta = chart.getDatasetMeta(index);
    		var visible = meta && chart.isDatasetVisible(index);
    		var points = (visible && meta.dataset._children) || [];
    		var length = points.length || 0;

    		return !length ? null : function(point, i) {
    			return (i < length && points[i]._view) || null;
    		};
    	},

    	boundary: function(source) {
    		var boundary = source.boundary;
    		var x = boundary ? boundary.x : null;
    		var y = boundary ? boundary.y : null;

    		if (helpers$1.isArray(boundary)) {
    			return function(point, i) {
    				return boundary[i];
    			};
    		}

    		return function(point) {
    			return {
    				x: x === null ? point.x : x,
    				y: y === null ? point.y : y,
    			};
    		};
    	}
    };

    // @todo if (fill[0] === '#')
    function decodeFill(el, index, count) {
    	var model = el._model || {};
    	var fill = model.fill;
    	var target;

    	if (fill === undefined) {
    		fill = !!model.backgroundColor;
    	}

    	if (fill === false || fill === null) {
    		return false;
    	}

    	if (fill === true) {
    		return 'origin';
    	}

    	target = parseFloat(fill, 10);
    	if (isFinite(target) && Math.floor(target) === target) {
    		if (fill[0] === '-' || fill[0] === '+') {
    			target = index + target;
    		}

    		if (target === index || target < 0 || target >= count) {
    			return false;
    		}

    		return target;
    	}

    	switch (fill) {
    	// compatibility
    	case 'bottom':
    		return 'start';
    	case 'top':
    		return 'end';
    	case 'zero':
    		return 'origin';
    	// supported boundaries
    	case 'origin':
    	case 'start':
    	case 'end':
    		return fill;
    	// invalid fill values
    	default:
    		return false;
    	}
    }

    function computeLinearBoundary(source) {
    	var model = source.el._model || {};
    	var scale = source.el._scale || {};
    	var fill = source.fill;
    	var target = null;
    	var horizontal;

    	if (isFinite(fill)) {
    		return null;
    	}

    	// Backward compatibility: until v3, we still need to support boundary values set on
    	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
    	// controllers might still use it (e.g. the Smith chart).

    	if (fill === 'start') {
    		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
    	} else if (fill === 'end') {
    		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
    	} else if (model.scaleZero !== undefined) {
    		target = model.scaleZero;
    	} else if (scale.getBasePixel) {
    		target = scale.getBasePixel();
    	}

    	if (target !== undefined && target !== null) {
    		if (target.x !== undefined && target.y !== undefined) {
    			return target;
    		}

    		if (helpers$1.isFinite(target)) {
    			horizontal = scale.isHorizontal();
    			return {
    				x: horizontal ? target : null,
    				y: horizontal ? null : target
    			};
    		}
    	}

    	return null;
    }

    function computeCircularBoundary(source) {
    	var scale = source.el._scale;
    	var options = scale.options;
    	var length = scale.chart.data.labels.length;
    	var fill = source.fill;
    	var target = [];
    	var start, end, center, i, point;

    	if (!length) {
    		return null;
    	}

    	start = options.ticks.reverse ? scale.max : scale.min;
    	end = options.ticks.reverse ? scale.min : scale.max;
    	center = scale.getPointPositionForValue(0, start);
    	for (i = 0; i < length; ++i) {
    		point = fill === 'start' || fill === 'end'
    			? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
    			: scale.getBasePosition(i);
    		if (options.gridLines.circular) {
    			point.cx = center.x;
    			point.cy = center.y;
    			point.angle = scale.getIndexAngle(i) - Math.PI / 2;
    		}
    		target.push(point);
    	}
    	return target;
    }

    function computeBoundary(source) {
    	var scale = source.el._scale || {};

    	if (scale.getPointPositionForValue) {
    		return computeCircularBoundary(source);
    	}
    	return computeLinearBoundary(source);
    }

    function resolveTarget(sources, index, propagate) {
    	var source = sources[index];
    	var fill = source.fill;
    	var visited = [index];
    	var target;

    	if (!propagate) {
    		return fill;
    	}

    	while (fill !== false && visited.indexOf(fill) === -1) {
    		if (!isFinite(fill)) {
    			return fill;
    		}

    		target = sources[fill];
    		if (!target) {
    			return false;
    		}

    		if (target.visible) {
    			return fill;
    		}

    		visited.push(fill);
    		fill = target.fill;
    	}

    	return false;
    }

    function createMapper(source) {
    	var fill = source.fill;
    	var type = 'dataset';

    	if (fill === false) {
    		return null;
    	}

    	if (!isFinite(fill)) {
    		type = 'boundary';
    	}

    	return mappers[type](source);
    }

    function isDrawable(point) {
    	return point && !point.skip;
    }

    function drawArea(ctx, curve0, curve1, len0, len1) {
    	var i, cx, cy, r;

    	if (!len0 || !len1) {
    		return;
    	}

    	// building first area curve (normal)
    	ctx.moveTo(curve0[0].x, curve0[0].y);
    	for (i = 1; i < len0; ++i) {
    		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
    	}

    	if (curve1[0].angle !== undefined) {
    		cx = curve1[0].cx;
    		cy = curve1[0].cy;
    		r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
    		for (i = len1 - 1; i > 0; --i) {
    			ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
    		}
    		return;
    	}

    	// joining the two area curves
    	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

    	// building opposite area curve (reverse)
    	for (i = len1 - 1; i > 0; --i) {
    		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
    	}
    }

    function doFill(ctx, points, mapper, view, color, loop) {
    	var count = points.length;
    	var span = view.spanGaps;
    	var curve0 = [];
    	var curve1 = [];
    	var len0 = 0;
    	var len1 = 0;
    	var i, ilen, index, p0, p1, d0, d1, loopOffset;

    	ctx.beginPath();

    	for (i = 0, ilen = count; i < ilen; ++i) {
    		index = i % count;
    		p0 = points[index]._view;
    		p1 = mapper(p0, index, view);
    		d0 = isDrawable(p0);
    		d1 = isDrawable(p1);

    		if (loop && loopOffset === undefined && d0) {
    			loopOffset = i + 1;
    			ilen = count + loopOffset;
    		}

    		if (d0 && d1) {
    			len0 = curve0.push(p0);
    			len1 = curve1.push(p1);
    		} else if (len0 && len1) {
    			if (!span) {
    				drawArea(ctx, curve0, curve1, len0, len1);
    				len0 = len1 = 0;
    				curve0 = [];
    				curve1 = [];
    			} else {
    				if (d0) {
    					curve0.push(p0);
    				}
    				if (d1) {
    					curve1.push(p1);
    				}
    			}
    		}
    	}

    	drawArea(ctx, curve0, curve1, len0, len1);

    	ctx.closePath();
    	ctx.fillStyle = color;
    	ctx.fill();
    }

    var plugin_filler = {
    	id: 'filler',

    	afterDatasetsUpdate: function(chart, options) {
    		var count = (chart.data.datasets || []).length;
    		var propagate = options.propagate;
    		var sources = [];
    		var meta, i, el, source;

    		for (i = 0; i < count; ++i) {
    			meta = chart.getDatasetMeta(i);
    			el = meta.dataset;
    			source = null;

    			if (el && el._model && el instanceof elements.Line) {
    				source = {
    					visible: chart.isDatasetVisible(i),
    					fill: decodeFill(el, i, count),
    					chart: chart,
    					el: el
    				};
    			}

    			meta.$filler = source;
    			sources.push(source);
    		}

    		for (i = 0; i < count; ++i) {
    			source = sources[i];
    			if (!source) {
    				continue;
    			}

    			source.fill = resolveTarget(sources, i, propagate);
    			source.boundary = computeBoundary(source);
    			source.mapper = createMapper(source);
    		}
    	},

    	beforeDatasetsDraw: function(chart) {
    		var metasets = chart._getSortedVisibleDatasetMetas();
    		var ctx = chart.ctx;
    		var meta, i, el, view, points, mapper, color;

    		for (i = metasets.length - 1; i >= 0; --i) {
    			meta = metasets[i].$filler;

    			if (!meta || !meta.visible) {
    				continue;
    			}

    			el = meta.el;
    			view = el._view;
    			points = el._children || [];
    			mapper = meta.mapper;
    			color = view.backgroundColor || core_defaults.global.defaultColor;

    			if (mapper && color && points.length) {
    				helpers$1.canvas.clipArea(ctx, chart.chartArea);
    				doFill(ctx, points, mapper, view, color, el._loop);
    				helpers$1.canvas.unclipArea(ctx);
    			}
    		}
    	}
    };

    var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
    var noop$1 = helpers$1.noop;
    var valueOrDefault$e = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	legend: {
    		display: true,
    		position: 'top',
    		align: 'center',
    		fullWidth: true,
    		reverse: false,
    		weight: 1000,

    		// a callback that will handle
    		onClick: function(e, legendItem) {
    			var index = legendItem.datasetIndex;
    			var ci = this.chart;
    			var meta = ci.getDatasetMeta(index);

    			// See controller.isDatasetVisible comment
    			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

    			// We hid a dataset ... rerender the chart
    			ci.update();
    		},

    		onHover: null,
    		onLeave: null,

    		labels: {
    			boxWidth: 40,
    			padding: 10,
    			// Generates labels shown in the legend
    			// Valid properties to return:
    			// text : text to display
    			// fillStyle : fill of coloured box
    			// strokeStyle: stroke of coloured box
    			// hidden : if this legend item refers to a hidden item
    			// lineCap : cap style for line
    			// lineDash
    			// lineDashOffset :
    			// lineJoin :
    			// lineWidth :
    			generateLabels: function(chart) {
    				var datasets = chart.data.datasets;
    				var options = chart.options.legend || {};
    				var usePointStyle = options.labels && options.labels.usePointStyle;

    				return chart._getSortedDatasetMetas().map(function(meta) {
    					var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);

    					return {
    						text: datasets[meta.index].label,
    						fillStyle: style.backgroundColor,
    						hidden: !chart.isDatasetVisible(meta.index),
    						lineCap: style.borderCapStyle,
    						lineDash: style.borderDash,
    						lineDashOffset: style.borderDashOffset,
    						lineJoin: style.borderJoinStyle,
    						lineWidth: style.borderWidth,
    						strokeStyle: style.borderColor,
    						pointStyle: style.pointStyle,
    						rotation: style.rotation,

    						// Below is extra data used for toggling the datasets
    						datasetIndex: meta.index
    					};
    				}, this);
    			}
    		}
    	},

    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var datasets = chart.data.datasets;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');

    		for (i = 0, ilen = datasets.length; i < ilen; i++) {
    			listItem = list.appendChild(document.createElement('li'));
    			listItemSpan = listItem.appendChild(document.createElement('span'));
    			listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
    			if (datasets[i].label) {
    				listItem.appendChild(document.createTextNode(datasets[i].label));
    			}
    		}

    		return list.outerHTML;
    	}
    });

    /**
     * Helper function to get the box width based on the usePointStyle option
     * @param {object} labelopts - the label options on the legend
     * @param {number} fontSize - the label font size
     * @return {number} width of the color box area
     */
    function getBoxWidth(labelOpts, fontSize) {
    	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
    		fontSize :
    		labelOpts.boxWidth;
    }

    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */
    var Legend = core_element.extend({

    	initialize: function(config) {
    		var me = this;
    		helpers$1.extend(me, config);

    		// Contains hit boxes for each dataset (in dataset order)
    		me.legendHitBoxes = [];

    		/**
     		 * @private
     		 */
    		me._hoveredItem = null;

    		// Are we in doughnut mode which has a different data type
    		me.doughnutMode = false;
    	},

    	// These methods are ordered by lifecycle. Utilities then follow.
    	// Any function defined here is inherited by all legend types.
    	// Any function can be extended by the legend type

    	beforeUpdate: noop$1,
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = margins;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();
    		// Labels
    		me.beforeBuildLabels();
    		me.buildLabels();
    		me.afterBuildLabels();

    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;
    	},
    	afterUpdate: noop$1,

    	//

    	beforeSetDimensions: noop$1,
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;

    		// Reset minSize
    		me.minSize = {
    			width: 0,
    			height: 0
    		};
    	},
    	afterSetDimensions: noop$1,

    	//

    	beforeBuildLabels: noop$1,
    	buildLabels: function() {
    		var me = this;
    		var labelOpts = me.options.labels || {};
    		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

    		if (labelOpts.filter) {
    			legendItems = legendItems.filter(function(item) {
    				return labelOpts.filter(item, me.chart.data);
    			});
    		}

    		if (me.options.reverse) {
    			legendItems.reverse();
    		}

    		me.legendItems = legendItems;
    	},
    	afterBuildLabels: noop$1,

    	//

    	beforeFit: noop$1,
    	fit: function() {
    		var me = this;
    		var opts = me.options;
    		var labelOpts = opts.labels;
    		var display = opts.display;

    		var ctx = me.ctx;

    		var labelFont = helpers$1.options._parseFont(labelOpts);
    		var fontSize = labelFont.size;

    		// Reset hit boxes
    		var hitboxes = me.legendHitBoxes = [];

    		var minSize = me.minSize;
    		var isHorizontal = me.isHorizontal();

    		if (isHorizontal) {
    			minSize.width = me.maxWidth; // fill all the width
    			minSize.height = display ? 10 : 0;
    		} else {
    			minSize.width = display ? 10 : 0;
    			minSize.height = me.maxHeight; // fill all the height
    		}

    		// Increase sizes here
    		if (!display) {
    			me.width = minSize.width = me.height = minSize.height = 0;
    			return;
    		}
    		ctx.font = labelFont.string;

    		if (isHorizontal) {
    			// Labels

    			// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
    			var lineWidths = me.lineWidths = [0];
    			var totalHeight = 0;

    			ctx.textAlign = 'left';
    			ctx.textBaseline = 'middle';

    			helpers$1.each(me.legendItems, function(legendItem, i) {
    				var boxWidth = getBoxWidth(labelOpts, fontSize);
    				var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

    				if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
    					totalHeight += fontSize + labelOpts.padding;
    					lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
    				}

    				// Store the hitbox width and height here. Final position will be updated in `draw`
    				hitboxes[i] = {
    					left: 0,
    					top: 0,
    					width: width,
    					height: fontSize
    				};

    				lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
    			});

    			minSize.height += totalHeight;

    		} else {
    			var vPadding = labelOpts.padding;
    			var columnWidths = me.columnWidths = [];
    			var columnHeights = me.columnHeights = [];
    			var totalWidth = labelOpts.padding;
    			var currentColWidth = 0;
    			var currentColHeight = 0;

    			helpers$1.each(me.legendItems, function(legendItem, i) {
    				var boxWidth = getBoxWidth(labelOpts, fontSize);
    				var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

    				// If too tall, go to new column
    				if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
    					totalWidth += currentColWidth + labelOpts.padding;
    					columnWidths.push(currentColWidth); // previous column width
    					columnHeights.push(currentColHeight);
    					currentColWidth = 0;
    					currentColHeight = 0;
    				}

    				// Get max width
    				currentColWidth = Math.max(currentColWidth, itemWidth);
    				currentColHeight += fontSize + vPadding;

    				// Store the hitbox width and height here. Final position will be updated in `draw`
    				hitboxes[i] = {
    					left: 0,
    					top: 0,
    					width: itemWidth,
    					height: fontSize
    				};
    			});

    			totalWidth += currentColWidth;
    			columnWidths.push(currentColWidth);
    			columnHeights.push(currentColHeight);
    			minSize.width += totalWidth;
    		}

    		me.width = minSize.width;
    		me.height = minSize.height;
    	},
    	afterFit: noop$1,

    	// Shared Methods
    	isHorizontal: function() {
    		return this.options.position === 'top' || this.options.position === 'bottom';
    	},

    	// Actually draw the legend on the canvas
    	draw: function() {
    		var me = this;
    		var opts = me.options;
    		var labelOpts = opts.labels;
    		var globalDefaults = core_defaults.global;
    		var defaultColor = globalDefaults.defaultColor;
    		var lineDefault = globalDefaults.elements.line;
    		var legendHeight = me.height;
    		var columnHeights = me.columnHeights;
    		var legendWidth = me.width;
    		var lineWidths = me.lineWidths;

    		if (!opts.display) {
    			return;
    		}

    		var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
    		var ctx = me.ctx;
    		var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
    		var labelFont = helpers$1.options._parseFont(labelOpts);
    		var fontSize = labelFont.size;
    		var cursor;

    		// Canvas setup
    		ctx.textAlign = rtlHelper.textAlign('left');
    		ctx.textBaseline = 'middle';
    		ctx.lineWidth = 0.5;
    		ctx.strokeStyle = fontColor; // for strikethrough effect
    		ctx.fillStyle = fontColor; // render in correct colour
    		ctx.font = labelFont.string;

    		var boxWidth = getBoxWidth(labelOpts, fontSize);
    		var hitboxes = me.legendHitBoxes;

    		// current position
    		var drawLegendBox = function(x, y, legendItem) {
    			if (isNaN(boxWidth) || boxWidth <= 0) {
    				return;
    			}

    			// Set the ctx for the box
    			ctx.save();

    			var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
    			ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
    			ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
    			ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
    			ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
    			ctx.lineWidth = lineWidth;
    			ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

    			if (ctx.setLineDash) {
    				// IE 9 and 10 do not support line dash
    				ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
    			}

    			if (labelOpts && labelOpts.usePointStyle) {
    				// Recalculate x and y for drawPoint() because its expecting
    				// x and y to be center of figure (instead of top left)
    				var radius = boxWidth * Math.SQRT2 / 2;
    				var centerX = rtlHelper.xPlus(x, boxWidth / 2);
    				var centerY = y + fontSize / 2;

    				// Draw pointStyle as legend symbol
    				helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
    			} else {
    				// Draw box as legend symbol
    				ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
    				if (lineWidth !== 0) {
    					ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
    				}
    			}

    			ctx.restore();
    		};

    		var fillText = function(x, y, legendItem, textWidth) {
    			var halfFontSize = fontSize / 2;
    			var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
    			var yMiddle = y + halfFontSize;

    			ctx.fillText(legendItem.text, xLeft, yMiddle);

    			if (legendItem.hidden) {
    				// Strikethrough the text if hidden
    				ctx.beginPath();
    				ctx.lineWidth = 2;
    				ctx.moveTo(xLeft, yMiddle);
    				ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
    				ctx.stroke();
    			}
    		};

    		var alignmentOffset = function(dimension, blockSize) {
    			switch (opts.align) {
    			case 'start':
    				return labelOpts.padding;
    			case 'end':
    				return dimension - blockSize;
    			default: // center
    				return (dimension - blockSize + labelOpts.padding) / 2;
    			}
    		};

    		// Horizontal
    		var isHorizontal = me.isHorizontal();
    		if (isHorizontal) {
    			cursor = {
    				x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
    				y: me.top + labelOpts.padding,
    				line: 0
    			};
    		} else {
    			cursor = {
    				x: me.left + labelOpts.padding,
    				y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
    				line: 0
    			};
    		}

    		helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);

    		var itemHeight = fontSize + labelOpts.padding;
    		helpers$1.each(me.legendItems, function(legendItem, i) {
    			var textWidth = ctx.measureText(legendItem.text).width;
    			var width = boxWidth + (fontSize / 2) + textWidth;
    			var x = cursor.x;
    			var y = cursor.y;

    			rtlHelper.setWidth(me.minSize.width);

    			// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
    			// instead of me.right and me.bottom because me.width and me.height
    			// may have been changed since me.minSize was calculated
    			if (isHorizontal) {
    				if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
    					y = cursor.y += itemHeight;
    					cursor.line++;
    					x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
    				}
    			} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
    				x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
    				cursor.line++;
    				y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
    			}

    			var realX = rtlHelper.x(x);

    			drawLegendBox(realX, y, legendItem);

    			hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
    			hitboxes[i].top = y;

    			// Fill the actual label
    			fillText(realX, y, legendItem, textWidth);

    			if (isHorizontal) {
    				cursor.x += width + labelOpts.padding;
    			} else {
    				cursor.y += itemHeight;
    			}
    		});

    		helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
    	},

    	/**
    	 * @private
    	 */
    	_getLegendItemAt: function(x, y) {
    		var me = this;
    		var i, hitBox, lh;

    		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
    			// See if we are touching one of the dataset boxes
    			lh = me.legendHitBoxes;
    			for (i = 0; i < lh.length; ++i) {
    				hitBox = lh[i];

    				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
    					// Touching an element
    					return me.legendItems[i];
    				}
    			}
    		}

    		return null;
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event - The event to handle
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var opts = me.options;
    		var type = e.type === 'mouseup' ? 'click' : e.type;
    		var hoveredItem;

    		if (type === 'mousemove') {
    			if (!opts.onHover && !opts.onLeave) {
    				return;
    			}
    		} else if (type === 'click') {
    			if (!opts.onClick) {
    				return;
    			}
    		} else {
    			return;
    		}

    		// Chart event already has relative position in it
    		hoveredItem = me._getLegendItemAt(e.x, e.y);

    		if (type === 'click') {
    			if (hoveredItem && opts.onClick) {
    				// use e.native for backwards compatibility
    				opts.onClick.call(me, e.native, hoveredItem);
    			}
    		} else {
    			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
    				if (me._hoveredItem) {
    					opts.onLeave.call(me, e.native, me._hoveredItem);
    				}
    				me._hoveredItem = hoveredItem;
    			}

    			if (opts.onHover && hoveredItem) {
    				// use e.native for backwards compatibility
    				opts.onHover.call(me, e.native, hoveredItem);
    			}
    		}
    	}
    });

    function createNewLegendAndAttach(chart, legendOpts) {
    	var legend = new Legend({
    		ctx: chart.ctx,
    		options: legendOpts,
    		chart: chart
    	});

    	core_layouts.configure(chart, legend, legendOpts);
    	core_layouts.addBox(chart, legend);
    	chart.legend = legend;
    }

    var plugin_legend = {
    	id: 'legend',

    	/**
    	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
    	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
    	 * the plugin, which one will be re-exposed in the chart.js file.
    	 * https://github.com/chartjs/Chart.js/pull/2640
    	 * @private
    	 */
    	_element: Legend,

    	beforeInit: function(chart) {
    		var legendOpts = chart.options.legend;

    		if (legendOpts) {
    			createNewLegendAndAttach(chart, legendOpts);
    		}
    	},

    	beforeUpdate: function(chart) {
    		var legendOpts = chart.options.legend;
    		var legend = chart.legend;

    		if (legendOpts) {
    			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

    			if (legend) {
    				core_layouts.configure(chart, legend, legendOpts);
    				legend.options = legendOpts;
    			} else {
    				createNewLegendAndAttach(chart, legendOpts);
    			}
    		} else if (legend) {
    			core_layouts.removeBox(chart, legend);
    			delete chart.legend;
    		}
    	},

    	afterEvent: function(chart, e) {
    		var legend = chart.legend;
    		if (legend) {
    			legend.handleEvent(e);
    		}
    	}
    };

    var noop$2 = helpers$1.noop;

    core_defaults._set('global', {
    	title: {
    		display: false,
    		fontStyle: 'bold',
    		fullWidth: true,
    		padding: 10,
    		position: 'top',
    		text: '',
    		weight: 2000         // by default greater than legend (1000) to be above
    	}
    });

    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */
    var Title = core_element.extend({
    	initialize: function(config) {
    		var me = this;
    		helpers$1.extend(me, config);

    		// Contains hit boxes for each dataset (in dataset order)
    		me.legendHitBoxes = [];
    	},

    	// These methods are ordered by lifecycle. Utilities then follow.

    	beforeUpdate: noop$2,
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = margins;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();
    		// Labels
    		me.beforeBuildLabels();
    		me.buildLabels();
    		me.afterBuildLabels();

    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;

    	},
    	afterUpdate: noop$2,

    	//

    	beforeSetDimensions: noop$2,
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;

    		// Reset minSize
    		me.minSize = {
    			width: 0,
    			height: 0
    		};
    	},
    	afterSetDimensions: noop$2,

    	//

    	beforeBuildLabels: noop$2,
    	buildLabels: noop$2,
    	afterBuildLabels: noop$2,

    	//

    	beforeFit: noop$2,
    	fit: function() {
    		var me = this;
    		var opts = me.options;
    		var minSize = me.minSize = {};
    		var isHorizontal = me.isHorizontal();
    		var lineCount, textSize;

    		if (!opts.display) {
    			me.width = minSize.width = me.height = minSize.height = 0;
    			return;
    		}

    		lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
    		textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;

    		me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
    		me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
    	},
    	afterFit: noop$2,

    	// Shared Methods
    	isHorizontal: function() {
    		var pos = this.options.position;
    		return pos === 'top' || pos === 'bottom';
    	},

    	// Actually draw the title block on the canvas
    	draw: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;

    		if (!opts.display) {
    			return;
    		}

    		var fontOpts = helpers$1.options._parseFont(opts);
    		var lineHeight = fontOpts.lineHeight;
    		var offset = lineHeight / 2 + opts.padding;
    		var rotation = 0;
    		var top = me.top;
    		var left = me.left;
    		var bottom = me.bottom;
    		var right = me.right;
    		var maxWidth, titleX, titleY;

    		ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
    		ctx.font = fontOpts.string;

    		// Horizontal
    		if (me.isHorizontal()) {
    			titleX = left + ((right - left) / 2); // midpoint of the width
    			titleY = top + offset;
    			maxWidth = right - left;
    		} else {
    			titleX = opts.position === 'left' ? left + offset : right - offset;
    			titleY = top + ((bottom - top) / 2);
    			maxWidth = bottom - top;
    			rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
    		}

    		ctx.save();
    		ctx.translate(titleX, titleY);
    		ctx.rotate(rotation);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';

    		var text = opts.text;
    		if (helpers$1.isArray(text)) {
    			var y = 0;
    			for (var i = 0; i < text.length; ++i) {
    				ctx.fillText(text[i], 0, y, maxWidth);
    				y += lineHeight;
    			}
    		} else {
    			ctx.fillText(text, 0, 0, maxWidth);
    		}

    		ctx.restore();
    	}
    });

    function createNewTitleBlockAndAttach(chart, titleOpts) {
    	var title = new Title({
    		ctx: chart.ctx,
    		options: titleOpts,
    		chart: chart
    	});

    	core_layouts.configure(chart, title, titleOpts);
    	core_layouts.addBox(chart, title);
    	chart.titleBlock = title;
    }

    var plugin_title = {
    	id: 'title',

    	/**
    	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
    	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
    	 * the plugin, which one will be re-exposed in the chart.js file.
    	 * https://github.com/chartjs/Chart.js/pull/2640
    	 * @private
    	 */
    	_element: Title,

    	beforeInit: function(chart) {
    		var titleOpts = chart.options.title;

    		if (titleOpts) {
    			createNewTitleBlockAndAttach(chart, titleOpts);
    		}
    	},

    	beforeUpdate: function(chart) {
    		var titleOpts = chart.options.title;
    		var titleBlock = chart.titleBlock;

    		if (titleOpts) {
    			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

    			if (titleBlock) {
    				core_layouts.configure(chart, titleBlock, titleOpts);
    				titleBlock.options = titleOpts;
    			} else {
    				createNewTitleBlockAndAttach(chart, titleOpts);
    			}
    		} else if (titleBlock) {
    			core_layouts.removeBox(chart, titleBlock);
    			delete chart.titleBlock;
    		}
    	}
    };

    var plugins = {};
    var filler = plugin_filler;
    var legend = plugin_legend;
    var title = plugin_title;
    plugins.filler = filler;
    plugins.legend = legend;
    plugins.title = title;

    /**
     * @namespace Chart
     */


    core_controller.helpers = helpers$1;

    // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
    core_helpers();

    core_controller._adapters = core_adapters;
    core_controller.Animation = core_animation;
    core_controller.animationService = core_animations;
    core_controller.controllers = controllers;
    core_controller.DatasetController = core_datasetController;
    core_controller.defaults = core_defaults;
    core_controller.Element = core_element;
    core_controller.elements = elements;
    core_controller.Interaction = core_interaction;
    core_controller.layouts = core_layouts;
    core_controller.platform = platform;
    core_controller.plugins = core_plugins;
    core_controller.Scale = core_scale;
    core_controller.scaleService = core_scaleService;
    core_controller.Ticks = core_ticks;
    core_controller.Tooltip = core_tooltip;

    // Register built-in scales

    core_controller.helpers.each(scales, function(scale, type) {
    	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
    });

    // Load to register built-in adapters (as side effects)


    // Loading built-in plugins

    for (var k in plugins) {
    	if (plugins.hasOwnProperty(k)) {
    		core_controller.plugins.register(plugins[k]);
    	}
    }

    core_controller.platform.initialize();

    var src = core_controller;
    if (typeof window !== 'undefined') {
    	window.Chart = core_controller;
    }

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Chart
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    core_controller.Chart = core_controller;

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Legend
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.Legend = plugins.legend._element;

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Title
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.Title = plugins.title._element;

    /**
     * Provided for backward compatibility, use Chart.plugins instead
     * @namespace Chart.pluginService
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.pluginService = core_controller.plugins;

    /**
     * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
     * effect, instead simply create/register plugins via plain JavaScript objects.
     * @interface Chart.PluginBase
     * @deprecated since version 2.5.0
     * @todo remove at version 3
     * @private
     */
    core_controller.PluginBase = core_controller.Element.extend({});

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas instead.
     * @namespace Chart.canvasHelpers
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    core_controller.canvasHelpers = core_controller.helpers.canvas;

    /**
     * Provided for backward compatibility, use Chart.layouts instead.
     * @namespace Chart.layoutService
     * @deprecated since version 2.7.3
     * @todo remove at version 3
     * @private
     */
    core_controller.layoutService = core_controller.layouts;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.LinearScaleBase
     * @deprecated since version 2.8
     * @todo remove at version 3
     * @private
     */
    core_controller.LinearScaleBase = scale_linearbase;

    /**
     * Provided for backward compatibility, instead we should create a new Chart
     * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     */
    core_controller.helpers.each(
    	[
    		'Bar',
    		'Bubble',
    		'Doughnut',
    		'Line',
    		'PolarArea',
    		'Radar',
    		'Scatter'
    	],
    	function(klass) {
    		core_controller[klass] = function(ctx, cfg) {
    			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
    				type: klass.charAt(0).toLowerCase() + klass.slice(1)
    			}));
    		};
    	}
    );

    return src;

    })));
    });

    /* src\views\Statistic.svelte generated by Svelte v3.48.0 */
    const file$3 = "src\\views\\Statistic.svelte";

    // (92:4) {#if loading}
    function create_if_block$1(ctx) {
    	let div;
    	let span;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			span.textContent = "Loading...";
    			attr_dev(span, "class", "text-xl");
    			add_location(span, file$3, 93, 12, 3858);
    			attr_dev(div, "class", "text-center");
    			add_location(div, file$3, 92, 8, 3819);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(92:4) {#if loading}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div1;
    	let div0;
    	let input;
    	let t0;
    	let t1;
    	let canvas0;
    	let t2;
    	let canvas1;
    	let mounted;
    	let dispose;
    	let if_block = /*loading*/ ctx[3] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			input = element("input");
    			t0 = space();
    			if (if_block) if_block.c();
    			t1 = space();
    			canvas0 = element("canvas");
    			t2 = space();
    			canvas1 = element("canvas");
    			attr_dev(input, "class", "input input-bordered text-center");
    			attr_dev(input, "type", "number");
    			add_location(input, file$3, 89, 8, 3667);
    			attr_dev(div0, "class", "form-control p-4");
    			add_location(div0, file$3, 88, 4, 3627);
    			attr_dev(canvas0, "id", "radarCurrenciesCanvas");
    			attr_dev(canvas0, "class", "pt-4 pb-8 max-w-7xl");
    			add_location(canvas0, file$3, 97, 4, 3932);
    			attr_dev(canvas1, "id", "TransactionsChart");
    			attr_dev(canvas1, "class", "pt-4 pb-8 max-w-7xl");
    			add_location(canvas1, file$3, 99, 4, 4046);
    			attr_dev(div1, "class", "center_content");
    			add_location(div1, file$3, 87, 0, 3593);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, input);
    			set_input_value(input, /*selectedYear*/ ctx[0]);
    			append_dev(div1, t0);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t1);
    			append_dev(div1, canvas0);
    			/*canvas0_binding*/ ctx[7](canvas0);
    			append_dev(div1, t2);
    			append_dev(div1, canvas1);
    			/*canvas1_binding*/ ctx[8](canvas1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input, "input", /*input_input_handler*/ ctx[6]),
    					listen_dev(input, "blur", /*UpdateCharts*/ ctx[4], false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*selectedYear*/ 1 && to_number(input.value) !== /*selectedYear*/ ctx[0]) {
    				set_input_value(input, /*selectedYear*/ ctx[0]);
    			}

    			if (/*loading*/ ctx[3]) {
    				if (if_block) ; else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div1, t1);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			/*canvas0_binding*/ ctx[7](null);
    			/*canvas1_binding*/ ctx[8](null);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Statistic', slots, []);

    	const rgbaFromHEX = (hex, alpha = 1) => {
    		const [r, g, b] = hex.match(/\w\w/g).map(x => parseInt(x, 16));
    		return `rgba(${r},${g},${b},${alpha})`;
    	};

    	const updateUsedCurrencies = transactionsArray => {
    		usedCurrencies = [];

    		transactionsArray.forEach(t => {
    			if (!usedCurrencies.includes(t.balance.currency)) {
    				usedCurrencies.push(t.balance.currency);
    			}
    		});
    	};

    	const UpdateCharts = async () => {
    		let transactionsYearSorted = transactions.filter(transaction => new Date(transaction.date).toString().includes(selectedYear));
    		updateUsedCurrencies(transactionsYearSorted);

    		new Chart(chartTransactionsCanvas.getContext('2d'),
    		{
    				type: 'line',
    				data: {
    					labels: months,
    					datasets: categories.map(category => {
    						return {
    							label: category.name,
    							backgroundColor: rgbaFromHEX(category.color, 0.2),
    							borderColor: category.color,
    							data: months.map(month => transactionsYearSorted.filter(transaction => transaction.transactionDescriptionCategory.id === category.id && new Date(transaction.date).toString().includes(month)).length)
    						};
    					})
    				}
    			});

    		new Chart(radarCurrenciesCanvas.getContext('2d'),
    		{
    				type: 'radar',
    				data: {
    					labels: categories.map(category => category.name),
    					datasets: usedCurrencies.map(currency => {
    						let CurrencyColor = '#' + (Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');

    						return {
    							label: currency,
    							backgroundColor: rgbaFromHEX(CurrencyColor, 0.2),
    							borderColor: CurrencyColor,
    							data: categories.map(category => transactionsYearSorted.filter(transaction => transaction.transactionDescriptionCategory.id === category.id && transaction.balance.currency === currency).length)
    						};
    					})
    				}
    			});
    	};

    	onMount(async () => {
    		$$invalidate(3, loading = true);

    		try {
    			transactions = (await Request$1.transaction.getList({ BudgetID: params.budgetID })).data;
    			categories = (await Request$1.category.getList({ BudgetID: params.budgetID })).data;
    		} catch(err) {
    			ErrorWrapper(err);
    		}

    		await UpdateCharts();
    		$$invalidate(3, loading = false);
    	});

    	let { params = {} } = $$props;
    	let selectedYear = 2022;

    	let months = [
    		"Jan",
    		"Feb",
    		"Mar",
    		"Apr",
    		"May",
    		"Jun",
    		"Jul",
    		"Aug",
    		"Sep",
    		"Oct",
    		"Nov",
    		"Dec"
    	];

    	let chartTransactionsCanvas;
    	let radarCurrenciesCanvas;
    	let loading = false;
    	let usedCurrencies = [];
    	let categories = [];
    	let transactions = [];
    	const writable_props = ['params'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Statistic> was created with unknown prop '${key}'`);
    	});

    	function input_input_handler() {
    		selectedYear = to_number(this.value);
    		$$invalidate(0, selectedYear);
    	}

    	function canvas0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			radarCurrenciesCanvas = $$value;
    			$$invalidate(2, radarCurrenciesCanvas);
    		});
    	}

    	function canvas1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			chartTransactionsCanvas = $$value;
    			$$invalidate(1, chartTransactionsCanvas);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('params' in $$props) $$invalidate(5, params = $$props.params);
    	};

    	$$self.$capture_state = () => ({
    		chartjs: Chart,
    		onMount,
    		Request: Request$1,
    		ErrorWrapper,
    		rgbaFromHEX,
    		updateUsedCurrencies,
    		UpdateCharts,
    		params,
    		selectedYear,
    		months,
    		chartTransactionsCanvas,
    		radarCurrenciesCanvas,
    		loading,
    		usedCurrencies,
    		categories,
    		transactions
    	});

    	$$self.$inject_state = $$props => {
    		if ('params' in $$props) $$invalidate(5, params = $$props.params);
    		if ('selectedYear' in $$props) $$invalidate(0, selectedYear = $$props.selectedYear);
    		if ('months' in $$props) months = $$props.months;
    		if ('chartTransactionsCanvas' in $$props) $$invalidate(1, chartTransactionsCanvas = $$props.chartTransactionsCanvas);
    		if ('radarCurrenciesCanvas' in $$props) $$invalidate(2, radarCurrenciesCanvas = $$props.radarCurrenciesCanvas);
    		if ('loading' in $$props) $$invalidate(3, loading = $$props.loading);
    		if ('usedCurrencies' in $$props) usedCurrencies = $$props.usedCurrencies;
    		if ('categories' in $$props) categories = $$props.categories;
    		if ('transactions' in $$props) transactions = $$props.transactions;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		selectedYear,
    		chartTransactionsCanvas,
    		radarCurrenciesCanvas,
    		loading,
    		UpdateCharts,
    		params,
    		input_input_handler,
    		canvas0_binding,
    		canvas1_binding
    	];
    }

    class Statistic extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { params: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Statistic",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get params() {
    		throw new Error("<Statistic>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Statistic>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    var routes = {
        "/budget/:budgetID/statistic": Statistic,
        "/budget/:budgetID/planned": PlannedBudget,
        "/budget/:budgetID/category": BudgetCategories,
        "/budget/:budgetID": BudgetTransactions,
        "/": Root,
        "/profile": Profile,
        "*": NotFound,
    };

    /* src\components\layout\Header.svelte generated by Svelte v3.48.0 */
    const file$2 = "src\\components\\layout\\Header.svelte";

    function create_fragment$2(ctx) {
    	let div4;
    	let div1;
    	let div0;
    	let label;
    	let svg0;
    	let path0;
    	let t0;
    	let ul;
    	let li0;
    	let a0;
    	let t2;
    	let li1;
    	let a1;
    	let t4;
    	let div2;
    	let a2;
    	let t6;
    	let div3;
    	let a3;
    	let svg1;
    	let path1;
    	let t7;
    	let a4;
    	let svg2;
    	let path2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			label = element("label");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t0 = space();
    			ul = element("ul");
    			li0 = element("li");
    			a0 = element("a");
    			a0.textContent = "Profile";
    			t2 = space();
    			li1 = element("li");
    			a1 = element("a");
    			a1.textContent = "Logout";
    			t4 = space();
    			div2 = element("div");
    			a2 = element("a");
    			a2.textContent = "BudgetFrog";
    			t6 = space();
    			div3 = element("div");
    			a3 = element("a");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t7 = space();
    			a4 = element("a");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			attr_dev(path0, "stroke-width", "2");
    			attr_dev(path0, "d", "M4 6h16M4 12h16M4 18h7");
    			add_location(path0, file$2, 22, 20, 667);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "class", "h-5 w-5");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "stroke", "currentColor");
    			add_location(svg0, file$2, 20, 16, 513);
    			attr_dev(label, "tabindex", "0");
    			attr_dev(label, "class", "btn btn-ghost btn-circle");
    			add_location(label, file$2, 19, 12, 442);
    			attr_dev(a0, "href", "/#/profile");
    			add_location(a0, file$2, 26, 20, 952);
    			add_location(li0, file$2, 26, 16, 948);
    			attr_dev(a1, "href", "/#/");
    			add_location(a1, file$2, 27, 20, 1011);
    			add_location(li1, file$2, 27, 16, 1007);
    			attr_dev(ul, "tabindex", "0");
    			attr_dev(ul, "class", "menu menu-compact dropdown-content mt-3 p-2 shadow bg-base-100 rounded-box w-52");
    			add_location(ul, file$2, 25, 12, 825);
    			attr_dev(div0, "class", "dropdown");
    			add_location(div0, file$2, 18, 8, 406);
    			attr_dev(div1, "class", "navbar-start");
    			add_location(div1, file$2, 17, 4, 370);
    			attr_dev(a2, "href", "/#/");
    			attr_dev(a2, "class", "btn btn-ghost normal-case text-xl");
    			add_location(a2, file$2, 32, 8, 1148);
    			attr_dev(div2, "class", "navbar-center");
    			add_location(div2, file$2, 31, 4, 1111);
    			attr_dev(path1, "d", "M0 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4Zm2-1a1 1 0 0 0-1 1v.217l7 4.2 7-4.2V4a1 1 0 0 0-1-1H2Zm13 2.383-4.708 2.825L15 11.105V5.383Zm-.034 6.876-5.64-3.471L8 9.583l-1.326-.795-5.64 3.47A1 1 0 0 0 2 13h12a1 1 0 0 0 .966-.741ZM1 11.105l4.708-2.897L1 5.383v5.722Z");
    			add_location(path1, file$2, 38, 16, 1561);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "width", "16");
    			attr_dev(svg1, "height", "16");
    			attr_dev(svg1, "fill", "currentColor");
    			attr_dev(svg1, "class", "bi bi-envelope");
    			attr_dev(svg1, "viewBox", "0 0 16 16");
    			add_location(svg1, file$2, 37, 12, 1417);
    			attr_dev(a3, "aria-label", "Github");
    			attr_dev(a3, "href", "mailto:support@budgetfrog.space");
    			attr_dev(a3, "class", "btn btn-ghost drawer-button btn-square normal-case");
    			add_location(a3, file$2, 35, 8, 1270);
    			attr_dev(path2, "d", "M256,32C132.3,32,32,134.9,32,261.7c0,101.5,64.2,187.5,153.2,217.9a17.56,17.56,0,0,0,3.8.4c8.3,0,11.5-6.1,11.5-11.4,0-5.5-.2-19.9-.3-39.1a102.4,102.4,0,0,1-22.6,2.7c-43.1,0-52.9-33.5-52.9-33.5-10.2-26.5-24.9-33.6-24.9-33.6-19.5-13.7-.1-14.1,1.4-14.1h.1c22.5,2,34.3,23.8,34.3,23.8,11.2,19.6,26.2,25.1,39.6,25.1a63,63,0,0,0,25.6-6c2-14.8,7.8-24.9,14.2-30.7-49.7-5.8-102-25.5-102-113.5,0-25.1,8.7-45.6,23-61.6-2.3-5.8-10-29.2,2.2-60.8a18.64,18.64,0,0,1,5-.5c8.1,0,26.4,3.1,56.6,24.1a208.21,208.21,0,0,1,112.2,0c30.2-21,48.5-24.1,56.6-24.1a18.64,18.64,0,0,1,5,.5c12.2,31.6,4.5,55,2.2,60.8,14.3,16.1,23,36.6,23,61.6,0,88.2-52.4,107.6-102.3,113.3,8,7.1,15.2,21.1,15.2,42.5,0,30.7-.3,55.5-.3,63,0,5.4,3.1,11.5,11.4,11.5a19.35,19.35,0,0,0,4-.4C415.9,449.2,480,363.1,480,261.7,480,134.9,379.7,32,256,32Z");
    			add_location(path2, file$2, 45, 16, 2268);
    			attr_dev(svg2, "width", "20");
    			attr_dev(svg2, "height", "20");
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "viewBox", "0 0 512 512");
    			attr_dev(svg2, "class", "inline-block h-5 w-5 fill-current md:h-6 md:w-6");
    			add_location(svg2, file$2, 43, 12, 2091);
    			attr_dev(a4, "aria-label", "Github");
    			attr_dev(a4, "target", "_blank");
    			attr_dev(a4, "href", "https://github.com/MeinLiX/BudgetFrog");
    			attr_dev(a4, "rel", "noopener");
    			attr_dev(a4, "class", "btn btn-ghost drawer-button btn-square normal-case");
    			add_location(a4, file$2, 41, 8, 1907);
    			attr_dev(div3, "class", "navbar-end");
    			add_location(div3, file$2, 34, 4, 1236);
    			attr_dev(div4, "class", "navbar bg-indigo-100");
    			add_location(div4, file$2, 16, 0, 330);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div1);
    			append_dev(div1, div0);
    			append_dev(div0, label);
    			append_dev(label, svg0);
    			append_dev(svg0, path0);
    			append_dev(div0, t0);
    			append_dev(div0, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a0);
    			append_dev(ul, t2);
    			append_dev(ul, li1);
    			append_dev(li1, a1);
    			append_dev(div4, t4);
    			append_dev(div4, div2);
    			append_dev(div2, a2);
    			append_dev(div4, t6);
    			append_dev(div4, div3);
    			append_dev(div3, a3);
    			append_dev(a3, svg1);
    			append_dev(svg1, path1);
    			append_dev(div3, t7);
    			append_dev(div3, a4);
    			append_dev(a4, svg2);
    			append_dev(svg2, path2);

    			if (!mounted) {
    				dispose = listen_dev(a1, "click", /*logout*/ ctx[0], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, []);

    	function logout() {
    		LocalStorage.Set("jwt", null);
    		push("/");
    	}

    	let isOpen = false;

    	function handleUpdate(event) {
    		isOpen = event.detail.isOpen;
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		push,
    		LS: LocalStorage,
    		userDetails,
    		logout,
    		isOpen,
    		handleUpdate
    	});

    	$$self.$inject_state = $$props => {
    		if ('isOpen' in $$props) isOpen = $$props.isOpen;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [logout];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\components\budget\BudgetHeader.svelte generated by Svelte v3.48.0 */
    const file$1 = "src\\components\\budget\\BudgetHeader.svelte";

    function create_fragment$1(ctx) {
    	let div4;
    	let div0;
    	let a0;
    	let b0;
    	let t0_value = (/*$selectedBudget*/ ctx[0].name || "Budget") + "";
    	let t0;
    	let a0_href_value;
    	let t1;
    	let a1;
    	let t2;
    	let a1_href_value;
    	let t3;
    	let div2;
    	let div1;
    	let span;
    	let t4_value = (/*$selectedBudget*/ ctx[0].balance?.currency || "") + "";
    	let t4;
    	let t5;
    	let b1;
    	let t6_value = (/*$selectedBudget*/ ctx[0].balance?.amount || 0) + "";
    	let t6;
    	let t7;
    	let div3;
    	let a2;
    	let t8;
    	let a2_href_value;
    	let t9;
    	let a3;
    	let t10;
    	let a3_href_value;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			b0 = element("b");
    			t0 = text(t0_value);
    			t1 = space();
    			a1 = element("a");
    			t2 = text("Statistic");
    			t3 = space();
    			div2 = element("div");
    			div1 = element("div");
    			span = element("span");
    			t4 = text(t4_value);
    			t5 = space();
    			b1 = element("b");
    			t6 = text(t6_value);
    			t7 = space();
    			div3 = element("div");
    			a2 = element("a");
    			t8 = text("Planned");
    			t9 = space();
    			a3 = element("a");
    			t10 = text("Categories");
    			add_location(b0, file$1, 25, 12, 981);
    			attr_dev(a0, "class", "btn btn-ghost normal-case text-xl");
    			attr_dev(a0, "href", a0_href_value = "/#/budget/" + /*$selectedBudget*/ ctx[0].id);
    			add_location(a0, file$1, 24, 8, 884);
    			attr_dev(a1, "class", "btn btn-ghost normal-case");
    			attr_dev(a1, "href", a1_href_value = "/#/budget/" + /*$selectedBudget*/ ctx[0].id + "/statistic/");
    			add_location(a1, file$1, 27, 8, 1045);
    			attr_dev(div0, "class", "navbar-start");
    			add_location(div0, file$1, 23, 4, 848);
    			attr_dev(span, "class", "indicator-item badge badge-outline");
    			add_location(span, file$1, 33, 12, 1277);
    			add_location(b1, file$1, 36, 12, 1421);
    			attr_dev(div1, "class", "text-xl indicator p-1 mt-3");
    			add_location(div1, file$1, 32, 8, 1223);
    			attr_dev(div2, "class", "navbar-center");
    			add_location(div2, file$1, 31, 4, 1186);
    			attr_dev(a2, "class", "btn btn-ghost normal-case");
    			attr_dev(a2, "href", a2_href_value = "/#/budget/" + /*$selectedBudget*/ ctx[0].id + "/planned/");
    			add_location(a2, file$1, 40, 8, 1534);
    			attr_dev(a3, "class", "btn btn-ghost normal-case");
    			attr_dev(a3, "href", a3_href_value = "/#/budget/" + /*$selectedBudget*/ ctx[0].id + "/category/");
    			add_location(a3, file$1, 43, 8, 1663);
    			attr_dev(div3, "class", "navbar-end");
    			add_location(div3, file$1, 39, 4, 1500);
    			attr_dev(div4, "class", "navbar bg-yellow-100 ");
    			add_location(div4, file$1, 22, 0, 807);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div0);
    			append_dev(div0, a0);
    			append_dev(a0, b0);
    			append_dev(b0, t0);
    			append_dev(div0, t1);
    			append_dev(div0, a1);
    			append_dev(a1, t2);
    			append_dev(div4, t3);
    			append_dev(div4, div2);
    			append_dev(div2, div1);
    			append_dev(div1, span);
    			append_dev(span, t4);
    			append_dev(div1, t5);
    			append_dev(div1, b1);
    			append_dev(b1, t6);
    			append_dev(div4, t7);
    			append_dev(div4, div3);
    			append_dev(div3, a2);
    			append_dev(a2, t8);
    			append_dev(div3, t9);
    			append_dev(div3, a3);
    			append_dev(a3, t10);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$selectedBudget*/ 1 && t0_value !== (t0_value = (/*$selectedBudget*/ ctx[0].name || "Budget") + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$selectedBudget*/ 1 && a0_href_value !== (a0_href_value = "/#/budget/" + /*$selectedBudget*/ ctx[0].id)) {
    				attr_dev(a0, "href", a0_href_value);
    			}

    			if (dirty & /*$selectedBudget*/ 1 && a1_href_value !== (a1_href_value = "/#/budget/" + /*$selectedBudget*/ ctx[0].id + "/statistic/")) {
    				attr_dev(a1, "href", a1_href_value);
    			}

    			if (dirty & /*$selectedBudget*/ 1 && t4_value !== (t4_value = (/*$selectedBudget*/ ctx[0].balance?.currency || "") + "")) set_data_dev(t4, t4_value);
    			if (dirty & /*$selectedBudget*/ 1 && t6_value !== (t6_value = (/*$selectedBudget*/ ctx[0].balance?.amount || 0) + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*$selectedBudget*/ 1 && a2_href_value !== (a2_href_value = "/#/budget/" + /*$selectedBudget*/ ctx[0].id + "/planned/")) {
    				attr_dev(a2, "href", a2_href_value);
    			}

    			if (dirty & /*$selectedBudget*/ 1 && a3_href_value !== (a3_href_value = "/#/budget/" + /*$selectedBudget*/ ctx[0].id + "/category/")) {
    				attr_dev(a3, "href", a3_href_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let $selectedBudget;
    	validate_store(selectedBudget, 'selectedBudget');
    	component_subscribe($$self, selectedBudget, $$value => $$invalidate(0, $selectedBudget = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BudgetHeader', slots, []);

    	onMount(async () => {
    		location.subscribe(async newLocation => {
    			if (newLocation.includes("budget")) {
    				newLocation += "/";
    				let BudgetID = newLocation.substring(newLocation.indexOf("/", 1) + 1, newLocation.indexOf("/", 8));

    				try {
    					set_store_value(selectedBudget, $selectedBudget = (await Request$1.budget.get({ BudgetID })).data, $selectedBudget);
    				} catch(err) {
    					ErrorWrapper(err);
    				}
    			}
    		});
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BudgetHeader> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		location,
    		ErrorWrapper,
    		Request: Request$1,
    		selectedBudget,
    		$selectedBudget
    	});

    	return [$selectedBudget];
    }

    class BudgetHeader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BudgetHeader",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    var css_248z$1 = "#app{min-height:80vh}a{text-decoration:none !important}";
    styleInject(css_248z$1);

    /* src\App.svelte generated by Svelte v3.48.0 */
    const file = "src\\App.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	return child_ctx;
    }

    // (36:4) {#if $auth}
    function create_if_block(ctx) {
    	let header;
    	let t;
    	let show_if = /*$location*/ ctx[1].includes("budget");
    	let if_block_anchor;
    	let current;
    	header = new Header({ $$inline: true });
    	let if_block = show_if && create_if_block_1(ctx);

    	const block = {
    		c: function create() {
    			create_component(header.$$.fragment);
    			t = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			mount_component(header, target, anchor);
    			insert_dev(target, t, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$location*/ 2) show_if = /*$location*/ ctx[1].includes("budget");

    			if (show_if) {
    				if (if_block) {
    					if (dirty & /*$location*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block_1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(header, detaching);
    			if (detaching) detach_dev(t);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(36:4) {#if $auth}",
    		ctx
    	});

    	return block;
    }

    // (38:8) {#if $location.includes("budget")}
    function create_if_block_1(ctx) {
    	let budgetheader;
    	let current;
    	budgetheader = new BudgetHeader({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(budgetheader.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(budgetheader, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(budgetheader.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(budgetheader.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(budgetheader, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(38:8) {#if $location.includes(\\\"budget\\\")}",
    		ctx
    	});

    	return block;
    }

    // (44:8) {#each $errorMSG as message}
    function create_each_block_1(ctx) {
    	let label;
    	let div;
    	let span;
    	let t_value = /*message*/ ctx[6] + "";
    	let t;
    	let label_transition;
    	let current;

    	const block = {
    		c: function create() {
    			label = element("label");
    			div = element("div");
    			span = element("span");
    			t = text(t_value);
    			add_location(span, file, 46, 20, 1311);
    			attr_dev(div, "class", "alert alert-error");
    			add_location(div, file, 45, 16, 1258);
    			attr_dev(label, "class", "label");
    			add_location(label, file, 44, 12, 1203);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, div);
    			append_dev(div, span);
    			append_dev(span, t);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$errorMSG*/ 4) && t_value !== (t_value = /*message*/ ctx[6] + "")) set_data_dev(t, t_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!label_transition) label_transition = create_bidirectional_transition(label, fade, {}, true);
    				label_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!label_transition) label_transition = create_bidirectional_transition(label, fade, {}, false);
    			label_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_transition) label_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(44:8) {#each $errorMSG as message}",
    		ctx
    	});

    	return block;
    }

    // (51:8) {#each $infoMSG as message}
    function create_each_block(ctx) {
    	let label;
    	let div;
    	let span;
    	let t0_value = /*message*/ ctx[6] + "";
    	let t0;
    	let t1;
    	let label_transition;
    	let current;

    	const block = {
    		c: function create() {
    			label = element("label");
    			div = element("div");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			add_location(span, file, 53, 20, 1553);
    			attr_dev(div, "class", "alert shadow-lg");
    			add_location(div, file, 52, 16, 1502);
    			attr_dev(label, "class", "label");
    			add_location(label, file, 51, 12, 1447);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, div);
    			append_dev(div, span);
    			append_dev(span, t0);
    			append_dev(label, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*$infoMSG*/ 8) && t0_value !== (t0_value = /*message*/ ctx[6] + "")) set_data_dev(t0, t0_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!label_transition) label_transition = create_bidirectional_transition(label, fade, {}, true);
    				label_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!label_transition) label_transition = create_bidirectional_transition(label, fade, {}, false);
    			label_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			if (detaching && label_transition) label_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(51:8) {#each $infoMSG as message}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let div1;
    	let t0;
    	let div0;
    	let t1;
    	let t2;
    	let router;
    	let current;
    	let if_block = /*$auth*/ ctx[0] && create_if_block(ctx);
    	let each_value_1 = /*$errorMSG*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value = /*$infoMSG*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	router = new Router({ props: { routes }, $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t0 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t1 = space();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			create_component(router.$$.fragment);
    			attr_dev(div0, "class", "fixed w-96");
    			set_style(div0, "z-index", "999");
    			add_location(div0, file, 42, 4, 1106);
    			attr_dev(div1, "id", "app");
    			add_location(div1, file, 34, 0, 949);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].m(div0, null);
    			}

    			append_dev(div0, t1);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			append_dev(div1, t2);
    			mount_component(router, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$auth*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$auth*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*$errorMSG*/ 4) {
    				each_value_1 = /*$errorMSG*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_1(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(div0, t1);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*$infoMSG*/ 8) {
    				each_value = /*$infoMSG*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks_1, detaching);
    			destroy_each(each_blocks, detaching);
    			destroy_component(router);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let $auth;
    	let $userDetails;
    	let $avaliableCurrency;
    	let $location;
    	let $errorMSG;
    	let $infoMSG;
    	validate_store(auth, 'auth');
    	component_subscribe($$self, auth, $$value => $$invalidate(0, $auth = $$value));
    	validate_store(userDetails, 'userDetails');
    	component_subscribe($$self, userDetails, $$value => $$invalidate(4, $userDetails = $$value));
    	validate_store(avaliableCurrency, 'avaliableCurrency');
    	component_subscribe($$self, avaliableCurrency, $$value => $$invalidate(5, $avaliableCurrency = $$value));
    	validate_store(location, 'location');
    	component_subscribe($$self, location, $$value => $$invalidate(1, $location = $$value));
    	validate_store(errorMSG, 'errorMSG');
    	component_subscribe($$self, errorMSG, $$value => $$invalidate(2, $errorMSG = $$value));
    	validate_store(infoMSG, 'infoMSG');
    	component_subscribe($$self, infoMSG, $$value => $$invalidate(3, $infoMSG = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);

    	onMount(async () => {
    		try {
    			set_store_value(userDetails, $userDetails = (await Request$1.user.me()).data, $userDetails);
    			set_store_value(auth, $auth = true, $auth);
    			set_store_value(avaliableCurrency, $avaliableCurrency = (await Request$1.exchange.avaliableCurrency()).data.currencies, $avaliableCurrency);
    		} catch {
    			set_store_value(userDetails, $userDetails = {}, $userDetails);
    			set_store_value(auth, $auth = false, $auth);
    		}

    		if (!$auth) {
    			await push("#/");
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		fade,
    		Router,
    		push,
    		location,
    		routes,
    		Header,
    		BudgetHeader,
    		Request: Request$1,
    		auth,
    		userDetails,
    		avaliableCurrency,
    		errorMSG,
    		infoMSG,
    		$auth,
    		$userDetails,
    		$avaliableCurrency,
    		$location,
    		$errorMSG,
    		$infoMSG
    	});

    	return [$auth, $location, $errorMSG, $infoMSG];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    var css_248z = "/*\n! tailwindcss v3.0.24 | MIT License | https://tailwindcss.com\n*//*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box; /* 1 */\n  border-width: 0; /* 2 */\n  border-style: solid; /* 2 */\n  border-color: #e5e7eb; /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n*/\n\nhtml {\n  line-height: 1.5; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n  -moz-tab-size: 4; /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4; /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; /* 4 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0; /* 1 */\n  line-height: inherit; /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0; /* 1 */\n  color: inherit; /* 2 */\n  border-top-width: 1px; /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0; /* 1 */\n  border-color: inherit; /* 2 */\n  border-collapse: collapse; /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: inherit; /* 1 */\n  color: inherit; /* 1 */\n  margin: 0; /* 2 */\n  padding: 0; /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput:-ms-input-placeholder, textarea:-ms-input-placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1; /* 1 */\n  color: #9ca3af; /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block; /* 1 */\n  vertical-align: middle; /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/*\nEnsure the default browser behavior of the `hidden` attribute.\n*/\n\n[hidden] {\n  display: none;\n}\n\n:root,\n[data-theme] {\n  background-color: hsla(var(--b1) / var(--tw-bg-opacity, 1));\n  color: hsla(var(--bc) / var(--tw-text-opacity, 1));\n}\n\nhtml {\n  -webkit-tap-highlight-color: transparent;\n}\n\n:root {\n  --p: 259 94% 51%;\n  --pf: 259 94% 41%;\n  --sf: 314 100% 38%;\n  --af: 174 60% 41%;\n  --nf: 219 14% 22%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --pc: 0 0% 100%;\n  --s: 314 100% 47%;\n  --sc: 0 0% 100%;\n  --a: 174 60% 51%;\n  --ac: 175 44% 15%;\n  --n: 219 14% 28%;\n  --nc: 0 0% 100%;\n  --b1: 0 0% 100%;\n  --b2: 0 0% 95%;\n  --b3: 180 2% 90%;\n  --bc: 215 28% 17%;\n}\n\n@media (prefers-color-scheme: dark) {\n\n  :root {\n    --p: 262 80% 50%;\n    --pf: 262 80% 40%;\n    --sf: 316 70% 40%;\n    --af: 175 70% 33%;\n    --in: 198 93% 60%;\n    --su: 158 64% 52%;\n    --wa: 43 96% 56%;\n    --er: 0 91% 71%;\n    --inc: 198 100% 12%;\n    --suc: 158 100% 10%;\n    --wac: 43 100% 11%;\n    --erc: 0 100% 14%;\n    --rounded-box: 1rem;\n    --rounded-btn: 0.5rem;\n    --rounded-badge: 1.9rem;\n    --animation-btn: 0.25s;\n    --animation-input: .2s;\n    --btn-text-case: uppercase;\n    --btn-focus-scale: 0.95;\n    --border-btn: 1px;\n    --tab-border: 1px;\n    --tab-radius: 0.5rem;\n    --pc: 0 0% 100%;\n    --s: 316 70% 50%;\n    --sc: 0 0% 100%;\n    --a: 175 70% 41%;\n    --ac: 0 0% 100%;\n    --n: 218 18% 12%;\n    --nf: 223 17% 8%;\n    --nc: 220 13% 69%;\n    --b1: 220 18% 20%;\n    --b2: 220 17% 17%;\n    --b3: 219 18% 15%;\n    --bc: 220 13% 69%;\n  }\n}\n\n[data-theme=light] {\n  --p: 259 94% 51%;\n  --pf: 259 94% 41%;\n  --sf: 314 100% 38%;\n  --af: 174 60% 41%;\n  --nf: 219 14% 22%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --pc: 0 0% 100%;\n  --s: 314 100% 47%;\n  --sc: 0 0% 100%;\n  --a: 174 60% 51%;\n  --ac: 175 44% 15%;\n  --n: 219 14% 28%;\n  --nc: 0 0% 100%;\n  --b1: 0 0% 100%;\n  --b2: 0 0% 95%;\n  --b3: 180 2% 90%;\n  --bc: 215 28% 17%;\n}\n\n[data-theme=dark] {\n  --p: 262 80% 50%;\n  --pf: 262 80% 40%;\n  --sf: 316 70% 40%;\n  --af: 175 70% 33%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --pc: 0 0% 100%;\n  --s: 316 70% 50%;\n  --sc: 0 0% 100%;\n  --a: 175 70% 41%;\n  --ac: 0 0% 100%;\n  --n: 218 18% 12%;\n  --nf: 223 17% 8%;\n  --nc: 220 13% 69%;\n  --b1: 220 18% 20%;\n  --b2: 220 17% 17%;\n  --b3: 219 18% 15%;\n  --bc: 220 13% 69%;\n}\n\n[data-theme=cupcake] {\n  --p: 183 47% 59%;\n  --pf: 183 47% 47%;\n  --sf: 338 71% 62%;\n  --af: 39 84% 46%;\n  --nf: 280 46% 11%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --pc: 183 100% 12%;\n  --sc: 338 100% 16%;\n  --ac: 39 100% 12%;\n  --nc: 280 83% 83%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --s: 338 71% 78%;\n  --a: 39 84% 58%;\n  --n: 280 46% 14%;\n  --b1: 24 33% 97%;\n  --b2: 27 22% 92%;\n  --b3: 22 14% 89%;\n  --bc: 280 46% 14%;\n  --rounded-btn: 1.9rem;\n  --tab-border: 2px;\n  --tab-radius: .5rem;\n}\n\n[data-theme=bumblebee] {\n  --p: 41 74% 53%;\n  --pf: 41 74% 42%;\n  --sf: 50 94% 46%;\n  --af: 240 33% 11%;\n  --nf: 240 33% 11%;\n  --b2: 0 0% 90%;\n  --b3: 0 0% 81%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --bc: 0 0% 20%;\n  --ac: 240 60% 83%;\n  --nc: 240 60% 83%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --pc: 240 33% 14%;\n  --s: 50 94% 58%;\n  --sc: 240 33% 14%;\n  --a: 240 33% 14%;\n  --n: 240 33% 14%;\n  --b1: 0 0% 100%;\n}\n\n[data-theme=emerald] {\n  --p: 141 50% 60%;\n  --pf: 141 50% 48%;\n  --sf: 219 96% 48%;\n  --af: 10 81% 45%;\n  --nf: 219 20% 20%;\n  --b2: 0 0% 90%;\n  --b3: 0 0% 81%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --btn-text-case: uppercase;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --pc: 151 28% 19%;\n  --s: 219 96% 60%;\n  --sc: 210 20% 98%;\n  --a: 10 81% 56%;\n  --ac: 210 20% 98%;\n  --n: 219 20% 25%;\n  --nc: 210 20% 98%;\n  --b1: 0 0% 100%;\n  --bc: 219 20% 25%;\n  --animation-btn: 0;\n  --animation-input: 0;\n  --btn-focus-scale: 1;\n}\n\n[data-theme=corporate] {\n  --p: 229 96% 64%;\n  --pf: 229 96% 51%;\n  --sf: 215 26% 47%;\n  --af: 154 49% 48%;\n  --nf: 233 27% 10%;\n  --b2: 0 0% 90%;\n  --b3: 0 0% 81%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --pc: 229 100% 93%;\n  --sc: 215 100% 12%;\n  --ac: 154 100% 12%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --btn-text-case: uppercase;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 215 26% 59%;\n  --a: 154 49% 60%;\n  --n: 233 27% 13%;\n  --nc: 210 38% 95%;\n  --b1: 0 0% 100%;\n  --bc: 233 27% 13%;\n  --rounded-box: 0.25rem;\n  --rounded-btn: .125rem;\n  --rounded-badge: .125rem;\n  --animation-btn: 0;\n  --animation-input: 0;\n  --btn-focus-scale: 1;\n}\n\n[data-theme=synthwave] {\n  --p: 321 70% 69%;\n  --pf: 321 70% 55%;\n  --sf: 197 87% 52%;\n  --af: 48 89% 46%;\n  --nf: 253 61% 15%;\n  --b2: 254 59% 23%;\n  --b3: 254 59% 21%;\n  --pc: 321 100% 14%;\n  --sc: 197 100% 13%;\n  --ac: 48 100% 11%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 197 87% 65%;\n  --a: 48 89% 57%;\n  --n: 253 61% 19%;\n  --nc: 260 60% 98%;\n  --b1: 254 59% 26%;\n  --bc: 260 60% 98%;\n  --in: 199 87% 64%;\n  --inc: 257 63% 17%;\n  --su: 168 74% 68%;\n  --suc: 257 63% 17%;\n  --wa: 48 89% 57%;\n  --wac: 257 63% 17%;\n  --er: 352 74% 57%;\n  --erc: 260 60% 98%;\n}\n\n[data-theme=retro] {\n  --p: 3 74% 76%;\n  --pf: 3 74% 61%;\n  --sf: 145 27% 58%;\n  --af: 49 67% 61%;\n  --nf: 42 17% 34%;\n  --inc: 221 100% 91%;\n  --suc: 142 100% 87%;\n  --wac: 32 100% 9%;\n  --erc: 0 100% 90%;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --pc: 345 5% 15%;\n  --s: 145 27% 72%;\n  --sc: 345 5% 15%;\n  --a: 49 67% 76%;\n  --ac: 345 5% 15%;\n  --n: 42 17% 42%;\n  --nc: 45 47% 80%;\n  --b1: 45 47% 80%;\n  --b2: 45 37% 72%;\n  --b3: 42 36% 65%;\n  --bc: 345 5% 15%;\n  --in: 221 83% 53%;\n  --su: 142 76% 36%;\n  --wa: 32 95% 44%;\n  --er: 0 72% 51%;\n  --rounded-box: 0.4rem;\n  --rounded-btn: 0.4rem;\n  --rounded-badge: 0.4rem;\n}\n\n[data-theme=cyberpunk] {\n  font-family: ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;\n  --pf: 345 100% 58%;\n  --sf: 195 80% 56%;\n  --af: 276 74% 57%;\n  --nf: 57 100% 10%;\n  --b2: 56 100% 45%;\n  --b3: 56 100% 41%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --bc: 56 100% 10%;\n  --pc: 345 100% 15%;\n  --sc: 195 100% 14%;\n  --ac: 276 100% 14%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --p: 345 100% 73%;\n  --s: 195 80% 70%;\n  --a: 276 74% 71%;\n  --n: 57 100% 13%;\n  --nc: 56 100% 50%;\n  --b1: 56 100% 50%;\n  --rounded-box: 0;\n  --rounded-btn: 0;\n  --rounded-badge: 0;\n  --tab-radius: 0;\n}\n\n[data-theme=valentine] {\n  --p: 353 74% 67%;\n  --pf: 353 74% 54%;\n  --sf: 254 86% 61%;\n  --af: 181 56% 56%;\n  --nf: 336 43% 38%;\n  --b2: 318 46% 80%;\n  --b3: 318 46% 72%;\n  --pc: 353 100% 13%;\n  --sc: 254 100% 15%;\n  --ac: 181 100% 14%;\n  --inc: 221 100% 91%;\n  --suc: 142 100% 87%;\n  --wac: 32 100% 9%;\n  --erc: 0 100% 90%;\n  --rounded-box: 1rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 254 86% 77%;\n  --a: 181 56% 70%;\n  --n: 336 43% 48%;\n  --nc: 318 46% 89%;\n  --b1: 318 46% 89%;\n  --bc: 344 38% 28%;\n  --in: 221 83% 53%;\n  --su: 142 76% 36%;\n  --wa: 32 95% 44%;\n  --er: 0 72% 51%;\n  --rounded-btn: 1.9rem;\n}\n\n[data-theme=halloween] {\n  --p: 32 89% 52%;\n  --pf: 32 89% 42%;\n  --sf: 271 46% 34%;\n  --af: 91 100% 26%;\n  --nf: 180 4% 9%;\n  --b2: 0 0% 12%;\n  --b3: 0 0% 10%;\n  --bc: 0 0% 83%;\n  --sc: 271 100% 88%;\n  --ac: 91 100% 7%;\n  --nc: 180 5% 82%;\n  --inc: 221 100% 91%;\n  --suc: 142 100% 87%;\n  --wac: 32 100% 9%;\n  --erc: 0 100% 90%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --pc: 180 7% 8%;\n  --s: 271 46% 42%;\n  --a: 91 100% 33%;\n  --n: 180 4% 11%;\n  --b1: 0 0% 13%;\n  --in: 221 83% 53%;\n  --su: 142 76% 36%;\n  --wa: 32 95% 44%;\n  --er: 0 72% 51%;\n}\n\n[data-theme=garden] {\n  --p: 139 16% 43%;\n  --pf: 139 16% 34%;\n  --sf: 97 37% 75%;\n  --af: 0 68% 75%;\n  --nf: 0 4% 28%;\n  --b2: 0 4% 82%;\n  --b3: 0 4% 74%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --pc: 139 100% 89%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 97 37% 93%;\n  --sc: 96 32% 15%;\n  --a: 0 68% 94%;\n  --ac: 0 22% 16%;\n  --n: 0 4% 35%;\n  --nc: 0 4% 91%;\n  --b1: 0 4% 91%;\n  --bc: 0 3% 6%;\n}\n\n[data-theme=forest] {\n  --p: 141 72% 42%;\n  --pf: 141 72% 34%;\n  --sf: 141 75% 38%;\n  --af: 35 69% 42%;\n  --nf: 0 10% 5%;\n  --b2: 0 12% 7%;\n  --b3: 0 12% 7%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --bc: 0 12% 82%;\n  --pc: 141 100% 8%;\n  --sc: 141 100% 10%;\n  --ac: 35 100% 10%;\n  --nc: 0 7% 81%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 141 75% 48%;\n  --a: 35 69% 52%;\n  --n: 0 10% 6%;\n  --b1: 0 12% 8%;\n  --rounded-btn: 1.9rem;\n}\n\n[data-theme=aqua] {\n  --p: 182 93% 49%;\n  --pf: 182 93% 40%;\n  --sf: 274 31% 45%;\n  --af: 47 100% 64%;\n  --nf: 205 54% 40%;\n  --b2: 219 53% 39%;\n  --b3: 219 53% 35%;\n  --bc: 219 100% 89%;\n  --sc: 274 100% 91%;\n  --ac: 47 100% 16%;\n  --nc: 205 100% 90%;\n  --inc: 221 100% 91%;\n  --suc: 142 100% 87%;\n  --wac: 32 100% 9%;\n  --erc: 0 100% 90%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --pc: 181 100% 17%;\n  --s: 274 31% 57%;\n  --a: 47 100% 80%;\n  --n: 205 54% 50%;\n  --b1: 219 53% 43%;\n  --in: 221 83% 53%;\n  --su: 142 76% 36%;\n  --wa: 32 95% 44%;\n  --er: 0 72% 51%;\n}\n\n[data-theme=lofi] {\n  --p: 0 0% 5%;\n  --pf: 0 0% 4%;\n  --sf: 0 2% 8%;\n  --af: 0 0% 12%;\n  --nf: 0 0% 0%;\n  --btn-text-case: uppercase;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --pc: 0 0% 100%;\n  --s: 0 2% 10%;\n  --sc: 0 0% 100%;\n  --a: 0 0% 15%;\n  --ac: 0 0% 100%;\n  --n: 0 0% 0%;\n  --nc: 0 0% 100%;\n  --b1: 0 0% 100%;\n  --b2: 0 0% 95%;\n  --b3: 0 2% 90%;\n  --bc: 0 0% 0%;\n  --in: 212 100% 48%;\n  --inc: 0 0% 100%;\n  --su: 137 72% 46%;\n  --suc: 0 0% 100%;\n  --wa: 5 100% 66%;\n  --wac: 0 0% 100%;\n  --er: 325 78% 49%;\n  --erc: 0 0% 100%;\n  --rounded-box: 0.25rem;\n  --rounded-btn: 0.125rem;\n  --rounded-badge: 0.125rem;\n  --animation-btn: 0;\n  --animation-input: 0;\n  --btn-focus-scale: 1;\n  --tab-radius: 0;\n}\n\n[data-theme=pastel] {\n  --p: 284 22% 80%;\n  --pf: 284 22% 64%;\n  --sf: 352 70% 70%;\n  --af: 158 55% 65%;\n  --nf: 199 44% 49%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --bc: 0 0% 20%;\n  --pc: 284 59% 16%;\n  --sc: 352 100% 18%;\n  --ac: 158 100% 16%;\n  --nc: 199 100% 12%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 352 70% 88%;\n  --a: 158 55% 81%;\n  --n: 199 44% 61%;\n  --b1: 0 0% 100%;\n  --b2: 210 20% 98%;\n  --b3: 216 12% 84%;\n  --rounded-btn: 1.9rem;\n}\n\n[data-theme=fantasy] {\n  --p: 296 83% 25%;\n  --pf: 296 83% 20%;\n  --sf: 200 100% 30%;\n  --af: 31 94% 41%;\n  --nf: 215 28% 13%;\n  --b2: 0 0% 90%;\n  --b3: 0 0% 81%;\n  --in: 198 93% 60%;\n  --su: 158 64% 52%;\n  --wa: 43 96% 56%;\n  --er: 0 91% 71%;\n  --pc: 296 100% 85%;\n  --sc: 200 100% 87%;\n  --ac: 31 100% 10%;\n  --nc: 215 62% 83%;\n  --inc: 198 100% 12%;\n  --suc: 158 100% 10%;\n  --wac: 43 100% 11%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 200 100% 37%;\n  --a: 31 94% 51%;\n  --n: 215 28% 17%;\n  --b1: 0 0% 100%;\n  --bc: 215 28% 17%;\n}\n\n[data-theme=wireframe] {\n  font-family: Chalkboard,comic sans ms,\"sanssecondaryerif\";\n  --pf: 0 0% 58%;\n  --sf: 0 0% 58%;\n  --af: 0 0% 58%;\n  --nf: 0 0% 74%;\n  --bc: 0 0% 20%;\n  --pc: 0 0% 14%;\n  --sc: 0 0% 14%;\n  --ac: 0 0% 14%;\n  --nc: 0 0% 18%;\n  --inc: 240 100% 90%;\n  --suc: 120 100% 85%;\n  --wac: 60 100% 10%;\n  --erc: 0 100% 90%;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --p: 0 0% 72%;\n  --s: 0 0% 72%;\n  --a: 0 0% 72%;\n  --n: 0 0% 92%;\n  --b1: 0 0% 100%;\n  --b2: 0 0% 93%;\n  --b3: 0 0% 87%;\n  --in: 240 100% 50%;\n  --su: 120 100% 25%;\n  --wa: 60 30% 50%;\n  --er: 0 100% 50%;\n  --rounded-box: 0.2rem;\n  --rounded-btn: 0.2rem;\n  --rounded-badge: 0.2rem;\n  --tab-radius: 0.2rem;\n}\n\n[data-theme=black] {\n  --p: 0 2% 20%;\n  --pf: 0 2% 16%;\n  --sf: 0 2% 16%;\n  --af: 0 2% 16%;\n  --bc: 0 0% 80%;\n  --pc: 0 5% 84%;\n  --sc: 0 5% 84%;\n  --ac: 0 5% 84%;\n  --nc: 0 3% 83%;\n  --inc: 240 100% 90%;\n  --suc: 120 100% 85%;\n  --wac: 60 100% 10%;\n  --erc: 0 100% 90%;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --s: 0 2% 20%;\n  --a: 0 2% 20%;\n  --b1: 0 0% 0%;\n  --b2: 0 0% 5%;\n  --b3: 0 2% 10%;\n  --n: 0 1% 15%;\n  --nf: 0 2% 20%;\n  --in: 240 100% 50%;\n  --su: 120 100% 25%;\n  --wa: 60 100% 50%;\n  --er: 0 100% 50%;\n  --rounded-box: 0;\n  --rounded-btn: 0;\n  --rounded-badge: 0;\n  --animation-btn: 0;\n  --animation-input: 0;\n  --btn-text-case: lowercase;\n  --btn-focus-scale: 1;\n  --tab-radius: 0;\n}\n\n[data-theme=luxury] {\n  --p: 0 0% 100%;\n  --pf: 0 0% 80%;\n  --sf: 218 54% 14%;\n  --af: 319 22% 21%;\n  --nf: 270 4% 7%;\n  --pc: 0 0% 20%;\n  --sc: 218 100% 84%;\n  --ac: 319 85% 85%;\n  --inc: 202 100% 14%;\n  --suc: 89 100% 10%;\n  --wac: 54 100% 13%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 218 54% 18%;\n  --a: 319 22% 26%;\n  --n: 270 4% 9%;\n  --nc: 37 67% 58%;\n  --b1: 240 10% 4%;\n  --b2: 270 4% 9%;\n  --b3: 270 2% 18%;\n  --bc: 37 67% 58%;\n  --in: 202 100% 70%;\n  --su: 89 62% 52%;\n  --wa: 54 69% 64%;\n  --er: 0 100% 72%;\n}\n\n[data-theme=dracula] {\n  --p: 326 100% 74%;\n  --pf: 326 100% 59%;\n  --sf: 265 89% 62%;\n  --af: 31 100% 57%;\n  --nf: 230 15% 24%;\n  --b2: 231 15% 17%;\n  --b3: 231 15% 15%;\n  --pc: 326 100% 15%;\n  --sc: 265 100% 16%;\n  --ac: 31 100% 14%;\n  --nc: 230 71% 86%;\n  --inc: 191 100% 15%;\n  --suc: 135 100% 13%;\n  --wac: 65 100% 15%;\n  --erc: 0 100% 93%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 265 89% 78%;\n  --a: 31 100% 71%;\n  --n: 230 15% 30%;\n  --b1: 231 15% 18%;\n  --bc: 60 30% 96%;\n  --in: 191 97% 77%;\n  --su: 135 94% 65%;\n  --wa: 65 92% 76%;\n  --er: 0 100% 67%;\n}\n\n[data-theme=cmyk] {\n  --p: 203 83% 60%;\n  --pf: 203 83% 48%;\n  --sf: 335 78% 48%;\n  --af: 56 100% 48%;\n  --nf: 0 0% 8%;\n  --b2: 0 0% 90%;\n  --b3: 0 0% 81%;\n  --bc: 0 0% 20%;\n  --pc: 203 100% 12%;\n  --sc: 335 100% 92%;\n  --ac: 56 100% 12%;\n  --nc: 0 0% 82%;\n  --inc: 192 100% 10%;\n  --suc: 291 100% 88%;\n  --wac: 25 100% 11%;\n  --erc: 4 100% 91%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 335 78% 60%;\n  --a: 56 100% 60%;\n  --n: 0 0% 10%;\n  --b1: 0 0% 100%;\n  --in: 192 48% 52%;\n  --su: 291 48% 38%;\n  --wa: 25 85% 57%;\n  --er: 4 81% 56%;\n}\n\n[data-theme=autumn] {\n  --p: 344 96% 28%;\n  --pf: 344 96% 22%;\n  --sf: 0 63% 47%;\n  --af: 27 56% 50%;\n  --nf: 22 17% 35%;\n  --b2: 0 0% 85%;\n  --b3: 0 0% 77%;\n  --bc: 0 0% 19%;\n  --pc: 344 100% 86%;\n  --sc: 0 100% 92%;\n  --ac: 27 100% 13%;\n  --nc: 22 100% 89%;\n  --inc: 187 100% 10%;\n  --suc: 165 100% 9%;\n  --wac: 30 100% 10%;\n  --erc: 354 100% 90%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 0 63% 58%;\n  --a: 27 56% 63%;\n  --n: 22 17% 44%;\n  --b1: 0 0% 95%;\n  --in: 187 48% 50%;\n  --su: 165 34% 43%;\n  --wa: 30 84% 50%;\n  --er: 354 79% 49%;\n}\n\n[data-theme=business] {\n  --p: 210 64% 31%;\n  --pf: 210 64% 24%;\n  --sf: 200 13% 44%;\n  --af: 13 80% 48%;\n  --nf: 213 14% 13%;\n  --b2: 0 0% 11%;\n  --b3: 0 0% 10%;\n  --bc: 0 0% 83%;\n  --pc: 210 100% 86%;\n  --sc: 200 100% 11%;\n  --ac: 13 100% 12%;\n  --nc: 213 28% 83%;\n  --inc: 199 100% 88%;\n  --suc: 144 100% 11%;\n  --wac: 39 100% 12%;\n  --erc: 6 100% 89%;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 200 13% 55%;\n  --a: 13 80% 60%;\n  --n: 213 14% 16%;\n  --b1: 0 0% 13%;\n  --in: 199 100% 42%;\n  --su: 144 31% 56%;\n  --wa: 39 64% 60%;\n  --er: 6 56% 43%;\n  --rounded-box: 0.25rem;\n  --rounded-btn: .125rem;\n  --rounded-badge: .125rem;\n}\n\n[data-theme=acid] {\n  --p: 303 100% 50%;\n  --pf: 303 100% 40%;\n  --sf: 27 100% 40%;\n  --af: 72 98% 40%;\n  --nf: 238 43% 14%;\n  --b2: 0 0% 88%;\n  --b3: 0 0% 79%;\n  --bc: 0 0% 20%;\n  --pc: 303 100% 90%;\n  --sc: 27 100% 10%;\n  --ac: 72 100% 10%;\n  --nc: 238 99% 83%;\n  --inc: 210 100% 12%;\n  --suc: 149 100% 12%;\n  --wac: 53 100% 11%;\n  --erc: 1 100% 89%;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 27 100% 50%;\n  --a: 72 98% 50%;\n  --n: 238 43% 17%;\n  --b1: 0 0% 98%;\n  --in: 210 92% 58%;\n  --su: 149 50% 58%;\n  --wa: 53 93% 57%;\n  --er: 1 100% 45%;\n  --rounded-box: 1.25rem;\n  --rounded-btn: 1rem;\n  --rounded-badge: 1rem;\n}\n\n[data-theme=lemonade] {\n  --p: 89 96% 31%;\n  --pf: 89 96% 24%;\n  --sf: 60 81% 44%;\n  --af: 63 80% 71%;\n  --nf: 238 43% 14%;\n  --b2: 0 0% 90%;\n  --b3: 0 0% 81%;\n  --bc: 0 0% 20%;\n  --pc: 89 100% 86%;\n  --sc: 60 100% 11%;\n  --ac: 63 100% 18%;\n  --nc: 238 99% 83%;\n  --inc: 192 79% 17%;\n  --suc: 74 100% 16%;\n  --wac: 50 100% 15%;\n  --erc: 1 100% 17%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 60 81% 55%;\n  --a: 63 80% 88%;\n  --n: 238 43% 17%;\n  --b1: 0 0% 100%;\n  --in: 192 39% 85%;\n  --su: 74 76% 79%;\n  --wa: 50 87% 75%;\n  --er: 1 70% 83%;\n}\n\n[data-theme=night] {\n  --p: 198 93% 60%;\n  --pf: 198 93% 48%;\n  --sf: 234 89% 59%;\n  --af: 329 86% 56%;\n  --b2: 222 47% 10%;\n  --b3: 222 47% 9%;\n  --bc: 222 66% 82%;\n  --pc: 198 100% 12%;\n  --sc: 234 100% 15%;\n  --ac: 329 100% 14%;\n  --nc: 217 76% 83%;\n  --inc: 198 100% 10%;\n  --suc: 172 100% 10%;\n  --wac: 41 100% 13%;\n  --erc: 351 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 234 89% 74%;\n  --a: 329 86% 70%;\n  --n: 217 33% 17%;\n  --nf: 217 30% 22%;\n  --b1: 222 47% 11%;\n  --in: 198 90% 48%;\n  --su: 172 66% 50%;\n  --wa: 41 88% 64%;\n  --er: 351 95% 71%;\n}\n\n[data-theme=coffee] {\n  --p: 30 67% 58%;\n  --pf: 30 67% 46%;\n  --sf: 182 25% 16%;\n  --af: 194 74% 20%;\n  --nf: 300 20% 5%;\n  --b2: 306 19% 10%;\n  --b3: 306 19% 9%;\n  --pc: 30 100% 12%;\n  --sc: 182 67% 84%;\n  --ac: 194 100% 85%;\n  --nc: 300 14% 81%;\n  --inc: 171 100% 13%;\n  --suc: 93 100% 12%;\n  --wac: 43 100% 14%;\n  --erc: 10 100% 15%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 182 25% 20%;\n  --a: 194 74% 25%;\n  --n: 300 20% 6%;\n  --b1: 306 19% 11%;\n  --bc: 37 8% 42%;\n  --in: 171 37% 67%;\n  --su: 93 25% 62%;\n  --wa: 43 100% 69%;\n  --er: 10 95% 75%;\n}\n\n[data-theme=winter] {\n  --p: 212 100% 51%;\n  --pf: 212 100% 41%;\n  --sf: 247 47% 35%;\n  --af: 310 49% 42%;\n  --nf: 217 92% 8%;\n  --pc: 212 100% 90%;\n  --sc: 247 100% 89%;\n  --ac: 310 100% 90%;\n  --nc: 217 100% 82%;\n  --inc: 192 100% 16%;\n  --suc: 182 100% 13%;\n  --wac: 32 100% 17%;\n  --erc: 0 100% 14%;\n  --rounded-box: 1rem;\n  --rounded-btn: 0.5rem;\n  --rounded-badge: 1.9rem;\n  --animation-btn: 0.25s;\n  --animation-input: .2s;\n  --btn-text-case: uppercase;\n  --btn-focus-scale: 0.95;\n  --border-btn: 1px;\n  --tab-border: 1px;\n  --tab-radius: 0.5rem;\n  --s: 247 47% 43%;\n  --a: 310 49% 52%;\n  --n: 217 92% 10%;\n  --b1: 0 0% 100%;\n  --b2: 217 100% 97%;\n  --b3: 219 44% 92%;\n  --bc: 214 30% 32%;\n  --in: 192 93% 78%;\n  --su: 182 47% 66%;\n  --wa: 32 62% 84%;\n  --er: 0 63% 72%;\n}\n\n*, ::before, ::after {\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\r\n.alert {\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  gap: 1rem;\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b2, var(--b1)) / var(--tw-bg-opacity));\n  padding: 1rem;\n  border-radius: var(--rounded-box, 1rem);\n}\r\n.alert > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-y-reverse: 0;\n  margin-top: calc(0.5rem * calc(1 - var(--tw-space-y-reverse)));\n  margin-bottom: calc(0.5rem * var(--tw-space-y-reverse));\n}\r\n@media (min-width: 768px) {\n\n  .alert {\n    flex-direction: row;\n  }\n\n  .alert > :not([hidden]) ~ :not([hidden]) {\n    --tw-space-y-reverse: 0;\n    margin-top: calc(0px * calc(1 - var(--tw-space-y-reverse)));\n    margin-bottom: calc(0px * var(--tw-space-y-reverse));\n  }\n}\r\n.alert > :where(*) {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\r\n.avatar.placeholder > div {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\r\n.badge {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  height: 1.25rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  padding-left: 0.563rem;\n  padding-right: 0.563rem;\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--n) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--n) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--nc) / var(--tw-text-opacity));\n  border-radius: var(--rounded-badge, 1.9rem);\n}\r\n.btn {\n  display: inline-flex;\n  flex-shrink: 0;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  border-color: transparent;\n  border-color: hsl(var(--n) / var(--tw-border-opacity));\n  text-align: center;\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: var(--rounded-btn, 0.5rem);\n  height: 3rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  line-height: 1em;\n  min-height: 3rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  text-transform: var(--btn-text-case, uppercase);\n  -webkit-text-decoration-line: none;\n          text-decoration-line: none;\n  border-width: var(--border-btn, 1px);\n  -webkit-animation: button-pop var(--animation-btn, 0.25s) ease-out;\n          animation: button-pop var(--animation-btn, 0.25s) ease-out;\n  --tw-border-opacity: 1;\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--n) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--nc) / var(--tw-text-opacity));\n}\r\n.btn-disabled, .btn[disabled] {\n  pointer-events: none;\n}\r\n.btn-square {\n  height: 3rem;\n  width: 3rem;\n  padding: 0px;\n}\r\n.btn-circle {\n  height: 3rem;\n  width: 3rem;\n  border-radius: 9999px;\n  padding: 0px;\n}\r\n.btn.loading, .btn.loading:hover {\n  pointer-events: none;\n}\r\n.btn.loading:before {\n  margin-right: 0.5rem;\n  height: 1rem;\n  width: 1rem;\n  border-radius: 9999px;\n  border-width: 2px;\n  -webkit-animation: spin 2s linear infinite;\n          animation: spin 2s linear infinite;\n  content: \"\";\n  border-top-color: transparent;\n  border-left-color: transparent;\n  border-bottom-color: currentColor;\n  border-right-color: currentColor;\n}\r\n@media (prefers-reduced-motion: reduce) {\n\n  .btn.loading:before {\n    -webkit-animation: spin 10s linear infinite;\n            animation: spin 10s linear infinite;\n  }\n}\r\n@-webkit-keyframes spin {\n\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\r\n@keyframes spin {\n\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\r\n.btn-group {\n  display: flex;\n  flex-wrap: wrap;\n}\r\n.btn-group > input[type=\"radio\"].btn {\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n}\r\n.btn-group > input[type=\"radio\"].btn:before {\n  content: attr(data-title);\n}\r\n.card {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  border-radius: var(--rounded-box, 1rem);\n}\r\n.card:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\r\n.card-body {\n  display: flex;\n  flex: 1 1 auto;\n  flex-direction: column;\n  padding: var(--padding-card, 2rem);\n  gap: 0.5rem;\n}\r\n.card-body :where(p) {\n  flex-grow: 1;\n}\r\n.card-actions {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  gap: 0.5rem;\n}\r\n.card figure {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\r\n.card.image-full {\n  display: grid;\n}\r\n.card.image-full:before {\n  position: relative;\n  content: \"\";\n  z-index: 10;\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--n) / var(--tw-bg-opacity));\n  opacity: 0.75;\n  border-radius: var(--rounded-box, 1rem);\n}\r\n.card.image-full:before, .card.image-full > * {\n  grid-column-start: 1;\n  grid-row-start: 1;\n}\r\n.card.image-full > figure img {\n  height: 100%;\n  -o-object-fit: cover;\n     object-fit: cover;\n}\r\n.card.image-full > .card-body {\n  position: relative;\n  z-index: 20;\n  --tw-text-opacity: 1;\n  color: hsl(var(--nc) / var(--tw-text-opacity));\n}\r\n.checkbox {\n  flex-shrink: 0;\n  --chkbg: var(--bc);\n  --chkfg: var(--b1);\n  height: 1.5rem;\n  width: 1.5rem;\n  cursor: pointer;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  border-width: 1px;\n  border-color: hsl(var(--bc) / var(--tw-border-opacity));\n  --tw-border-opacity: 0.2;\n  border-radius: var(--rounded-btn, 0.5rem);\n}\r\n.collapse {\n  position: relative;\n  display: grid;\n  overflow: hidden;\n}\r\n.collapse-title, .collapse > input[type=\"checkbox\"], .collapse-content {\n  grid-column-start: 1;\n  grid-row-start: 1;\n}\r\n.collapse > input[type=\"checkbox\"] {\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  opacity: 0;\n}\r\n.collapse-content {\n  grid-row-start: 2;\n  overflow: hidden;\n  max-height: 0px;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  cursor: unset;\n  transition: padding 0.2s ease-in-out, background-color 0.2s ease-in-out;\n}\r\n.collapse-open .collapse-content,\n.collapse:focus:not(.collapse-close) .collapse-content,\n.collapse:not(.collapse-close)\n  input[type=\"checkbox\"]:checked\n  ~ .collapse-content {\n  max-height: 9000px;\n}\r\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\r\n.dropdown > *:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\r\n.dropdown .dropdown-content {\n  visibility: hidden;\n  position: absolute;\n  z-index: 50;\n  opacity: 0;\n  transform-origin: top;\n  --tw-scale-x: .95;\n  --tw-scale-y: .95;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\r\n.dropdown-end .dropdown-content {\n  right: 0px;\n}\r\n.dropdown-left .dropdown-content {\n  top: 0px;\n  right: 100%;\n  bottom: auto;\n  transform-origin: right;\n}\r\n.dropdown-right .dropdown-content {\n  left: 100%;\n  top: 0px;\n  bottom: auto;\n  transform-origin: left;\n}\r\n.dropdown-top .dropdown-content {\n  bottom: 100%;\n  top: auto;\n  transform-origin: bottom;\n}\r\n.dropdown-end.dropdown-right .dropdown-content {\n  bottom: 0px;\n  top: auto;\n}\r\n.dropdown-end.dropdown-left .dropdown-content {\n  bottom: 0px;\n  top: auto;\n}\r\n.dropdown.dropdown-open .dropdown-content, .dropdown.dropdown-hover:hover .dropdown-content, .dropdown:not(.dropdown-hover):focus .dropdown-content, .dropdown:not(.dropdown-hover):focus-within .dropdown-content {\n  visibility: visible;\n  opacity: 1;\n}\r\n.footer {\n  display: grid;\n  width: 100%;\n  grid-auto-flow: row;\n  place-items: start;\n  row-gap: 2.5rem;\n  -moz-column-gap: 1rem;\n       column-gap: 1rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.footer > * {\n  display: grid;\n  place-items: start;\n  gap: 0.5rem;\n}\r\n@media (min-width: 48rem) {\n\n  .footer {\n    grid-auto-flow: column;\n  }\n\n  .footer-center {\n    grid-auto-flow: row dense;\n  }\n}\r\n.form-control {\n  display: flex;\n  flex-direction: column;\n}\r\n.label {\n  display: flex;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\r\n.indicator {\n  position: relative;\n  display: inline-flex;\n  width: -webkit-max-content;\n  width: -moz-max-content;\n  width: max-content;\n}\r\n.indicator :where(.indicator-item) {\n  z-index: 1;\n  position: absolute;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.input {\n  flex-shrink: 1;\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  height: 3rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  line-height: 2;\n  border-width: 1px;\n  border-color: hsl(var(--bc) / var(--tw-border-opacity));\n  --tw-border-opacity: 0;\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b1) / var(--tw-bg-opacity));\n  border-radius: var(--rounded-btn, 0.5rem);\n}\r\n.input-group {\n  display: flex;\n  width: 100%;\n  align-items: stretch;\n}\r\n.input-group > *, .input-group > .input {\n  border-radius: 0px;\n}\r\n.input-group :where(span) {\n  display: flex;\n  align-items: center;\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b3, var(--b2)) / var(--tw-bg-opacity));\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\r\n.input-group :first-child {\n  border-top-left-radius: var(--rounded-btn, 0.5rem);\n  border-top-right-radius: 0;\n  border-bottom-left-radius: var(--rounded-btn, 0.5rem);\n  border-bottom-right-radius: 0;\n}\r\n.input-group :last-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: var(--rounded-btn, 0.5rem);\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: var(--rounded-btn, 0.5rem);\n}\r\n.link {\n  cursor: pointer;\n  -webkit-text-decoration-line: underline;\n          text-decoration-line: underline;\n}\r\n.link-hover {\n  -webkit-text-decoration-line: none;\n          text-decoration-line: none;\n}\r\n.link-hover:hover {\n  -webkit-text-decoration-line: underline;\n          text-decoration-line: underline;\n}\r\n.menu {\n  display: flex;\n  flex-direction: column;\n}\r\n.menu.horizontal {\n  display: inline-flex;\n  flex-direction: row;\n}\r\n.menu.horizontal :where(li) {\n  flex-direction: row;\n}\r\n.menu :where(li) {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-items: stretch;\n}\r\n.menu :where(li:not(.menu-title)) > :where(*:not(ul)) {\n  display: flex;\n}\r\n.menu :where(li:not(.disabled):not(.menu-title)) > :where(*:not(ul)) {\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  align-items: center;\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\r\n.menu > :where(li > *:not(ul):focus) {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\r\n.menu > :where(li.disabled > *:not(ul):focus) {\n  cursor: auto;\n}\r\n.menu > :where(li) :where(ul) {\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n}\r\n.menu > :where(li) > :where(ul) {\n  position: absolute;\n  display: none;\n  top: initial;\n  left: 100%;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n}\r\n.menu > :where(li:hover) > :where(ul) {\n  display: flex;\n}\r\n.menu > :where(li:focus) > :where(ul) {\n  display: flex;\n}\r\n.modal {\n  pointer-events: none;\n  visibility: hidden;\n  position: fixed;\n  top: 0px;\n  right: 0px;\n  bottom: 0px;\n  left: 0px;\n  display: flex;\n  justify-content: center;\n  opacity: 0;\n  z-index: 999;\n  background-color: hsl(var(--nf, var(--n)) / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.4;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition-property: transform, opacity;\n  overflow-y: hidden;\n  -ms-scroll-chaining: none;\n      overscroll-behavior: contain;\n}\r\n:where(.modal) {\n  align-items: center;\n}\r\n.modal-box {\n  max-height: calc(100vh - 5em);\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b1) / var(--tw-bg-opacity));\n  padding: 1.5rem;\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  width: 91.666667%;\n  max-width: 32rem;\n  --tw-scale-x: .9;\n  --tw-scale-y: .9;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  border-top-left-radius: var(--rounded-box, 1rem);\n  border-top-right-radius: var(--rounded-box, 1rem);\n  border-bottom-left-radius: var(--rounded-box, 1rem);\n  border-bottom-right-radius: var(--rounded-box, 1rem);\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n  overflow-y: auto;\n  -ms-scroll-chaining: none;\n      overscroll-behavior: contain;\n}\r\n.modal-open, .modal:target, .modal-toggle:checked + .modal {\n  pointer-events: auto;\n  visibility: visible;\n  opacity: 1;\n}\r\n.modal-toggle {\n  position: fixed;\n  height: 0px;\n  width: 0px;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  opacity: 0;\n}\r\n.navbar {\n  display: flex;\n  align-items: center;\n  padding: var(--navbar-padding, 0.5rem);\n  min-height: 4rem;\n  width: 100%;\n}\r\n:where(.navbar > *) {\n  display: inline-flex;\n  align-items: center;\n}\r\n.navbar-start {\n  width: 50%;\n  justify-content: flex-start;\n}\r\n.navbar-center {\n  flex-shrink: 0;\n}\r\n.navbar-end {\n  width: 50%;\n  justify-content: flex-end;\n}\r\n.range {\n  height: 1.5rem;\n  width: 100%;\n  cursor: pointer;\n  -webkit-appearance: none;\n  --range-shdw: var(--bc);\n  overflow: hidden;\n  background-color: transparent;\n  border-radius: var(--rounded-box, 1rem);\n}\r\n.range:focus {\n  outline: none;\n}\r\n.select {\n  display: inline-flex;\n  flex-shrink: 0;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  height: 3rem;\n  padding-left: 1rem;\n  padding-right: 2.5rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  line-height: 2;\n  min-height: 3rem;\n  border-width: 1px;\n  border-color: hsl(var(--bc) / var(--tw-border-opacity));\n  --tw-border-opacity: 0;\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b1) / var(--tw-bg-opacity));\n  font-weight: 600;\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: var(--rounded-btn, 0.5rem);\n  background-image: linear-gradient(45deg, transparent 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, transparent 50%);\n  background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16px) calc(1px + 50%);\n  background-size: 4px 4px, 4px 4px;\n  background-repeat: no-repeat;\n}\r\n.select-disabled, .select[disabled] {\n  pointer-events: none;\n  cursor: not-allowed;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--b2, var(--b1)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b2, var(--b1)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 0.2;\n}\r\n.table {\n  position: relative;\n  text-align: left;\n}\r\n.table th:first-child {\n  position: sticky;\n  position: -webkit-sticky;\n  left: 0px;\n  z-index: 11;\n}\r\n.textarea {\n  flex-shrink: 1;\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  line-height: 2;\n  min-height: 3rem;\n  border-width: 1px;\n  border-color: hsl(var(--bc) / var(--tw-border-opacity));\n  --tw-border-opacity: 0;\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b1) / var(--tw-bg-opacity));\n  border-radius: var(--rounded-btn, 0.5rem);\n}\r\n.toggle {\n  flex-shrink: 0;\n  --chkbg: hsla(var(--bc) / 0.2);\n  --handleoffset: 1.5rem;\n  height: 1.5rem;\n  width: 3rem;\n  cursor: pointer;\n  -webkit-appearance: none;\n     -moz-appearance: none;\n          appearance: none;\n  border-width: 1px;\n  border-color: hsl(var(--bc) / var(--tw-border-opacity));\n  --tw-border-opacity: 0.2;\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.2;\n  transition-duration: 300ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: var(--rounded-badge, 1.9rem);\n  transition: background, box-shadow var(--animation-input, 0.2s) ease-in-out;\n  box-shadow: calc(var(--handleoffset) * -1) 0 0 2px hsl(var(--b1)) inset, 0 0 0 2px hsl(var(--b1)) inset;\n}\r\n.tooltip {\n  position: relative;\n  display: inline-block;\n  --tooltip-offset: calc(100% + 1px + var(--tooltip-tail, 0px));\n  text-align: center;\n  --tooltip-tail: 3px;\n  --tooltip-color: hsl(var(--n));\n  --tooltip-text-color: hsl(var(--nc));\n  --tooltip-tail-offset: calc(100% + 1px - var(--tooltip-tail));\n}\r\n.tooltip:before {\n  position: absolute;\n  pointer-events: none;\n  content: attr(data-tip);\n  transform: translateX(-50%);\n  top: auto;\n  left: 50%;\n  right: auto;\n  bottom: var(--tooltip-offset);\n  max-width: 20rem;\n  border-radius: 0.25rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  background-color: var(--tooltip-color);\n  color: var(--tooltip-text-color);\n  width: -webkit-max-content;\n  width: -moz-max-content;\n  width: max-content;\n}\r\n.tooltip-left:before {\n  transform: translateY(-50%);\n  top: 50%;\n  left: auto;\n  right: var(--tooltip-offset);\n  bottom: auto;\n}\r\n.btn-outline .badge {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--nf, var(--n)) / var(--tw-border-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--nc) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-primary .badge {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--p) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--p) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--pc) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-secondary .badge {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--s) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--s) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--sc) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-accent .badge {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--a) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--a) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--ac) / var(--tw-text-opacity));\n}\r\n.btn-outline .badge.outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--nf, var(--n)) / var(--tw-border-opacity));\n  background-color: transparent;\n}\r\n.btn-outline.btn-primary .badge-outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--p) / var(--tw-border-opacity));\n  background-color: transparent;\n  --tw-text-opacity: 1;\n  color: hsl(var(--p) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-secondary .badge-outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--s) / var(--tw-border-opacity));\n  background-color: transparent;\n  --tw-text-opacity: 1;\n  color: hsl(var(--s) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-accent .badge-outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--a) / var(--tw-border-opacity));\n  background-color: transparent;\n  --tw-text-opacity: 1;\n  color: hsl(var(--a) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-info .badge-outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--in) / var(--tw-border-opacity));\n  background-color: transparent;\n  --tw-text-opacity: 1;\n  color: hsl(var(--in) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-success .badge-outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--su) / var(--tw-border-opacity));\n  background-color: transparent;\n  --tw-text-opacity: 1;\n  color: hsl(var(--su) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-warning .badge-outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--wa) / var(--tw-border-opacity));\n  background-color: transparent;\n  --tw-text-opacity: 1;\n  color: hsl(var(--wa) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-error .badge-outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--er) / var(--tw-border-opacity));\n  background-color: transparent;\n  --tw-text-opacity: 1;\n  color: hsl(var(--er) / var(--tw-text-opacity));\n}\r\n.btn-outline:hover .badge {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--b2, var(--b1)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b2, var(--b1)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n}\r\n.btn-outline:hover .badge.outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--b2, var(--b1)) / var(--tw-border-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--nc) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-primary:hover .badge {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--pc) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--pc) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--p) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-primary:hover .badge.outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--pc) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--pf, var(--p)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--pc) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-secondary:hover .badge {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--sc) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--sc) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--s) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-secondary:hover .badge.outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--sc) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--sf, var(--s)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--sc) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-accent:hover .badge {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--ac) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--ac) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--a) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-accent:hover .badge.outline {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--ac) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--af, var(--a)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--ac) / var(--tw-text-opacity));\n}\r\n.btn:active:hover,\n  .btn:active:focus {\n  -webkit-animation: none;\n          animation: none;\n  transform: scale(var(--btn-focus-scale, 0.95));\n}\r\n.btn:hover, .btn-active {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--nf, var(--n)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--nf, var(--n)) / var(--tw-bg-opacity));\n}\r\n.btn:focus-visible {\n  outline: 2px solid hsl(var(--nf));\n  outline-offset: 2px;\n}\r\n.btn-primary {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--p) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--p) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--pc) / var(--tw-text-opacity));\n}\r\n.btn-primary:hover, .btn-primary.btn-active {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--pf, var(--p)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--pf, var(--p)) / var(--tw-bg-opacity));\n}\r\n.btn-primary:focus-visible {\n  outline: 2px solid hsl(var(--p));\n}\r\n.btn-secondary {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--s) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--s) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--sc) / var(--tw-text-opacity));\n}\r\n.btn-secondary:hover, .btn-secondary.btn-active {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--sf, var(--s)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--sf, var(--s)) / var(--tw-bg-opacity));\n}\r\n.btn-secondary:focus-visible {\n  outline: 2px solid hsl(var(--s));\n}\r\n.btn-accent {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--a) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--a) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--ac) / var(--tw-text-opacity));\n}\r\n.btn-accent:hover, .btn-accent.btn-active {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--af, var(--a)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--af, var(--a)) / var(--tw-bg-opacity));\n}\r\n.btn-accent:focus-visible {\n  outline: 2px solid hsl(var(--a));\n}\r\n.btn-error {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--er) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--er) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--erc, var(--nc)) / var(--tw-text-opacity));\n}\r\n.btn-error:hover, .btn-error.btn-active {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--er) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--er) / var(--tw-bg-opacity));\n}\r\n.btn-error:focus-visible {\n  outline: 2px solid hsl(var(--er));\n}\r\n.btn.glass:hover,\n    .btn.glass.btn-active {\n  --glass-opacity: 25%;\n  --glass-border-opacity: 15%;\n}\r\n.btn.glass:focus-visible {\n  outline: 2px solid 0 0 2px currentColor;\n}\r\n.btn-ghost {\n  border-width: 1px;\n  border-color: transparent;\n  background-color: transparent;\n  color: currentColor;\n}\r\n.btn-ghost:hover, .btn-ghost.btn-active {\n  --tw-border-opacity: 0;\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.2;\n}\r\n.btn-ghost:focus-visible {\n  outline: 2px solid 0 0 2px currentColor;\n}\r\n.btn-outline {\n  border-color: currentColor;\n  background-color: transparent;\n  --tw-text-opacity: 1;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n}\r\n.btn-outline:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--bc) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--b1) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-primary {\n  --tw-text-opacity: 1;\n  color: hsl(var(--p) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-primary:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--pf, var(--p)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--pf, var(--p)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--pc) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-secondary {\n  --tw-text-opacity: 1;\n  color: hsl(var(--s) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-secondary:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--sf, var(--s)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--sf, var(--s)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--sc) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-accent {\n  --tw-text-opacity: 1;\n  color: hsl(var(--a) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-accent:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--af, var(--a)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--af, var(--a)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--ac) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-success {\n  --tw-text-opacity: 1;\n  color: hsl(var(--su) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-success:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--su) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--su) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--suc, var(--nc)) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-info {\n  --tw-text-opacity: 1;\n  color: hsl(var(--in) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-info:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--in) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--in) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--inc, var(--nc)) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-warning {\n  --tw-text-opacity: 1;\n  color: hsl(var(--wa) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-warning:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--wa) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--wa) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--wac, var(--nc)) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-error {\n  --tw-text-opacity: 1;\n  color: hsl(var(--er) / var(--tw-text-opacity));\n}\r\n.btn-outline.btn-error:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--er) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--er) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--erc, var(--nc)) / var(--tw-text-opacity));\n}\r\n.btn-disabled, .btn-disabled:hover, .btn[disabled], .btn[disabled]:hover {\n  --tw-border-opacity: 0;\n  background-color: hsl(var(--n) / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.2;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n  --tw-text-opacity: 0.2;\n}\r\n.btn.loading.btn-square:before, .btn.loading.btn-circle:before {\n  margin-right: 0px;\n}\r\n.btn.loading.btn-xl:before, .btn.loading.btn-lg:before {\n  height: 1.25rem;\n  width: 1.25rem;\n}\r\n.btn.loading.btn-sm:before, .btn.loading.btn-xs:before {\n  height: 0.75rem;\n  width: 0.75rem;\n}\r\n.btn-group > input[type=\"radio\"]:checked.btn, .btn-group > .btn-active {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--p) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--p) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--pc) / var(--tw-text-opacity));\n}\r\n.btn-group > input[type=\"radio\"]:checked.btn:focus-visible, .btn-group > .btn-active:focus-visible {\n  outline: 2px solid hsl(var(--p));\n}\r\n.btn-group > .btn:not(:first-of-type) {\n  margin-left: -1px;\n  border-top-left-radius: 0px;\n  border-bottom-left-radius: 0px;\n}\r\n.btn-group > .btn:not(:last-of-type) {\n  border-top-right-radius: 0px;\n  border-bottom-right-radius: 0px;\n}\r\n@-webkit-keyframes button-pop {\n\n  0% {\n    transform: scale(var(--btn-focus-scale, 0.95));\n  }\n\n  40% {\n    transform: scale(1.02);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\r\n@keyframes button-pop {\n\n  0% {\n    transform: scale(var(--btn-focus-scale, 0.95));\n  }\n\n  40% {\n    transform: scale(1.02);\n  }\n\n  100% {\n    transform: scale(1);\n  }\n}\r\n.card:focus-visible {\n  outline: 2px solid currentColor;\n  outline-offset: 2px;\n}\r\n.card.bordered {\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--b2, var(--b1)) / var(--tw-border-opacity));\n}\r\n.card-bordered {\n  border-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--b2, var(--b1)) / var(--tw-border-opacity));\n}\r\n.card.compact .card-body {\n  padding: 1rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.card-title {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n  font-weight: 600;\n}\r\n.checkbox:focus-visible {\n  outline: 2px solid hsl(var(--bc));\n  outline-offset: 2px;\n}\r\n.checkbox:checked, .checkbox[checked=\"true\"] {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  background-repeat: no-repeat;\n  -webkit-animation: checkmark var(--animation-input, 0.2s) ease-in-out;\n          animation: checkmark var(--animation-input, 0.2s) ease-in-out;\n  background-image: linear-gradient(-45deg, transparent 65%, hsl(var(--chkbg)) 65.99%), linear-gradient(45deg, transparent 75%, hsl(var(--chkbg)) 75.99%), linear-gradient(-45deg, hsl(var(--chkbg)) 40%, transparent 40.99%), linear-gradient(45deg, hsl(var(--chkbg)) 30%, hsl(var(--chkfg)) 30.99%, hsl(var(--chkfg)) 40%, transparent 40.99%), linear-gradient(-45deg, hsl(var(--chkfg)) 50%, hsl(var(--chkbg)) 50.99%);\n}\r\n.checkbox:indeterminate {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  background-repeat: no-repeat;\n  -webkit-animation: checkmark var(--animation-input, 0.2s) ease-in-out;\n          animation: checkmark var(--animation-input, 0.2s) ease-in-out;\n  background-image: linear-gradient(90deg, transparent 80%, hsl(var(--chkbg)) 80%), linear-gradient(-90deg, transparent 80%, hsl(var(--chkbg)) 80%), linear-gradient(0deg, hsl(var(--chkbg)) 43%, hsl(var(--chkfg)) 43%, hsl(var(--chkfg)) 57%, hsl(var(--chkbg)) 57%);\n}\r\n.checkbox:disabled {\n  cursor: not-allowed;\n  border-color: transparent;\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  opacity: 0.2;\n}\r\n@-webkit-keyframes checkmark {\n\n  0% {\n    background-position-y: 5px;\n  }\n\n  50% {\n    background-position-y: -2px;\n  }\n\n  100% {\n    background-position-y: 0;\n  }\n}\r\n@keyframes checkmark {\n\n  0% {\n    background-position-y: 5px;\n  }\n\n  50% {\n    background-position-y: -2px;\n  }\n\n  100% {\n    background-position-y: 0;\n  }\n}\r\nbody[dir=\"rtl\"] .checkbox {\n  --chkbg: var(--bc);\n  --chkfg: var(--b1);\n}\r\nbody[dir=\"rtl\"] .checkbox:checked,\n    body[dir=\"rtl\"] .checkbox[checked=\"true\"] {\n  background-image: linear-gradient(45deg, transparent 65%, hsl(var(--chkbg)) 65.99%), linear-gradient(-45deg, transparent 75%, hsl(var(--chkbg)) 75.99%), linear-gradient(45deg, hsl(var(--chkbg)) 40%, transparent 40.99%), linear-gradient(-45deg, hsl(var(--chkbg)) 30%, hsl(var(--chkfg)) 30.99%, hsl(var(--chkfg)) 40%, transparent 40.99%), linear-gradient(45deg, hsl(var(--chkfg)) 50%, hsl(var(--chkbg)) 50.99%);\n}\r\n.collapse:focus-visible {\n  outline: 2px solid hsl(var(--nf));\n  outline-offset: 2px;\n}\r\n.collapse-arrow .collapse-title:after {\n  position: absolute;\n  display: block;\n  height: 0.5rem;\n  width: 0.5rem;\n  transition-property: all;\n  transition-duration: 150ms;\n  transition-duration: 0.2s;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  top: 1.4rem;\n  right: 1.4rem;\n  content: \"\";\n  transform-origin: 75% 75%;\n  transform: rotate(45deg);\n  box-shadow: 2px 2px;\n  pointer-events: none;\n}\r\n.collapse-plus .collapse-title:after {\n  position: absolute;\n  display: block;\n  height: 0.5rem;\n  width: 0.5rem;\n  transition-property: all;\n  transition-duration: 300ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  top: 0.9rem;\n  right: 1.4rem;\n  content: \"+\";\n  pointer-events: none;\n}\r\n.collapse:not(.collapse-open):not(.collapse-close) input[type=\"checkbox\"], .collapse:not(.collapse-open):not(.collapse-close) .collapse-title {\n  cursor: pointer;\n}\r\n.collapse:focus:not(.collapse-open):not(.collapse-close) .collapse-title {\n  cursor: unset;\n}\r\n.collapse-title, .collapse > input[type=\"checkbox\"] {\n  width: 100%;\n  padding: 1rem;\n  padding-right: 3rem;\n  min-height: 3.75rem;\n  transition: background-color 0.2s ease-in-out;\n}\r\n.collapse-open :where(.collapse-content), .collapse:focus:not(.collapse-close) :where(.collapse-content), .collapse:not(.collapse-close) :where(input[type=\"checkbox\"]:checked ~ .collapse-content) {\n  padding-bottom: 1rem;\n  transition: padding 0.2s ease-in-out, background-color 0.2s ease-in-out;\n}\r\n.collapse-open.collapse-arrow .collapse-title:after,\n.collapse-arrow:focus:not(.collapse-close) .collapse-title:after,\n.collapse-arrow:not(.collapse-close) input[type=\"checkbox\"]:checked ~ .collapse-title:after {\n  transform: rotate(225deg);\n}\r\n.collapse-open.collapse-plus .collapse-title:after,\n.collapse-plus:focus:not(.collapse-close) .collapse-title:after,\n.collapse-plus:not(.collapse-close) input[type=\"checkbox\"]:checked ~ .collapse-title:after {\n  content: \"−\";\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button {\n  outline: 2px solid hsl(var(--nf));\n  outline-offset: 2px;\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-primary {\n  outline: 2px solid hsl(var(--p));\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-secondary {\n  outline: 2px solid hsl(var(--s));\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-accent {\n  outline: 2px solid hsl(var(--a));\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-info {\n  outline: 2px solid hsl(var(--in));\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-success {\n  outline: 2px solid hsl(var(--su));\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-warning {\n  outline: 2px solid hsl(var(--wa));\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-error {\n  outline: 2px solid hsl(var(--er));\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.glass {\n  outline: 2px solid currentColor;\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-ghost {\n  outline: 2px solid currentColor;\n}\r\n.drawer-toggle:focus-visible ~ .drawer-content .drawer-button.btn-link {\n  outline: 2px solid currentColor;\n}\r\n.dropdown.dropdown-open .dropdown-content, .dropdown.dropdown-hover:hover .dropdown-content, .dropdown:focus .dropdown-content, .dropdown:focus-within .dropdown-content {\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.label-text {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  --tw-text-opacity: 1;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n}\r\n.label-text-alt {\n  font-size: 0.75rem;\n  line-height: 1rem;\n  --tw-text-opacity: 1;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n}\r\n.label a:hover {\n  --tw-text-opacity: 1;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n}\r\n.input[list]::-webkit-calendar-picker-indicator {\n  line-height: 1em;\n}\r\n.input-bordered {\n  --tw-border-opacity: 0.2;\n}\r\n.input:focus {\n  outline: 2px solid hsla(var(--bc) / 0.2);\n  outline-offset: 2px;\n}\r\n.input-disabled, .input[disabled] {\n  cursor: not-allowed;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--b2, var(--b1)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b2, var(--b1)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 0.2;\n}\r\n.input-disabled::-moz-placeholder, .input[disabled]::-moz-placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.input-disabled:-ms-input-placeholder, .input[disabled]:-ms-input-placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.input-disabled::placeholder, .input[disabled]::placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.link-neutral {\n  --tw-text-opacity: 1;\n  color: hsl(var(--n) / var(--tw-text-opacity));\n}\r\n.link-neutral:hover {\n  --tw-text-opacity: 1;\n  color: hsl(var(--nf, var(--n)) / var(--tw-text-opacity));\n}\r\n.link:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\r\n.link:focus-visible {\n  outline: 2px solid currentColor;\n  outline-offset: 2px;\n}\r\n.menu.horizontal li.bordered > a, .menu.horizontal li.bordered > button, .menu.horizontal li.bordered > span {\n  border-left-width: 0px;\n  border-bottom-width: 4px;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--p) / var(--tw-border-opacity));\n}\r\n.menu[class*=\" p-\"] li > *, .menu[class^=\"p-\"] li > * {\n  border-radius: var(--rounded-btn, 0.5rem);\n}\r\n.menu :where(li.bordered > *) {\n  border-left-width: 4px;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--p) / var(--tw-border-opacity));\n}\r\n.menu :where(li) > :where(*:not(ul)) {\n  gap: 0.75rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  color: currentColor;\n}\r\n.menu :where(li:not(.menu-title):not(:empty)) > :where(*:not(ul):focus), .menu :where(li:not(.menu-title):not(:empty)) > :where(*:not(ul):hover) {\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.1;\n}\r\n.menu :where(li:not(.menu-title):not(:empty)) > :where(:not(ul).active), .menu :where(li:not(.menu-title):not(:empty)) > :where(*:not(ul):active) {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--p) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--pc) / var(--tw-text-opacity));\n}\r\n.menu :where(li:empty) {\n  margin-left: 1rem;\n  margin-right: 1rem;\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  height: 1px;\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.1;\n}\r\n.menu li.disabled > * {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n  --tw-text-opacity: 0.2;\n}\r\n.menu li.disabled > *:hover {\n  background-color: transparent;\n}\r\n.menu li.hover-bordered a {\n  border-left-width: 4px;\n  border-color: transparent;\n}\r\n.menu li.hover-bordered a:hover {\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--p) / var(--tw-border-opacity));\n}\r\n.menu.compact li > a, .menu.compact li > span {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.menu .menu-title > * {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n  font-size: 0.75rem;\n  line-height: 1rem;\n  font-weight: 700;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n  --tw-text-opacity: 0.4;\n}\r\n.menu :where(li:not(.disabled)) > :where(*:not(ul)) {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\r\n.menu > :where(li:first-child) {\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  border-bottom-right-radius: unset;\n  border-bottom-left-radius: unset;\n}\r\n.menu > :where(li:first-child) > :where(:not(ul)) {\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  border-bottom-right-radius: unset;\n  border-bottom-left-radius: unset;\n}\r\n.menu > :where(li:last-child) {\n  border-top-left-radius: unset;\n  border-top-right-radius: unset;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n}\r\n.menu > :where(li:last-child) > :where(:not(ul)) {\n  border-top-left-radius: unset;\n  border-top-right-radius: unset;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n}\r\n.menu > :where(li) > :where(ul) :where(li) {\n  width: 100%;\n  white-space: nowrap;\n}\r\n.menu > :where(li) > :where(ul) :where(li) :where(ul) {\n  padding-left: 1rem;\n}\r\n.menu > :where(li) > :where(ul) :where(li) > :where(:not(ul)) {\n  width: 100%;\n  white-space: nowrap;\n}\r\n.menu > :where(li) > :where(ul) > :where(li:first-child) {\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  border-bottom-right-radius: unset;\n  border-bottom-left-radius: unset;\n}\r\n.menu > :where(li) > :where(ul) > :where(li:first-child) > :where(:not(ul)) {\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n  border-bottom-right-radius: unset;\n  border-bottom-left-radius: unset;\n}\r\n.menu > :where(li) > :where(ul) > :where(li:last-child) {\n  border-top-left-radius: unset;\n  border-top-right-radius: unset;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n}\r\n.menu > :where(li) > :where(ul) > :where(li:last-child) > :where(:not(ul)) {\n  border-top-left-radius: unset;\n  border-top-right-radius: unset;\n  border-bottom-right-radius: inherit;\n  border-bottom-left-radius: inherit;\n}\r\n.mockup-phone .display {\n  overflow: hidden;\n  border-radius: 40px;\n  margin-top: -25px;\n}\r\n.modal-open .modal-box, .modal-toggle:checked + .modal .modal-box, .modal:target .modal-box {\n  --tw-translate-y: 0px;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n@-webkit-keyframes progress-loading {\n\n  50% {\n    left: 107%;\n  }\n}\r\n@keyframes progress-loading {\n\n  50% {\n    left: 107%;\n  }\n}\r\n@-webkit-keyframes radiomark {\n\n  0% {\n    box-shadow: 0 0 0 12px hsl(var(--b1)) inset, 0 0 0 12px hsl(var(--b1)) inset;\n  }\n\n  50% {\n    box-shadow: 0 0 0 3px hsl(var(--b1)) inset, 0 0 0 3px hsl(var(--b1)) inset;\n  }\n\n  100% {\n    box-shadow: 0 0 0 4px hsl(var(--b1)) inset, 0 0 0 4px hsl(var(--b1)) inset;\n  }\n}\r\n@keyframes radiomark {\n\n  0% {\n    box-shadow: 0 0 0 12px hsl(var(--b1)) inset, 0 0 0 12px hsl(var(--b1)) inset;\n  }\n\n  50% {\n    box-shadow: 0 0 0 3px hsl(var(--b1)) inset, 0 0 0 3px hsl(var(--b1)) inset;\n  }\n\n  100% {\n    box-shadow: 0 0 0 4px hsl(var(--b1)) inset, 0 0 0 4px hsl(var(--b1)) inset;\n  }\n}\r\n.range:focus-visible::-webkit-slider-thumb {\n  --focus-shadow: 0 0 0 6px hsl(var(--b1)) inset, 0 0 0 2rem hsl(var(--range-shdw)) inset;\n}\r\n.range:focus-visible::-moz-range-thumb {\n  --focus-shadow: 0 0 0 6px hsl(var(--b1)) inset, 0 0 0 2rem hsl(var(--range-shdw)) inset;\n}\r\n.range::-webkit-slider-runnable-track {\n  height: 0.5rem;\n  width: 100%;\n  border-radius: var(--rounded-box, 1rem);\n  background-color: hsla(var(--bc) / 0.1);\n}\r\n.range::-moz-range-track {\n  height: 0.5rem;\n  width: 100%;\n  border-radius: var(--rounded-box, 1rem);\n  background-color: hsla(var(--bc) / 0.1);\n}\r\n.range::-webkit-slider-thumb {\n  background-color: hsl(var(--b1));\n  position: relative;\n  height: 1.5rem;\n  width: 1.5rem;\n  border-style: none;\n  border-radius: var(--rounded-box, 1rem);\n  -webkit-appearance: none;\n  top: 50%;\n  color: hsl(var(--range-shdw));\n  transform: translateY(-50%);\n  --filler-size: 100rem;\n  --filler-offset: 0.6rem;\n  box-shadow: 0 0 0 3px hsl(var(--range-shdw)) inset, var(--focus-shadow, 0 0), calc(var(--filler-size) * -1 - var(--filler-offset)) 0 0 var(--filler-size);\n}\r\n.range::-moz-range-thumb {\n  background-color: hsl(var(--b1));\n  position: relative;\n  height: 1.5rem;\n  width: 1.5rem;\n  border-style: none;\n  border-radius: var(--rounded-box, 1rem);\n  top: 50%;\n  color: hsl(var(--range-shdw));\n  --filler-size: 100rem;\n  --filler-offset: 0.5rem;\n  box-shadow: 0 0 0 3px hsl(var(--range-shdw)) inset, var(--focus-shadow, 0 0), calc(var(--filler-size) * -1 - var(--filler-offset)) 0 0 var(--filler-size);\n}\r\n.range-accent {\n  --range-shdw: var(--a);\n}\r\n@-webkit-keyframes rating-pop {\n\n  0% {\n    transform: translateY(-0.125em);\n  }\n\n  40% {\n    transform: translateY(-0.125em);\n  }\n\n  100% {\n    transform: translateY(0);\n  }\n}\r\n@keyframes rating-pop {\n\n  0% {\n    transform: translateY(-0.125em);\n  }\n\n  40% {\n    transform: translateY(-0.125em);\n  }\n\n  100% {\n    transform: translateY(0);\n  }\n}\r\n.select-bordered {\n  --tw-border-opacity: 0.2;\n}\r\n.select:focus {\n  outline: 2px solid hsla(var(--bc) / 0.2);\n  outline-offset: 2px;\n}\r\n.select-ghost {\n  --tw-bg-opacity: 0.05;\n}\r\n.select-ghost:focus {\n  --tw-bg-opacity: 1;\n  --tw-text-opacity: 1;\n  color: hsl(var(--bc) / var(--tw-text-opacity));\n}\r\n.select-disabled::-moz-placeholder, .select[disabled]::-moz-placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.select-disabled:-ms-input-placeholder, .select[disabled]:-ms-input-placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.select-disabled::placeholder, .select[disabled]::placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.select-multiple, .select[multiple], .select[size].select:not([size=\"1\"]) {\n  background-image: none;\n  padding-right: 1rem;\n}\r\n.table :where(th, td) {\n  white-space: nowrap;\n  padding: 1rem;\n  vertical-align: middle;\n}\r\n.table tr.active th, .table tr.active td, .table tr.active:nth-child(even) th, .table tr.active:nth-child(even) td {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b3, var(--b2)) / var(--tw-bg-opacity));\n}\r\n.table tr.hover:hover th, .table tr.hover:hover td, .table tr.hover:nth-child(even):hover th, .table tr.hover:nth-child(even):hover td {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b3, var(--b2)) / var(--tw-bg-opacity));\n}\r\n.table:where(:not(.table-zebra)) :where(thead, tbody, tfoot) :where(tr:not(:last-child) :where(th, td)) {\n  border-bottom-width: 1px;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--b2, var(--b1)) / var(--tw-border-opacity));\n}\r\n.table :where(thead, tfoot) :where(th, td) {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b2, var(--b1)) / var(--tw-bg-opacity));\n  font-size: 0.75rem;\n  line-height: 1rem;\n  font-weight: 700;\n  text-transform: uppercase;\n}\r\n.table :where(:first-child) :where(:first-child) :where(th, td):first-child {\n  border-top-left-radius: 0.5rem;\n}\r\n.table :where(:first-child) :where(:first-child) :where(th, td):last-child {\n  border-top-right-radius: 0.5rem;\n}\r\n.table :where(:last-child) :where(:last-child) :where(th, td):first-child {\n  border-bottom-left-radius: 0.5rem;\n}\r\n.table :where(:last-child) :where(:last-child) :where(th, td):last-child {\n  border-bottom-right-radius: 0.5rem;\n}\r\n.table :where(tbody th, tbody td) {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b1) / var(--tw-bg-opacity));\n}\r\n.textarea-bordered {\n  --tw-border-opacity: 0.2;\n}\r\n.textarea:focus {\n  outline: 2px solid hsla(var(--bc) / 0.2);\n  outline-offset: 2px;\n}\r\n.textarea-disabled, .textarea[disabled] {\n  cursor: not-allowed;\n  --tw-border-opacity: 1;\n  border-color: hsl(var(--b2, var(--b1)) / var(--tw-border-opacity));\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b2, var(--b1)) / var(--tw-bg-opacity));\n  --tw-text-opacity: 0.2;\n}\r\n.textarea-disabled::-moz-placeholder, .textarea[disabled]::-moz-placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.textarea-disabled:-ms-input-placeholder, .textarea[disabled]:-ms-input-placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.textarea-disabled::placeholder, .textarea[disabled]::placeholder {\n  color: hsl(var(--bc) / var(--tw-placeholder-opacity));\n  --tw-placeholder-opacity: 0.2;\n}\r\n.toggle:focus-visible {\n  outline: 2px solid hsl(var(--bc));\n  outline-offset: 2px;\n}\r\n.toggle:checked,\n  .toggle[checked=\"true\"] {\n  --chkbg: hsl(var(--bc));\n  --tw-border-opacity: 1;\n  --tw-bg-opacity: 1;\n  box-shadow: var(--handleoffset) 0 0 2px hsl(var(--b1)) inset, 0 0 0 2px hsl(var(--b1)) inset;\n}\r\n[dir=\"rtl\"] .toggle:checked, [dir=\"rtl\"] .toggle[checked=\"true\"] {\n  box-shadow: calc(var(--handleoffset) * 1) 0 0 2px hsl(var(--b1)) inset, 0 0 0 2px hsl(var(--b1)) inset;\n}\r\n.toggle:indeterminate {\n  --chkbg: hsl(var(--bc));\n  --tw-border-opacity: 1;\n  --tw-bg-opacity: 1;\n  box-shadow: calc(var(--handleoffset) / 2) 0 0 2px hsl(var(--b1)) inset, calc(var(--handleoffset) / -2) 0 0 2px hsl(var(--b1)) inset, 0 0 0 2px hsl(var(--b1)) inset;\n}\r\n[dir=\"rtl\"] .toggle:indeterminate {\n  box-shadow: calc(var(--handleoffset) / 2) 0 0 2px hsl(var(--b1)) inset, calc(var(--handleoffset) / -2) 0 0 2px hsl(var(--b1)) inset, 0 0 0 2px hsl(var(--b1)) inset;\n}\r\n.toggle:disabled {\n  cursor: not-allowed;\n  border-color: transparent;\n  background-color: hsl(var(--bc) / var(--tw-bg-opacity));\n  --tw-bg-opacity: 0.2;\n}\r\n.tooltip:before, .tooltip:after {\n  opacity: 0;\n  transition-property: color, background-color, border-color, fill, stroke, opacity, box-shadow, transform, filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;\n  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter, -webkit-text-decoration-color, -webkit-backdrop-filter;\n  transition-delay: 100ms;\n  transition-duration: 200ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\r\n.tooltip:after {\n  position: absolute;\n  content: \"\";\n  border-style: solid;\n  border-width: var(--tooltip-tail, 0);\n  width: 0;\n  height: 0;\n  display: block;\n  transform: translateX(-50%);\n  border-color: var(--tooltip-color) transparent transparent transparent;\n  top: auto;\n  left: 50%;\n  right: auto;\n  bottom: var(--tooltip-tail-offset);\n}\r\n.tooltip.tooltip-open:before, .tooltip.tooltip-open:after, .tooltip:hover:before, .tooltip:hover:after {\n  opacity: 1;\n  transition-delay: 75ms;\n}\r\n.tooltip-left:after {\n  transform: translateY(-50%);\n  border-color: transparent transparent transparent var(--tooltip-color);\n  top: 50%;\n  left: auto;\n  right: calc(var(--tooltip-tail-offset) + 1px);\n  bottom: auto;\n}\r\n.rounded-box {\n  border-radius: var(--rounded-box, 1rem);\n}\r\n.glass,\n  .glass:hover,\n  .glass.btn-active {\n  border: none;\n  -webkit-backdrop-filter: blur(var(--glass-blur, 40px));\n          backdrop-filter: blur(var(--glass-blur, 40px));\n  background-color: transparent;\n  background-image: linear-gradient(\n        135deg,\n        rgb(255 255 255 / var(--glass-opacity, 30%)) 0%,\n        rgb(0 0 0 / 0%) 100%\n      ),\n      linear-gradient(\n        var(--glass-reflex-degree, 100deg),\n        rgb(255 255 255 / var(--glass-reflex-opacity, 10%)) 25%,\n        rgb(0 0 0 / 0%) 25%\n      );\n  box-shadow: 0 0 0 1px rgb(255 255 255 / var(--glass-border-opacity, 10%))\n        inset,\n      0 0 0 2px rgb(0 0 0 / 5%);\n  text-shadow: 0 1px rgb(0 0 0 / var(--glass-text-shadow-opacity, 5%));\n}\r\n.btn-xs {\n  height: 1.5rem;\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n  min-height: 1.5rem;\n  font-size: 0.75rem;\n}\r\n.btn-sm {\n  height: 2rem;\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n  min-height: 2rem;\n  font-size: 0.875rem;\n}\r\n.btn-wide {\n  width: 16rem;\n}\r\n.btn-square:where(.btn-xs) {\n  height: 1.5rem;\n  width: 1.5rem;\n  padding: 0px;\n}\r\n.btn-square:where(.btn-sm) {\n  height: 2rem;\n  width: 2rem;\n  padding: 0px;\n}\r\n.btn-square:where(.btn-md) {\n  height: 3rem;\n  width: 3rem;\n  padding: 0px;\n}\r\n.btn-square:where(.btn-lg) {\n  height: 4rem;\n  width: 4rem;\n  padding: 0px;\n}\r\n.btn-circle:where(.btn-xs) {\n  height: 1.5rem;\n  width: 1.5rem;\n  border-radius: 9999px;\n  padding: 0px;\n}\r\n.btn-circle:where(.btn-sm) {\n  height: 2rem;\n  width: 2rem;\n  border-radius: 9999px;\n  padding: 0px;\n}\r\n.btn-circle:where(.btn-md) {\n  height: 3rem;\n  width: 3rem;\n  border-radius: 9999px;\n  padding: 0px;\n}\r\n.btn-circle:where(.btn-lg) {\n  height: 4rem;\n  width: 4rem;\n  border-radius: 9999px;\n  padding: 0px;\n}\r\n.indicator :where(.indicator-item) {\n  right: 0px;\n  left: auto;\n  top: 0px;\n  bottom: auto;\n  --tw-translate-x: 50%;\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.indicator :where(.indicator-item.indicator-start) {\n  right: auto;\n  left: 0px;\n  --tw-translate-x: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.indicator :where(.indicator-item.indicator-center) {\n  right: 50%;\n  left: 50%;\n  --tw-translate-x: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.indicator :where(.indicator-item.indicator-end) {\n  right: 0px;\n  left: auto;\n  --tw-translate-x: 50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.indicator :where(.indicator-item.indicator-bottom) {\n  top: auto;\n  bottom: 0px;\n  --tw-translate-y: 50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.indicator :where(.indicator-item.indicator-middle) {\n  top: 50%;\n  bottom: 50%;\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.indicator :where(.indicator-item.indicator-top) {\n  top: 0px;\n  bottom: auto;\n  --tw-translate-y: -50%;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n}\r\n.input-lg {\n  height: 4rem;\n  padding-left: 1.5rem;\n  padding-right: 1.5rem;\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n  line-height: 2;\n}\r\n.input-sm {\n  height: 2rem;\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n  font-size: 0.875rem;\n  line-height: 2rem;\n}\r\n.modal-bottom {\n  align-items: flex-end;\n}\r\n.range-sm {\n  height: 1.25rem;\n}\r\n.range-sm::-webkit-slider-runnable-track {\n  height: 0.25rem;\n}\r\n.range-sm::-moz-range-track {\n  height: 0.25rem;\n}\r\n.range-sm::-webkit-slider-thumb {\n  height: 1.25rem;\n  width: 1.25rem;\n  --filler-offset: 0.5rem;\n}\r\n.range-sm::-moz-range-thumb {\n  height: 1.25rem;\n  width: 1.25rem;\n  --filler-offset: 0.5rem;\n}\r\n.toggle-md {\n  --handleoffset: 1.5rem;\n  height: 1.5rem;\n  width: 3rem;\n}\r\n.alert-error {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--er) / var(--tw-bg-opacity));\n  --tw-text-opacity: 1;\n  color: hsl(var(--erc, var(--nc)) / var(--tw-text-opacity));\n}\r\n.badge-outline {\n  border-color: currentColor;\n  --tw-border-opacity: 0.5;\n  background-color: transparent;\n  color: currentColor;\n}\r\n.badge-outline.badge-primary {\n  --tw-text-opacity: 1;\n  color: hsl(var(--p) / var(--tw-text-opacity));\n}\r\n.badge-outline.badge-secondary {\n  --tw-text-opacity: 1;\n  color: hsl(var(--s) / var(--tw-text-opacity));\n}\r\n.badge-outline.badge-accent {\n  --tw-text-opacity: 1;\n  color: hsl(var(--a) / var(--tw-text-opacity));\n}\r\n.badge-outline.badge-info {\n  --tw-text-opacity: 1;\n  color: hsl(var(--in) / var(--tw-text-opacity));\n}\r\n.badge-outline.badge-success {\n  --tw-text-opacity: 1;\n  color: hsl(var(--su) / var(--tw-text-opacity));\n}\r\n.badge-outline.badge-warning {\n  --tw-text-opacity: 1;\n  color: hsl(var(--wa) / var(--tw-text-opacity));\n}\r\n.badge-outline.badge-error {\n  --tw-text-opacity: 1;\n  color: hsl(var(--er) / var(--tw-text-opacity));\n}\r\n.card-compact .card-body {\n  padding: 1rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.card-compact .card-title {\n  margin-bottom: 0.25rem;\n}\r\n.card-normal .card-body {\n  padding: var(--padding-card, 2rem);\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\r\n.card-normal .card-title {\n  margin-bottom: 0.75rem;\n}\r\n.menu-compact :where(li > *) {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.modal-bottom :where(.modal-box) {\n  width: 100%;\n  max-width: none;\n  --tw-translate-y: 2.5rem;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  border-bottom-right-radius: 0px;\n  border-bottom-left-radius: 0px;\n}\r\n.modal-middle :where(.modal-box) {\n  width: 91.666667%;\n  max-width: 32rem;\n  --tw-translate-y: 0px;\n  --tw-scale-x: .9;\n  --tw-scale-y: .9;\n  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));\n  border-bottom-left-radius: var(--rounded-box, 1rem);\n  border-bottom-right-radius: var(--rounded-box, 1rem);\n}\r\n.fixed {\n  position: fixed;\n}\r\n.absolute {\n  position: absolute;\n}\r\n.relative {\n  position: relative;\n}\r\n.right-2 {\n  right: 0.5rem;\n}\r\n.top-2 {\n  top: 0.5rem;\n}\r\n.m-1 {\n  margin: 0.25rem;\n}\r\n.my-4 {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\r\n.mr-2 {\n  margin-right: 0.5rem;\n}\r\n.mb-5 {\n  margin-bottom: 1.25rem;\n}\r\n.mt-5 {\n  margin-top: 1.25rem;\n}\r\n.mt-6 {\n  margin-top: 1.5rem;\n}\r\n.mt-2 {\n  margin-top: 0.5rem;\n}\r\n.mt-8 {\n  margin-top: 2rem;\n}\r\n.mt-3 {\n  margin-top: 0.75rem;\n}\r\n.mt-1 {\n  margin-top: 0.25rem;\n}\r\n.mb-4 {\n  margin-bottom: 1rem;\n}\r\n.ml-2 {\n  margin-left: 0.5rem;\n}\r\n.mb-2 {\n  margin-bottom: 0.5rem;\n}\r\n.ml-1 {\n  margin-left: 0.25rem;\n}\r\n.inline-block {\n  display: inline-block;\n}\r\n.flex {\n  display: flex;\n}\r\n.inline-flex {\n  display: inline-flex;\n}\r\n.table {\n  display: table;\n}\r\n.flow-root {\n  display: flow-root;\n}\r\n.h-5 {\n  height: 1.25rem;\n}\r\n.w-96 {\n  width: 24rem;\n}\r\n.w-full {\n  width: 100%;\n}\r\n.w-32 {\n  width: 8rem;\n}\r\n.w-1\\/2 {\n  width: 50%;\n}\r\n.w-6 {\n  width: 1.5rem;\n}\r\n.w-5 {\n  width: 1.25rem;\n}\r\n.w-52 {\n  width: 13rem;\n}\r\n.min-w-0 {\n  min-width: 0px;\n}\r\n.max-w-xs {\n  max-width: 20rem;\n}\r\n.max-w-7xl {\n  max-width: 80rem;\n}\r\n.max-w-sm {\n  max-width: 24rem;\n}\r\n.flex-1 {\n  flex: 1 1 0%;\n}\r\n.flex-shrink-0 {\n  flex-shrink: 0;\n}\r\n.flex-grow {\n  flex-grow: 1;\n}\r\n.cursor-pointer {\n  cursor: pointer;\n}\r\n.items-center {\n  align-items: center;\n}\r\n.justify-end {\n  justify-content: flex-end;\n}\r\n.justify-between {\n  justify-content: space-between;\n}\r\n.space-x-4 > :not([hidden]) ~ :not([hidden]) {\n  --tw-space-x-reverse: 0;\n  margin-right: calc(1rem * var(--tw-space-x-reverse));\n  margin-left: calc(1rem * calc(1 - var(--tw-space-x-reverse)));\n}\r\n.divide-y > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-y-reverse: 0;\n  border-top-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));\n  border-bottom-width: calc(1px * var(--tw-divide-y-reverse));\n}\r\n.divide-gray-200 > :not([hidden]) ~ :not([hidden]) {\n  --tw-divide-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-divide-opacity));\n}\r\n.overflow-x-auto {\n  overflow-x: auto;\n}\r\n.truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\r\n.rounded-lg {\n  border-radius: 0.5rem;\n}\r\n.rounded-full {\n  border-radius: 9999px;\n}\r\n.rounded-xl {\n  border-radius: 0.75rem;\n}\r\n.border {\n  border-width: 1px;\n}\r\n.border-gray-200 {\n  --tw-border-opacity: 1;\n  border-color: rgb(229 231 235 / var(--tw-border-opacity));\n}\r\n.bg-red-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 38 38 / var(--tw-bg-opacity));\n}\r\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\r\n.bg-base-100 {\n  --tw-bg-opacity: 1;\n  background-color: hsl(var(--b1) / var(--tw-bg-opacity));\n}\r\n.bg-yellow-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 249 195 / var(--tw-bg-opacity));\n}\r\n.bg-indigo-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(224 231 255 / var(--tw-bg-opacity));\n}\r\n.bg-red-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 226 226 / var(--tw-bg-opacity));\n}\r\n.bg-green-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(220 252 231 / var(--tw-bg-opacity));\n}\r\n.fill-current {\n  fill: currentColor;\n}\r\n.p-1 {\n  padding: 0.25rem;\n}\r\n.p-4 {\n  padding: 1rem;\n}\r\n.p-2 {\n  padding: 0.5rem;\n}\r\n.px-5 {\n  padding-left: 1.25rem;\n  padding-right: 1.25rem;\n}\r\n.py-2\\.5 {\n  padding-top: 0.625rem;\n  padding-bottom: 0.625rem;\n}\r\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\r\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\r\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\r\n.pt-4 {\n  padding-top: 1rem;\n}\r\n.pb-8 {\n  padding-bottom: 2rem;\n}\r\n.pr-2 {\n  padding-right: 0.5rem;\n}\r\n.pl-2 {\n  padding-left: 0.5rem;\n}\r\n.pt-2 {\n  padding-top: 0.5rem;\n}\r\n.pr-5 {\n  padding-right: 1.25rem;\n}\r\n.pr-1 {\n  padding-right: 0.25rem;\n}\r\n.pr-4 {\n  padding-right: 1rem;\n}\r\n.text-center {\n  text-align: center;\n}\r\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\r\n.text-xl {\n  font-size: 1.25rem;\n  line-height: 1.75rem;\n}\r\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\r\n.text-base {\n  font-size: 1rem;\n  line-height: 1.5rem;\n}\r\n.font-medium {\n  font-weight: 500;\n}\r\n.font-bold {\n  font-weight: 700;\n}\r\n.font-semibold {\n  font-weight: 600;\n}\r\n.normal-case {\n  text-transform: none;\n}\r\n.leading-none {\n  line-height: 1;\n}\r\n.text-white {\n  --tw-text-opacity: 1;\n  color: rgb(255 255 255 / var(--tw-text-opacity));\n}\r\n.text-gray-500 {\n  --tw-text-opacity: 1;\n  color: rgb(107 114 128 / var(--tw-text-opacity));\n}\r\n.text-gray-900 {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\r\n.text-gray-600 {\n  --tw-text-opacity: 1;\n  color: rgb(75 85 99 / var(--tw-text-opacity));\n}\r\n.shadow-lg {\n  --tw-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.shadow-2xl {\n  --tw-shadow: 0 25px 50px -12px rgb(0 0 0 / 0.25);\n  --tw-shadow-colored: 0 25px 50px -12px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.shadow {\n  --tw-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.shadow-md {\n  --tw-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color), 0 2px 4px -2px var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\r\n.filter {\n  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);\n}\r\n\r\n.center_content{\r\n    margin-top: 1%;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n}\r\n\r\n.hover\\:bg-red-800:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(153 27 27 / var(--tw-bg-opacity));\n}\r\n\r\n.hover\\:bg-gray-100:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(243 244 246 / var(--tw-bg-opacity));\n}\r\n\r\n.hover\\:text-gray-900:hover {\n  --tw-text-opacity: 1;\n  color: rgb(17 24 39 / var(--tw-text-opacity));\n}\r\n\r\n.focus\\:z-10:focus {\n  z-index: 10;\n}\r\n\r\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\r\n\r\n.focus\\:ring-4:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\r\n\r\n.focus\\:ring-red-300:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(252 165 165 / var(--tw-ring-opacity));\n}\r\n\r\n.focus\\:ring-gray-200:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(229 231 235 / var(--tw-ring-opacity));\n}\r\n\r\n@media (prefers-color-scheme: dark) {\n\n  .dark\\:border-gray-500 {\n    --tw-border-opacity: 1;\n    border-color: rgb(107 114 128 / var(--tw-border-opacity));\n  }\n\n  .dark\\:bg-gray-700 {\n    --tw-bg-opacity: 1;\n    background-color: rgb(55 65 81 / var(--tw-bg-opacity));\n  }\n\n  .dark\\:text-gray-300 {\n    --tw-text-opacity: 1;\n    color: rgb(209 213 219 / var(--tw-text-opacity));\n  }\n\n  .dark\\:hover\\:bg-gray-600:hover {\n    --tw-bg-opacity: 1;\n    background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n  }\n\n  .dark\\:hover\\:text-white:hover {\n    --tw-text-opacity: 1;\n    color: rgb(255 255 255 / var(--tw-text-opacity));\n  }\n\n  .dark\\:focus\\:ring-red-800:focus {\n    --tw-ring-opacity: 1;\n    --tw-ring-color: rgb(153 27 27 / var(--tw-ring-opacity));\n  }\n\n  .dark\\:focus\\:ring-gray-600:focus {\n    --tw-ring-opacity: 1;\n    --tw-ring-color: rgb(75 85 99 / var(--tw-ring-opacity));\n  }\n}\r\n\r\n@media (min-width: 640px) {\n\n  .sm\\:p-2 {\n    padding: 0.5rem;\n  }\n\n  .sm\\:p-8 {\n    padding: 2rem;\n  }\n\n  .sm\\:py-4 {\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n  }\n}\r\n\r\n@media (min-width: 768px) {\n\n  .md\\:h-6 {\n    height: 1.5rem;\n  }\n\n  .md\\:w-6 {\n    width: 1.5rem;\n  }\n}\r\n";
    styleInject(css_248z);

    const app = new App({
        target: document.body,
    });

    return app;

})();
//# sourceMappingURL=bundle.js.map
